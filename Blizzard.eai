#INCLUDE <Blizzard1.j>
    //-----------------------------------------------------------------------
    // Commander globals
    //-----------------------------------------------------------------------

    // default values
    string language = ""  // Possible values: "" (dialog), "English", "Deutsch", "Swedish", "French", "Spanish", "Romanian", "Russian", "Portuguese", "Norwegian", "Chinese"
    string game_mode = "" // Possible values: "" (dialog), "commander", "no_human", "ai_only"

    integer array command_number
    integer array command_par1
    integer array command_par2
    integer array command_par3
    string array command_key1
    string array command_key2
    string array command_key3
    string array command_dlg1
    integer array command_hotkey1
    string array command_dlg2
    integer array command_hotkey2
    string array command_dlg3
    integer array command_hotkey3
    string array command_msg
    integer command_length = 0

    string array parsed_command
    string command_prefix = "Cmd:"

    button array cdlg_button
    integer array cdlg_number
    dialog array cdlg_dialog
    integer cdlg_length = 0

    dialog number_dialog = null
    dialog number_dialog_one = null
    dialog number_dialog_two = null
    dialog player_dialog = null
    dialog player_dialog_one = null
    dialog player_dialog_two = null
    dialog start_dialog = null
    dialog start_dialog_one = null
    dialog start_dialog_two = null
    dialog root_dialog = null

    integer array current_command
    integer array current_player_par
    integer array current_number_par
    player array commanded_player

    string array tribute_type
    button tribute_g = null
    button tribute_l = null
    button tribute_give_g = null
    button tribute_give_l = null
    dialog tribute_dlg = null
    dialog tribute_type_dlg = null

    button array tribute_dlg_button
    integer tribute_dlg_length = 0

    button array sdbn_button
    integer array sdbn_number
    integer sdbn_length = 0
    integer sdbn_length_one = 0
    integer sdbn_length_two = 0
    integer sdbn_length_three = 0
    integer sdbn_length_four = 0

    button array pcbn_button
    integer array pcbn_number
    integer pcbn_length = 0

    button array ndbn_button
    integer ndbn_length = 0

    dialog array dlg_dialog
    string array dlg_string
    integer dlg_length = 0
	
    integer playermax = 12
    integer playercreep = 14

    trigger ZoomSetx = null

    dialog game_start_dialog = null
    trigger game_start_trigger = null
    button commander_mode = null
    button no_human_mode = null
    button ai_only_mode = null

    dialog language_dialog = null
    trigger languagechange_trigger = null
    trigger language_trigger = null
#INCLUDETABLE <Languages.txt> #EFR
    button %1_button = null
#ENDINCLUDE

    string chat_no_ally = ""
    string you_no_gold = ""
    string i_no_gold = ""
    string tribute_of_gold = ""
    string gold_received_thanks = ""
    string you_no_lumber = ""
    string i_no_lumber = ""
    string tribute_of_lumber = ""
    string lumber_received_thanks = ""
	string you_mistyped_tribute = ""
	string specified_player_not_valid = ""
	string command_not_valid = ""
	string all_not_allowed = ""
	string player_id_mistyped = ""
	string color_word_mistyped = ""
	string not_specified_computer = ""
	string dlgbutton_next_page = ""
	string dlgbutton_previous_page = ""
    string dlghdr_choose_ally = ""
    string dlghdr_choose_number = ""
    string dlghdr_choose_player = ""
    string dlghdr_game_type = ""
    string dlghdr_root = ""
    string dlghdr_tribute_type = ""
    string dlghdr_tribute_amount = ""
    string dlgbutton_cancel = ""
    string dlgbutton_all = ""
    string dlgbutton_gold = ""
    string dlgbutton_lumber = ""
    string dlgbutton_give_gold = "Give Gold"
    string dlgbutton_give_lumber = "Give Lumber"
    string dlgbutton_tribute = ""
    string dlgbutton_commander = ""
    string dlgbutton_no_human = ""
    string dlgbutton_ai_only = ""

    leaderboard color_board = null
	playercolor        PLAYER_COLOR_MAROONX             = null
    playercolor        PLAYER_COLOR_NAVYX               = null
    playercolor        PLAYER_COLOR_TURQUOISEX          = null
    playercolor        PLAYER_COLOR_VIOLETX             = null
    playercolor        PLAYER_COLOR_WHEATX              = null
    playercolor        PLAYER_COLOR_PEACHX              = null
    playercolor        PLAYER_COLOR_MINTX               = null
    playercolor        PLAYER_COLOR_LAVENDERX           = null
    playercolor        PLAYER_COLOR_COALX               = null
    playercolor        PLAYER_COLOR_SNOWX               = null
    playercolor        PLAYER_COLOR_EMERALDX            = null
    playercolor        PLAYER_COLOR_PEANUTX             = null
	
    //gamecache translation = InitGameCache("Commander.w3v")
	hashtable translation = InitHashtable()

#INCLUDE <Blizzard2.j>

//***************************************************************************
//*
//*  Commander
//*
//***************************************************************************

//===========================================================================
// The Parser (Takes a String, Seperates words, puts in string array)
//===========================================================================
function Parser takes string ChatMsg returns nothing
   //Required Variables
   local integer Last = 0
   local integer A = 1
   local integer I = 0
   local integer Length = StringLength(ChatMsg)

   //Pulls Words and places them each in their own Variable
   loop
     if (SubStringBJ(ChatMsg,A,A) == " ") then
       set parsed_command[I] = StringCase(SubStringBJ(ChatMsg, (Last + 1), (A - 1)), true)
       set Last = A
       set I = I + 1
     elseif (A == Length) then
       set parsed_command[I] = StringCase(SubStringBJ(ChatMsg, (Last + 1), A), true)
       set I = I + 1
     endif
     set A = A + 1
     exitwhen(A>Length)
   endloop
   loop
     exitwhen I > 6
     set parsed_command[I] = ""
     set I = I + 1
   endloop

endfunction

//===========================================================================
// ColorText (Converts the player color to a text version)
//===========================================================================
function ColorText takes player CPlayer returns string
  //Required Variables
  local playercolor PColor = GetPlayerColor(CPlayer)  //Gets the Player's color
    
  //Finds the Nicer Text Version of the Player's Color
  if (PColor == PLAYER_COLOR_RED) then
    return "Red"
  elseif (PColor == PLAYER_COLOR_BLUE) then
    return "Blue"
  elseif (PColor == PLAYER_COLOR_CYAN) then
    return "Cyan"
  elseif (PColor == PLAYER_COLOR_PURPLE) then
    return "Purple"
  elseif (PColor == PLAYER_COLOR_YELLOW) then
    return "Yellow"
  elseif (PColor == PLAYER_COLOR_ORANGE) then
    return "Orange"
  elseif (PColor == PLAYER_COLOR_GREEN) then
    return "Green"
  elseif (PColor == PLAYER_COLOR_PINK) then
    return "Pink"
  elseif (PColor == PLAYER_COLOR_LIGHT_GRAY) then
    return "Light Gray"
  elseif (PColor == PLAYER_COLOR_LIGHT_BLUE) then
    return "Light Blue"
  elseif (PColor == PLAYER_COLOR_AQUA) then
    return "Aqua"
  elseif (PColor == PLAYER_COLOR_BROWN) then
    return "Brown"
  else
    if playermax != 12 then
      if (PColor == PLAYER_COLOR_MAROONX) then
        return "Maroon"
      elseif (PColor == PLAYER_COLOR_NAVYX) then
        return "Navy"
      elseif (PColor == PLAYER_COLOR_TURQUOISEX) then
        return "Turquoise"
      elseif (PColor == PLAYER_COLOR_VIOLETX) then
        return "Violet"
      elseif (PColor == PLAYER_COLOR_WHEATX) then
        return "Wheat"
      elseif (PColor == PLAYER_COLOR_PEACHX) then
        return "Peach"
      elseif (PColor == PLAYER_COLOR_MINTX) then
        return "Mint"
      elseif (PColor == PLAYER_COLOR_LAVENDERX) then
        return "Lavender"
      elseif (PColor == PLAYER_COLOR_COALX) then
        return "Coal"
      elseif (PColor == PLAYER_COLOR_SNOWX) then
        return "Snow"
      elseif (PColor == PLAYER_COLOR_EMERALDX) then
        return "Emerald"
      elseif (PColor == PLAYER_COLOR_PEANUTX) then
        return "Peanut"
      endif
     endif
  endif
  //Returns text version
  return ""
endfunction

//===========================================================================
// ColorPlayer (Converts from text version of a color to a playercolor)
//===========================================================================
function ColorPlayer takes string CompC returns playercolor
  //Finds player color of the text color
  if (CompC == "Red") then
    return PLAYER_COLOR_RED
  elseif (CompC == "Blue") then
    return PLAYER_COLOR_BLUE
  elseif (CompC == "Cyan") then
    return PLAYER_COLOR_CYAN
  elseif (CompC == "Purple") then
    return PLAYER_COLOR_PURPLE
  elseif (CompC == "Yellow") then
    return PLAYER_COLOR_YELLOW
  elseif (CompC == "Orange") then
    return PLAYER_COLOR_ORANGE
  elseif (CompC == "Green") then
    return PLAYER_COLOR_GREEN
  elseif (CompC == "Pink") then
    return PLAYER_COLOR_PINK
  elseif (CompC == "Light Gray") then
    return PLAYER_COLOR_LIGHT_GRAY
  elseif (CompC == "Light Blue") then
    return PLAYER_COLOR_LIGHT_BLUE
  elseif (CompC == "Aqua") then
    return PLAYER_COLOR_AQUA
  elseif (CompC == "Brown") then
    return PLAYER_COLOR_BROWN
   else
    if  playermax != 12 then
	  if (CompC == "MAROON") then
        return PLAYER_COLOR_MAROONX
      elseif (CompC == "Navy") then
        return PLAYER_COLOR_NAVYX
      elseif (CompC == "Turquoise") then
        return PLAYER_COLOR_TURQUOISEX
      elseif (CompC == "Violet") then
        return PLAYER_COLOR_VIOLETX
      elseif (CompC == "Wheat") then
        return PLAYER_COLOR_WHEATX
      elseif (CompC == "Peach") then
        return PLAYER_COLOR_PEACHX
      elseif (CompC == "Mint") then
        return PLAYER_COLOR_MINTX
      elseif (CompC == "Lavender") then
        return PLAYER_COLOR_LAVENDERX
      elseif (CompC == "Coal") then
        return PLAYER_COLOR_COALX
      elseif (CompC == "Snow") then
        return PLAYER_COLOR_SNOWX
      elseif (CompC == "Emerald") then
        return PLAYER_COLOR_EMERALDX
      elseif (CompC == "Peanut") then
        return PLAYER_COLOR_PEANUTX
	  endif
    endif
    return null
  endif

endfunction

function cs2s takes string s, playercolor c returns string
  if c == PLAYER_COLOR_RED then
    return "|cffff0402"+s+"|r"
  elseif c == PLAYER_COLOR_BLUE then
    return "|cff0042ff"+s+"|r"
  elseif c == PLAYER_COLOR_CYAN then
    return "|cff1be6ba"+s+"|r"
  elseif c == PLAYER_COLOR_PURPLE then
    return "|cff550081"+s+"|r"
  elseif c == PLAYER_COLOR_YELLOW then
    return "|cfffffc00"+s+"|r"
  elseif c == PLAYER_COLOR_ORANGE then
    return "|cffff8a0d"+s+"|r"
  elseif c == PLAYER_COLOR_GREEN then
    return "|cff20bf00"+s+"|r"
  elseif c == PLAYER_COLOR_PINK then
    return "|cffe35baf"+s+"|r"
  elseif c == PLAYER_COLOR_LIGHT_GRAY then
    return "|cff949696"+s+"|r"
  elseif c == PLAYER_COLOR_LIGHT_BLUE then
    return "|cff81bff1"+s+"|r"
  elseif c == PLAYER_COLOR_AQUA then
    return "|cff106247"+s+"|r"
  else
    if  playermax != 12 then
      if c == PLAYER_COLOR_MAROONX then
        return "|cff9c0000"+s+"|r"
      elseif c == PLAYER_COLOR_NAVYX then
        return "|cff0000c2"+s+"|r"
      elseif c == PLAYER_COLOR_TURQUOISEX then
        return "|cff00ebff"+s+"|r"
      elseif c == PLAYER_COLOR_VIOLETX then
        return "|cffbd00ff"+s+"|r"
      elseif c == PLAYER_COLOR_WHEATX then
        return "|cffeccc86"+s+"|r"
      elseif c == PLAYER_COLOR_PEACHX then
        return "|cfff7a48b"+s+"|r"
      elseif c == PLAYER_COLOR_MINTX then
        return "|cffbfff80"+s+"|r"
      elseif c == PLAYER_COLOR_LAVENDERX then
        return "|cffdbb8ec"+s+"|r"
      elseif c == PLAYER_COLOR_COALX then
        return "|cff4f4f55"+s+"|r"
      elseif c == PLAYER_COLOR_SNOWX then
        return "|cffecf0ff"+s+"|r"
      elseif c == PLAYER_COLOR_EMERALDX then
        return "|cff00781e"+s+"|r"
      elseif c == PLAYER_COLOR_PEANUTX then
        return "|cffa46f34"+s+"|r"
      endif
    endif
    return "|cff4f2b05"+s+"|r"  //Brown
  endif
endfunction

function c2s takes player p returns string
  return cs2s(GetPlayerName(p), GetPlayerColor(p)) + ": "
endfunction

function DisplayToTP takes string msg returns nothing
  call DisplayTimedTextToPlayer(GetTriggerPlayer(), 0, 0, 5, msg )
endfunction

function DisplayToPlayer takes player p, string msg returns nothing
  call DisplayTimedTextToPlayer(p, 0, 0, 5, msg )
endfunction

function DisplayToAll takes string msg returns nothing
  call DisplayTimedTextToPlayer(GetLocalPlayer(), 0, 0, 7, msg )
endfunction

function DisplayFromPlayer takes player p, string msg returns nothing
  call DisplayToTP(c2s(p) + msg)
endfunction

function DisplayFromToPlayer takes player sp, player rp, string msg returns nothing
  call DisplayToPlayer(rp, c2s(sp) + msg)
endfunction

function DisplayFromDlg takes string msg returns nothing
  if msg == "" or commanded_player[GetPlayerId(GetTriggerPlayer())] == Player(playercreep) then
    return
  endif
  if GetTriggerPlayer() != null then
    if commanded_player[GetPlayerId(GetTriggerPlayer())] != null then
      call DisplayFromToPlayer(commanded_player[GetPlayerId(GetTriggerPlayer())], GetTriggerPlayer(), msg)
    else
      call DisplayToPlayer(commanded_player[GetPlayerId(GetTriggerPlayer())], msg)
    endif
  else
    call DisplayToAll(msg)
  endif
endfunction

//===========================================================================
// Sync integer
//===========================================================================
function SyncInteger takes player sync_p, integer unsynced returns integer
  local integer array source_int // the bits of the unsynced integer are stored in there
  local integer array target_int // the bits of the synced integer are stored in there
  local unit array sel_unit // the units used for the selection
  local integer i = 1
  local integer j = 0
  local integer sum = unsynced
  local group old_selection = CreateGroup()
  local unit u = null
  local integer bits_per_selection = 8 // that many bits are sent per selection
  local integer selection_num = 2 // that many times a selection is done
  local integer bits_number = selection_num * bits_per_selection // number of bits of integer used
  local timer t = CreateTimer()

//  call DisplayToPlayer(sync_p, I2S(sum))

  if bj_isSinglePlayer then
    return unsynced
  endif

  // separate integer in bits
  if sum < 0 then
    set source_int[0] = 1
    set sum = -sum
  else
    set source_int[0] = 0
  endif
  loop
    exitwhen i >= bits_number
    set source_int[i] = ModuloInteger(sum, 2)
    set sum = sum / 2
    set i = i + 1
  endloop

  // create units to select
  set i = 0
  loop
    exitwhen i >= bits_per_selection
    set sel_unit[i] = CreateUnitAtLoc( sync_p, 'nshf', GetPlayerStartLocationLoc(sync_p), bj_UNIT_FACING )
    set i = i + 1
  endloop

  // save old selection
  call SyncSelections()
  call GroupEnumUnitsSelected(old_selection, sync_p, null)

  // send the bits by selection
  set i = 0
  loop
    exitwhen i >= selection_num

    // write information
    if GetLocalPlayer() == sync_p then
      set j = 0
      call ClearSelection()
      loop
        exitwhen j >= bits_per_selection
        if source_int[i*bits_per_selection + j] == 0 then
          call SelectUnit(sel_unit[j], false)
        else
          call SelectUnit(sel_unit[j], true)
        endif
        set j = j + 1
      endloop
    endif

    // read information
    call TimerStart(t, 1, false, null)  // prevent wait bug
    loop
      exitwhen TimerGetRemaining(t) <= 0
      call TriggerSleepAction(0.5)
    endloop
    call SyncSelections()
    set j = 0
    loop
      exitwhen j >= bits_per_selection
      if IsUnitSelected(sel_unit[j], sync_p) then
        set target_int[i*bits_per_selection + j] = 1
      else
        set target_int[i*bits_per_selection + j] = 0
      endif
      set j = j + 1
    endloop

    set i = i + 1
  endloop

  // restore selection
  if GetLocalPlayer() == sync_p then
    call ClearSelection()
    loop
      set u = FirstOfGroup(old_selection)
      exitwhen u == null
      call SelectUnit(u, true)
      call GroupRemoveUnit(old_selection, u)
    endloop
  endif
  call SyncSelections()

  // remove units to select
  set i = 0
  loop
    exitwhen i >= bits_per_selection
    call RemoveUnit(sel_unit[i])
    set i = i + 1
  endloop

  // rebuild integer
  set i = bits_number - 1
  set sum = 0
  loop
    exitwhen i < 1
    set sum = 2 * sum + target_int[i]
    set i = i - 1
  endloop
  if target_int[0] != 0 then
    set sum = -sum
  endif

//  call DisplayToPlayer(sync_p, I2S(sum))

  return sum

endfunction

//===========================================================================
// Convert2Player (Converts either text color or id to player)
//===========================================================================
function Convert2Player takes string Comp, boolean all_allowed returns player
  //Required Variables
  local integer j = 0
  local playercolor CColor = ColorPlayer(Comp)  //Gets the player color
  local player theplayer = null

  if Comp == "All" then
    if all_allowed then
	  set theplayer = Player(playercreep)
      //return Player(playercreep)
    else
      call DisplayToTP(all_not_allowed)
      //return null
    endif
	
  elseif (CColor == null) then
   //Makes Sure color was typed Correctly  
    //Makes sure number is 0 or bigger and (11 or 23) or smaller
    if (S2I(Comp) >= 0) and (S2I(Comp) <= (playermax - 1)) then
	  set theplayer = Player(S2I(Comp))
      //return Player(S2I(Comp))
    else
      call DisplayToTP(player_id_mistyped)
      //return null
    endif
  else
  //Compares the color until we get a match then stores that player
  loop
    exitwhen((CColor == GetPlayerColor(Player(j))) or (j > playermax))
    set j = j + 1
    if (j > playermax) then
      call DisplayToTP(color_word_mistyped)
      //return null
    endif
  endloop
	if j <= playermax then
		set theplayer = Player(j)
	endif
  endif

  //Returns player
  return theplayer

endfunction

//===========================================================================
// Colorboard Function (Displays all the Colors on screen)
//===========================================================================
//Required by GetPlayersMatching to select a players playing
function GetPlayersMatchingCode takes nothing returns boolean
    return ( GetPlayerSlotState(GetFilterPlayer()) == PLAYER_SLOT_STATE_PLAYING )
endfunction

//Required by ForForce to add a player name for each player
function ForForceCode takes nothing returns nothing
    call LeaderboardAddItemBJ(GetEnumPlayer(), color_board, GetPlayerName(GetEnumPlayer()), 0 )
    call LeaderboardSetPlayerItemLabelBJ(GetEnumPlayer(), color_board, ColorText(GetEnumPlayer()))
    call LeaderboardSetPlayerItemValueBJ(GetEnumPlayer(), color_board, GetPlayerId(GetEnumPlayer()))
endfunction

//The Main function for Showing the Colorboard
function CreateBoard takes nothing returns nothing
  //Required Variables
  local integer j = 0

  //Creates Colorboard
  set color_board =CreateLeaderboardBJ( GetPlayersAll(), "Colorboard" ) //Creates board
  //Adds all player to Colorboard
  call ForForce( GetPlayersMatching(Condition(function GetPlayersMatchingCode)), function ForForceCode )
  
  //Displays the Colorboard
  call LeaderboardDisplay(color_board, false)

endfunction

function ShowBoard takes nothing returns nothing
  call LeaderboardDisplay(color_board, not IsLeaderboardDisplayed(color_board))
endfunction

//===========================================================================
// Help Function (Displays help on screen)
//===========================================================================
function DisplayHelpToPlayer takes player p, string msg returns nothing
  if msg == "PAUSE" then
    call TriggerSleepAction( 15.00 )
  else
    call DisplayTimedTextToPlayer(p, 0, 0, 15, msg)
  endif
endfunction

function Helpin takes nothing returns nothing
  local player p = GetTriggerPlayer()
#INCLUDETABLE <Languages\CommanderHelp.txt>
  call DisplayHelpToPlayer(p, "%1")
#ENDINCLUDE
endfunction

//===========================================================================
// Zoom
//===========================================================================

function ZoomSet takes nothing returns nothing
  local real Zoom = 0
  set Zoom = S2R(SubStringBJ(GetEventPlayerChatString(), 6, 9))
  if Zoom < 3000 then
    call SetCameraFieldForPlayer( GetTriggerPlayer(), CAMERA_FIELD_ZOFFSET, Zoom, 0 )
  else
    call SetCameraFieldForPlayer( GetTriggerPlayer(), CAMERA_FIELD_ZOFFSET, 3000, 0 )
  endif
endfunction

function InitZoom takes nothing returns nothing
  local integer i = 0
  
  if ZoomSetx == null then
    loop
      exitwhen i >= playermax
      if IsPlayerObserver(Player(i)) then
        call SetCameraFieldForPlayer( Player(i), CAMERA_FIELD_ZOFFSET, 300, 0 )
      endif	
      set i = i + 1
    endloop
    set ZoomSetx = CreateTrigger()
  endif
  set i = 0
  loop
    exitwhen i >= playermax
    call TriggerRegisterPlayerChatEvent( ZoomSetx, Player(i), "-zoom", false )
    set i = i + 1
  endloop
  call TriggerAddAction( ZoomSetx, function ZoomSet )
endfunction

//===========================================================================
// Map Initialization (Runs all stuff needed to be run after map is loaded)
//===========================================================================
function MapInit takes nothing returns nothing

  //Displays the Leaderboard
  call CreateBoard()

  //Display Commander Message
  if false then
#INCLUDETABLE <Languages.txt> #EFR
  elseif language == "%1" then
#INCLUDETABLE <Languages\%1\CommanderStart.txt> #ENC:%4
    call DisplayToAll("|c0000ffff%1|r")
#ENDINCLUDE
#ENDINCLUDE
  endif

endfunction

//===========================================================================
// Tribute Function (Allows computer allies to give you resources)
//===========================================================================
function TributeGold takes player Commander, player Comp, integer res_amount returns nothing
  if res_amount < 0 then
    set res_amount = -res_amount
    if GetPlayerState(Commander, PLAYER_STATE_RESOURCE_GOLD) >= res_amount then
      call SetPlayerState(Comp, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Comp, PLAYER_STATE_RESOURCE_GOLD) + res_amount)
      call SetPlayerState(Commander, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Commander, PLAYER_STATE_RESOURCE_GOLD) - res_amount)
	  call DisplayFromToPlayer(Comp, Commander, I2S(res_amount) + gold_received_thanks)
    //You don't have enough Gold to share
    else
	  call DisplayFromToPlayer(Comp, Commander, you_no_gold)
    endif
  elseif GetPlayerState(Comp, PLAYER_STATE_RESOURCE_GOLD) >= res_amount then
    call SetPlayerState(Comp, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Comp, PLAYER_STATE_RESOURCE_GOLD) - res_amount)
    call SetPlayerState(Commander, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Commander, PLAYER_STATE_RESOURCE_GOLD) + res_amount)
	call DisplayFromToPlayer(Comp, Commander, I2S(res_amount) + tribute_of_gold)
  //I don't have enough Gold to share
  else
	call DisplayFromToPlayer(Comp, Commander, i_no_gold)
  endif
endfunction

function TributeWood takes player Commander, player Comp, integer res_amount returns nothing
  if res_amount < 0 then
    set res_amount = -res_amount
    if GetPlayerState(Commander, PLAYER_STATE_RESOURCE_LUMBER) >= res_amount then
      call SetPlayerState(Comp, PLAYER_STATE_RESOURCE_LUMBER, GetPlayerState(Comp, PLAYER_STATE_RESOURCE_LUMBER) + res_amount)
      call SetPlayerState(Commander, PLAYER_STATE_RESOURCE_LUMBER, GetPlayerState(Commander, PLAYER_STATE_RESOURCE_LUMBER) - res_amount)
	  call DisplayFromToPlayer(Comp, Commander, I2S(res_amount) + lumber_received_thanks)
    //You don't have enough Lumber to share
    else
	  call DisplayFromToPlayer(Comp, Commander, you_no_lumber)
    endif
  elseif GetPlayerState(Comp, PLAYER_STATE_RESOURCE_LUMBER) >= res_amount then
    call SetPlayerState(Comp, PLAYER_STATE_RESOURCE_LUMBER, GetPlayerState(Comp, PLAYER_STATE_RESOURCE_LUMBER) - res_amount)
    call SetPlayerState(Commander, PLAYER_STATE_RESOURCE_LUMBER, GetPlayerState(Commander, PLAYER_STATE_RESOURCE_LUMBER) + res_amount)
	call DisplayFromToPlayer(Comp, Commander, I2S(res_amount) + tribute_of_lumber)
  //I don't have enough Lumber to share
  else
	call DisplayFromToPlayer(Comp, Commander, i_no_lumber)
  endif
endfunction


function TributeGoldFromAll takes player Commander, integer res_amount returns nothing
  local integer i = 0
  loop
    exitwhen i >= playermax
    if IsPlayerAlly(Commander, Player(i)) and GetPlayerController(Player(i)) == MAP_CONTROL_COMPUTER then
      call TributeGold(Commander, Player(i),res_amount)
    endif
    set i = i + 1
  endloop
endfunction

function TributeWoodFromAll takes player Commander, integer res_amount returns nothing
  local integer i = 0
  loop
    exitwhen i >= playermax
    if IsPlayerAlly(Commander,Player(i)) and GetPlayerController(Player(i)) == MAP_CONTROL_COMPUTER then
      call TributeWood(Commander, Player(i),res_amount)
    endif
    set i = i + 1
  endloop
endfunction

function Tribute takes player Commander, player Comp, string LorG, string ResAmount returns nothing
  //Player wants Gold
  if (LorG == "G") or (LorG == "GiveG") or (LorG == "Gold") then
    if LorG == "GiveG" then
      set ResAmount = "-" + ResAmount
    endif
    if Comp == Player(playercreep) then
      call TributeGoldFromAll(Commander, S2I(ResAmount))
    else
      call TributeGold(Commander, Comp, S2I(ResAmount))
    endif
  //Player wants Lumber
  elseif (LorG == "L") or (LorG == "GiveL") or (LorG == "Lumber") then
    if LorG == "GiveL" then
      set ResAmount = "-" + ResAmount
    endif
    if Comp == Player(playercreep) then
      call TributeWoodFromAll(Commander, S2I(ResAmount))
    else
      call TributeWood(Commander, Comp, S2I(ResAmount))
    endif
  //Didn't type L or G
  else
    call DisplayToPlayer(Commander, you_mistyped_tribute)
  endif
endfunction

//===========================================================================
// Execute Command
//===========================================================================
function GetParValue takes integer par returns integer
  local player p = null
  if par == -1 then
    return 0
  elseif par == -30 then
    return SyncInteger(GetTriggerPlayer(), R2I(GetCameraTargetPositionX()))
  elseif par == -31 then
    return SyncInteger(GetTriggerPlayer(), R2I(GetCameraTargetPositionY()))
  elseif par == -40 then
    return GetPlayerId(GetTriggerPlayer())
  elseif par < -100 then
    set p = Convert2Player(parsed_command[-(par + 100)], false)
    if p == null then
      return -1000000
    else
      return GetPlayerId(p)
    endif
  elseif par < 0 then
    return S2I(parsed_command[-par])
  else
    return par
  endif
endfunction

function ExecuteCommand takes player Comp, integer number returns nothing
  local integer cn = GetParValue(command_number[number])
  local integer par1 = GetParValue(command_par1[number])
  local integer par2 = GetParValue(command_par2[number])
  local integer par3 = GetParValue(command_par3[number])
  
  if cn == -1000000 or par1 == -1000000 or par2 == -1000000 or par3 == -1000000 then
    return
  endif

  if command_par2[number] != -1 then  
    call CommandAI(Comp, par2, par3)
  endif
  if command_number[number] != -1 then
    call CommandAI(Comp, cn, par1)
  endif

  call DisplayFromPlayer(Comp, command_msg[number])
endfunction

function ExecuteCommandForAll takes integer number returns nothing
  local integer i = 0
  loop
    exitwhen i >= playermax
    if (IsPlayerAlly(GetTriggerPlayer(),Player(i))) and GetPlayerController(Player(i)) == MAP_CONTROL_COMPUTER then
      call ExecuteCommand(Player(i), number)
    endif
    set i = i + 1
  endloop
endfunction

function GetDlgParValue takes integer par returns integer
  if par == -1 then
    return 0
  elseif par == -30 then
    return SyncInteger(GetTriggerPlayer(), R2I(GetCameraTargetPositionX()))
  elseif par == -31 then
    return SyncInteger(GetTriggerPlayer(), R2I(GetCameraTargetPositionY()))
  elseif par == -40 then
    return GetPlayerId(GetTriggerPlayer())
  elseif par < -100 then
    return current_player_par[GetPlayerId(GetTriggerPlayer())]
  elseif par < 0 then
    return current_number_par[GetPlayerId(GetTriggerPlayer())]
  else
    return par
  endif
endfunction

function ExecuteDlgCommand takes player Comp, integer number returns nothing
  local integer cn = GetDlgParValue(command_number[number])
  local integer par1 = GetDlgParValue(command_par1[number])
  local integer par2 = GetDlgParValue(command_par2[number])
  local integer par3 = GetDlgParValue(command_par3[number])
  local integer i = 0

  if command_par2[number] != -1 then
    call CommandAI(Comp, par2, par3)
  endif

  if command_number[number] == 71 then
	if false then
#INCLUDETABLE <Languages.txt> #EFR
	elseif command_par1[number] == #EVAL{%row-1} then
      set language = "%1"
#ENDINCLUDE
	endif
    call ConditionalTriggerExecute( languagechange_trigger )
  elseif command_number[number] != -1 then
    call CommandAI(Comp, cn, par1)
  endif

  call DisplayFromDlg(command_msg[number])
endfunction

function ExecuteDlgCommandForAll takes integer number returns nothing
  local integer i = 0
  loop
    exitwhen i >= playermax
    if IsPlayerAlly(GetTriggerPlayer(),Player(i)) and GetPlayerController(Player(i)) == MAP_CONTROL_COMPUTER then
      set commanded_player[GetPlayerId(GetTriggerPlayer())] = Player(i)
      call ExecuteDlgCommand(Player(i), number)
    endif
    set i = i + 1
  endloop
endfunction

function ExecuteDialogCommand takes player Comp, integer number returns nothing
  if commanded_player[GetPlayerId(GetTriggerPlayer())] == Player(playercreep) then
    call ExecuteDlgCommandForAll(number)
  else
    call ExecuteDlgCommand(Comp, number)
  endif
endfunction

//===========================================================================
// Find Command
//===========================================================================
function FindCommand takes nothing returns integer
  local integer i = 0
  loop
    exitwhen i >= command_length
    if command_key1[i] == "" or command_key1[i] == parsed_command[2] then
      if command_key2[i] == "" or command_key2[i] == parsed_command[3] then
        exitwhen command_key3[i] == "" or command_key3[i] == parsed_command[4]
      endif
    endif
    set i = i + 1
  endloop

  if i >= command_length then
    return -1
  else
    return i
  endif

endfunction

//===========================================================================
// The Commander
//===========================================================================
function Commander takes nothing returns nothing
  local player Comp = null
  local string ChatMsg = GetEventPlayerChatString()
  local integer cn = 0

  call Parser(ChatMsg)

  if parsed_command[1] == "HELP" then
    call Helpin()
    return
  endif

  if parsed_command[1] == "BOARD" then
    call ShowBoard()
    return
  endif

  set Comp = Convert2Player(parsed_command[1], true)
  if Comp == null then
    call DisplayToTP(specified_player_not_valid)
    return
  elseif Comp != Player(playercreep) then
    if GetPlayerController(Comp) != MAP_CONTROL_COMPUTER then
      call DisplayToTP(not_specified_computer)
	  return
    elseif not IsPlayerAlly(GetTriggerPlayer(), Comp) then
	  call DisplayFromPlayer(Comp, chat_no_ally)
      return
    endif
  endif

  if parsed_command[2] == "TRIBUTE" or parsed_command[2] == "TRIB" then
    call Tribute(GetTriggerPlayer(), Comp, parsed_command[4], parsed_command[3])
    return
  endif

  set cn = FindCommand()

  if cn < 0 then
    call DisplayFromPlayer(Comp, command_not_valid)
    return
  endif

  if Comp == Player(playercreep) then
    call ExecuteCommandForAll(cn)
  else
    call ExecuteCommand(Comp, cn)
  endif

endfunction

function DialogCommander takes nothing returns nothing
  set commanded_player[GetPlayerId(GetTriggerPlayer())] = null
  call DialogSetMessage(start_dialog, dlghdr_choose_ally)
  call DialogDisplay(GetTriggerPlayer(), start_dialog, true)
endfunction

function DialogResponse takes nothing returns nothing
  local button b = GetClickedButton()
  local integer i = 0
  local integer c = 0
  local dialog d = null
  local integer cn = 0
  local string s = ""
  
  loop
    if i >= cdlg_length then
      return
    endif
    exitwhen b == cdlg_button[i]
    set i = i + 1
  endloop

  set d = cdlg_dialog[i]
  set cn = cdlg_number[i]

  if d != null then
    set current_command[GetPlayerId(GetTriggerPlayer())] = cn
    loop
      if d == dlg_dialog[c] then
        if  dlg_string[c] != null then
	      set s = dlg_string[c]
	    endif
	  endif
      set c = c + 1
    exitwhen c >= dlg_length
    endloop
	if d == tribute_type_dlg then
	  call DialogSetMessage(tribute_type_dlg, dlghdr_tribute_type)
	elseif d == player_dialog then
      call DialogSetMessage(player_dialog, dlghdr_choose_player)
	elseif d == number_dialog then
      call DialogSetMessage(number_dialog, dlghdr_choose_number)
	elseif s != "" then
      call DialogSetMessage(d, s)
	endif
    call DialogDisplay(GetTriggerPlayer(), cdlg_dialog[i], true)
    return
  endif

  call ExecuteDialogCommand(commanded_player[GetPlayerId(GetTriggerPlayer())], cn)
endfunction

function StartDialogResponse takes nothing returns nothing
  local integer i = 0
  local button b = GetClickedButton()
  loop
    if i >= sdbn_length then
      return
    endif
    exitwhen sdbn_button[i] == b
    set i = i + 1
  endloop
  if playermax == 12 then
    if i == sdbn_length_one then
      call DialogSetMessage(start_dialog_one, dlghdr_choose_ally)
      call DialogDisplay(GetTriggerPlayer(), start_dialog_one, true)
    elseif i == sdbn_length_two then
      call DialogSetMessage(start_dialog, dlghdr_choose_ally)
  	  call DialogDisplay(GetTriggerPlayer(), start_dialog, true)
    else
      set commanded_player[GetPlayerId(GetTriggerPlayer())] = Player(sdbn_number[i])
      if commanded_player[GetPlayerId(GetTriggerPlayer())] != Player(playercreep) and (not IsPlayerAlly(GetTriggerPlayer(), commanded_player[GetPlayerId(GetTriggerPlayer())])) then
        call DisplayFromDlg(chat_no_ally)
        return
      endif
      call DialogSetMessage(root_dialog, dlghdr_root)
      call DialogDisplay(GetTriggerPlayer(), root_dialog, true)
    endif
  else
    if i == sdbn_length_one then
      call DialogSetMessage(start_dialog_one, dlghdr_choose_ally)
      call DialogDisplay(GetTriggerPlayer(), start_dialog_one, true)
    elseif i == sdbn_length_two then
      call DialogSetMessage(start_dialog, dlghdr_choose_ally)
  	  call DialogDisplay(GetTriggerPlayer(), start_dialog, true)
    elseif i == sdbn_length_three then
      call DialogSetMessage(start_dialog_two, dlghdr_choose_ally)
  	  call DialogDisplay(GetTriggerPlayer(), start_dialog_two, true)
    elseif i == sdbn_length_four then
      call DialogSetMessage(start_dialog_one, dlghdr_choose_ally)
      call DialogDisplay(GetTriggerPlayer(), start_dialog_one, true)
    else
      set commanded_player[GetPlayerId(GetTriggerPlayer())] = Player(sdbn_number[i])
      if commanded_player[GetPlayerId(GetTriggerPlayer())] != Player(playercreep) and (not IsPlayerAlly(GetTriggerPlayer(), commanded_player[GetPlayerId(GetTriggerPlayer())])) then
        call DisplayFromDlg(chat_no_ally)
        return
      endif
      call DialogSetMessage(root_dialog, dlghdr_root)
      call DialogDisplay(GetTriggerPlayer(), root_dialog, true)
    endif
  endif
endfunction

function PlayerDialogResponse takes nothing returns nothing
  local integer i = 0
  local button b = GetClickedButton()
  loop
    if i >= pcbn_length then
      return
    endif
    exitwhen pcbn_button[i] == b
    set i = i + 1
  endloop
  if playermax == 12 then
    if i == 9 then
      call DialogSetMessage(player_dialog_one, dlghdr_choose_player)
      call DialogDisplay(GetTriggerPlayer(), player_dialog_one, true)
    elseif i == 10 then
      call DialogSetMessage(player_dialog, dlghdr_choose_player)
      call DialogDisplay(GetTriggerPlayer(), player_dialog, true)
    else
      if i < 9 then
        set current_player_par[GetPlayerId(GetTriggerPlayer())] = pcbn_number[i]
      elseif i > 10 and i < 19 then
        set current_player_par[GetPlayerId(GetTriggerPlayer())] = pcbn_number[i - 2]
      endif
        call ExecuteDialogCommand(commanded_player[GetPlayerId(GetTriggerPlayer())], current_command[GetPlayerId(GetTriggerPlayer())])
    endif
  else
    if i == 9 then
      call DialogSetMessage(player_dialog_one, dlghdr_choose_player)
      call DialogDisplay(GetTriggerPlayer(), player_dialog_one, true)
    elseif i == 10 then
      call DialogSetMessage(player_dialog, dlghdr_choose_player)
      call DialogDisplay(GetTriggerPlayer(), player_dialog, true)
    elseif i == 19 then
      call DialogSetMessage(player_dialog_two, dlghdr_choose_player)
  	  call DialogDisplay(GetTriggerPlayer(), player_dialog_two, true)
    elseif i == 20 then
      call DialogSetMessage(player_dialog_one, dlghdr_choose_player)
  	  call DialogDisplay(GetTriggerPlayer(), player_dialog_one, true)
    else
      if i < 9 then
        set current_player_par[GetPlayerId(GetTriggerPlayer())] = pcbn_number[i]
      elseif i > 10 and i < 19 then
        set current_player_par[GetPlayerId(GetTriggerPlayer())] = pcbn_number[i - 2]
      elseif i > 20 then
        set current_player_par[GetPlayerId(GetTriggerPlayer())] = pcbn_number[i - 4]
      endif
        call ExecuteDialogCommand(commanded_player[GetPlayerId(GetTriggerPlayer())], current_command[GetPlayerId(GetTriggerPlayer())])
    endif
  endif
endfunction

function NumberDialogResponse takes nothing returns nothing
  local integer i = 0
  local button b = GetClickedButton()
  loop
    if i >= ndbn_length then
      return
    endif
    exitwhen ndbn_button[i] == b
    set i = i + 1
  endloop
  if i == 8 then
    call DialogSetMessage(number_dialog_one, dlghdr_choose_number)
	call DialogDisplay(GetTriggerPlayer(), number_dialog_one, true)
  elseif i == 9 then
    call DialogSetMessage(number_dialog, dlghdr_choose_number)
  	call DialogDisplay(GetTriggerPlayer(), number_dialog, true)
  elseif i == 18 then
    call DialogSetMessage(number_dialog_two, dlghdr_choose_number)
  	call DialogDisplay(GetTriggerPlayer(), number_dialog_two, true)
  elseif i == 19 then
    call DialogSetMessage(number_dialog_one, dlghdr_choose_number)
	call DialogDisplay(GetTriggerPlayer(), number_dialog_one, true)
  else
    if i < 8 then
      set current_number_par[GetPlayerId(GetTriggerPlayer())] =i
    elseif i > 9 and i < 18 then
      set current_number_par[GetPlayerId(GetTriggerPlayer())] =(i - 2)
    elseif i > 19 then
      set current_number_par[GetPlayerId(GetTriggerPlayer())] =(i - 4)
    endif
    call ExecuteDialogCommand(commanded_player[GetPlayerId(GetTriggerPlayer())], current_command[GetPlayerId(GetTriggerPlayer())])
  endif
endfunction

function TributeDialogResponse takes nothing returns nothing
  local button b = GetClickedButton()
  local integer pid = GetPlayerId(GetTriggerPlayer())
  if b == tribute_g then
    set tribute_type[pid] = "G"
  elseif b == tribute_l then
    set tribute_type[pid] = "L"
  elseif b == tribute_give_g then
    set tribute_type[pid] = "GiveG"
  elseif b == tribute_give_l then
    set tribute_type[pid] = "GiveL"
  else
    return
  endif
  call DialogSetMessage(tribute_dlg, dlghdr_tribute_amount)
  call DialogDisplay(GetTriggerPlayer(), tribute_dlg, true)
endfunction

function TributeAmountDialogResponse takes nothing returns nothing
  local integer i = 0
  local button b = GetClickedButton()
  local string tribute_amount = null
  local integer pid = GetPlayerId(GetTriggerPlayer())
  loop
    if i >= tribute_dlg_length then
      return
    endif
    exitwhen tribute_dlg_button[i] == b
    set i = i + 1
  endloop
  set tribute_amount = I2S((i+1) * 100)
  call Tribute(GetTriggerPlayer(), commanded_player[pid], tribute_type[pid], tribute_amount)
endfunction

function Translation takes string s returns string
  if HaveSavedString(translation, StringHash(language), StringHash(s)) then
    return LoadStr(translation, StringHash(language), StringHash(s))
  else
    return s
  endif
endfunction

function RegisterCommand takes string c_key1, string c_key2, string c_key3, integer c_number, integer c_par1, integer c_par2, integer c_par3, string c_dlg1, integer c_hk1, string c_dlg2, integer c_hk2, string c_dlg3, integer c_hk3, string c_msg returns nothing
  set command_key1[command_length] = StringCase(c_key1, true)
  set command_key2[command_length] = StringCase(c_key2, true)
  set command_key3[command_length] = StringCase(c_key3, true)
  set command_number[command_length] = c_number
  set command_par1[command_length] = c_par1
  set command_par2[command_length] = c_par2
  set command_par3[command_length] = c_par3
  set command_dlg1[command_length] = Translation(c_dlg1)
  set command_hotkey1[command_length] = c_hk1
  set command_dlg2[command_length] = Translation(c_dlg2)
  set command_hotkey2[command_length] = c_hk2
  set command_dlg3[command_length] = Translation(c_dlg3)
  set command_hotkey3[command_length] = c_hk3
  set command_msg[command_length] = Translation(c_msg)
  set command_length = command_length + 1
endfunction

function RegisterCommands takes nothing returns nothing
#INCLUDETABLE <Commands.txt> #EFR
  call RegisterCommand("%1", "%2", "%3", %4, %5, %6, %7, "%8", %9, "%10", %11, "%12", %13, "%14")
#ENDINCLUDE
#INCLUDETABLE <Languages.txt> #EFR
  call RegisterCommand("LANGUAGE", "%1", "", 71, #EVAL{%row-1}, -1, -1, "AI Setting", 0, "Language", 76, "%1", %3, "%2")
#ENDINCLUDE
endfunction

function AddCancelButton takes dialog d returns nothing
  call DialogAddButton(d, dlgbutton_cancel, 512)
endfunction

function RegisterCDialogButton takes button b, integer cn, dialog d returns nothing
  set cdlg_button[cdlg_length] = b
  set cdlg_number[cdlg_length] = cn
  set cdlg_dialog[cdlg_length] = d
  set cdlg_length = cdlg_length + 1
endfunction

function RegisterDialog takes string s returns dialog
  local dialog d = DialogCreate()
  local trigger t = CreateTrigger()
  if s == "" then
    call DialogSetMessage(d, dlghdr_root)
  else
    call DialogSetMessage(d, s)
  endif
  set dlg_dialog[dlg_length] = d
  set dlg_string[dlg_length] = s
  set dlg_length  = dlg_length + 1
  call TriggerRegisterDialogEvent(t, d)
  call TriggerAddAction(t, function DialogResponse)
  return d
endfunction

function FindDialog takes string s returns dialog
  local integer i = 0
  loop
    exitwhen i >= dlg_length
    if dlg_string[i] == s then
      return dlg_dialog[i]
    endif
    set i = i + 1
  endloop
  return null
endfunction

function BuildStartDialog takes nothing returns nothing
  local trigger t = CreateTrigger()
  local integer i = 0
  set start_dialog = DialogCreate()
  call DialogSetMessage(start_dialog, dlghdr_choose_ally)
  set sdbn_button[0] = DialogAddButton(start_dialog, dlgbutton_all, 65)
  set sdbn_number[0] = playercreep
  set sdbn_length = sdbn_length + 1
  loop
    exitwhen i > 7
    if GetPlayerController(Player(i)) == MAP_CONTROL_COMPUTER and GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING then
      set sdbn_button[sdbn_length] = DialogAddButton(start_dialog, cs2s(GetPlayerName(Player(i)), GetPlayerColor(Player(i))), IMinBJ(48 + i, 57))
      set sdbn_number[sdbn_length] = i
      set sdbn_length = sdbn_length + 1
    endif
    set i = i + 1
  endloop
  set sdbn_length_one = sdbn_length
  if GetPlayerController(Player(i)) == MAP_CONTROL_COMPUTER and GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING then
    set sdbn_button[sdbn_length] = DialogAddButton(start_dialog, dlgbutton_next_page, IMinBJ(48 + 9, 57))
  endif
  call AddCancelButton(start_dialog)
  call TriggerRegisterDialogEvent(t, start_dialog )
  call TriggerAddAction(t, function StartDialogResponse)
endfunction


function BuildStartDialogOne takes nothing returns nothing
  local trigger t = CreateTrigger()
  local integer b = 0
  local integer c = 2
  local integer i = sdbn_number[sdbn_length_one - 1] + 1
  set sdbn_length = sdbn_length + 1
  set start_dialog_one = DialogCreate()
  call DialogSetMessage(start_dialog_one, dlghdr_choose_ally)
  set sdbn_button[sdbn_length] = DialogAddButton(start_dialog_one, dlgbutton_previous_page, IMinBJ(48 , 57))
  set sdbn_length_two  = sdbn_length
  set sdbn_length = sdbn_length + 1
  if playermax != 12 then
    set c = 8
  endif
  loop
    exitwhen i > sdbn_number[sdbn_length_one - 1] + c
    if GetPlayerController(Player(i)) == MAP_CONTROL_COMPUTER and GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING then
      set sdbn_button[sdbn_length] = DialogAddButton(start_dialog_one, cs2s(GetPlayerName(Player(i)), GetPlayerColor(Player(i))), IMinBJ(48 + b, 57))
      set sdbn_number[sdbn_length] = i
      set sdbn_length = sdbn_length + 1
    endif
    set i = i + 1
	set b = b + 1
  endloop
  set sdbn_length_three = sdbn_length
  if c == 8 then
    if GetPlayerController(Player(i)) == MAP_CONTROL_COMPUTER and GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING then
      set sdbn_button[sdbn_length] = DialogAddButton(start_dialog_one, dlgbutton_next_page, IMinBJ(48 + b, 57))
    endif
  endif
  call AddCancelButton(start_dialog_one)
  call TriggerRegisterDialogEvent(t, start_dialog_one )
  call TriggerAddAction(t, function StartDialogResponse)
endfunction

function BuildStartDialogTwo takes nothing returns nothing
  local trigger t = CreateTrigger()
  local integer b = 0
  local integer i = sdbn_number[sdbn_length_three - 1] + 1
  set sdbn_length = sdbn_length + 1
  set start_dialog_two = DialogCreate()
  call DialogSetMessage(start_dialog_two, dlghdr_choose_ally)
  set sdbn_button[sdbn_length] = DialogAddButton(start_dialog_two, dlgbutton_previous_page, IMinBJ(48 , 57))
  set sdbn_length_four = sdbn_length
  set sdbn_length = sdbn_length + 1
  loop
    exitwhen i > sdbn_number[sdbn_length_three - 1] + 8
    if GetPlayerController(Player(i)) == MAP_CONTROL_COMPUTER and GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING then
      set sdbn_button[sdbn_length] = DialogAddButton(start_dialog_two, cs2s(GetPlayerName(Player(i)), GetPlayerColor(Player(i))), IMinBJ(48 + b, 57))
      set sdbn_number[sdbn_length] = i
      set sdbn_length = sdbn_length + 1
    endif
    set i = i + 1
    set b = b + 1
  endloop
  call AddCancelButton(start_dialog_two)
  call TriggerRegisterDialogEvent(t, start_dialog_two )
  call TriggerAddAction(t, function StartDialogResponse)
endfunction

function BuildNumberDialog takes nothing returns nothing
  local trigger t = CreateTrigger()
  local integer i = 0
  set number_dialog = DialogCreate()
  call DialogSetMessage(number_dialog, dlghdr_choose_number)
  loop
    exitwhen i >= 8
    set ndbn_button[ndbn_length] = DialogAddButton(number_dialog, I2S(i), IMinBJ(48 + i, 57))
    set ndbn_length = ndbn_length + 1
    set i = i + 1
  endloop
  set ndbn_button[8] = DialogAddButton(number_dialog, dlgbutton_next_page, IMinBJ(48 + 9, 57))
  call AddCancelButton(number_dialog)
  call TriggerRegisterDialogEvent(t, number_dialog )
  call TriggerAddAction(t, function NumberDialogResponse)
endfunction


function BuildNumberDialogOne takes nothing returns nothing
  local trigger t = CreateTrigger()
  local integer i = 10
  set ndbn_length = i
  set number_dialog_one = DialogCreate()
  call DialogSetMessage(number_dialog_one, dlghdr_choose_number)
  set ndbn_button[9] = DialogAddButton(number_dialog_one, dlgbutton_previous_page, IMinBJ(48 , 57))
  loop
    exitwhen i >= 18
    set ndbn_button[ndbn_length] = DialogAddButton(number_dialog_one, I2S(i - 2), IMinBJ(48 + i - 9, 57))
    set ndbn_length = ndbn_length + 1
    set i = i + 1
  endloop
  
  set ndbn_button[18] = DialogAddButton(number_dialog_one, dlgbutton_next_page, IMinBJ(48 + i - 9, 57))
  call AddCancelButton(number_dialog_one)
  call TriggerRegisterDialogEvent(t, number_dialog_one )
  call TriggerAddAction(t, function NumberDialogResponse)
endfunction

function BuildNumberDialogTwo takes nothing returns nothing
  local trigger t = CreateTrigger()
  local integer i = 20
  set ndbn_length = i
  set number_dialog_two = DialogCreate()
  call DialogSetMessage(number_dialog_two, dlghdr_choose_number)
  set ndbn_button[19] = DialogAddButton(number_dialog_two, dlgbutton_previous_page, IMinBJ(48 , 57))
  loop
    exitwhen i >= 29
    set ndbn_button[ndbn_length] = DialogAddButton(number_dialog_two, I2S(i - 4), IMinBJ(48 + i - 19, 57))
    set ndbn_length = ndbn_length + 1
    set i = i + 1
  endloop
  call AddCancelButton(number_dialog_two)
  call TriggerRegisterDialogEvent(t, number_dialog_two )
  call TriggerAddAction(t, function NumberDialogResponse)
endfunction

function BuildPlayerDialog takes nothing returns nothing
  local trigger t = CreateTrigger()
  local integer i = 0
  set player_dialog = DialogCreate()
  call DialogSetMessage(player_dialog, dlghdr_choose_player)
  loop
    exitwhen i > 8
    if not IsPlayerObserver(Player(i)) and GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING then
      set pcbn_button[pcbn_length] = DialogAddButton(player_dialog, cs2s(GetPlayerName(Player(i)), GetPlayerColor(Player(i))), IMinBJ(48 + i, 57))
      set pcbn_number[pcbn_length] = i
      set pcbn_length = pcbn_length + 1
    endif
    set i = i + 1
  endloop
  if not IsPlayerObserver(Player(i)) and GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING then
    set pcbn_button[9] = DialogAddButton(player_dialog, dlgbutton_next_page, IMinBJ(48 + 9, 57))
  endif
  call AddCancelButton(player_dialog)
  call TriggerRegisterDialogEvent(t, player_dialog )
  call TriggerAddAction(t, function PlayerDialogResponse)
endfunction

function BuildPlayerDialogOne takes nothing returns nothing
  local trigger t = CreateTrigger()
  local integer i = 11
  local integer c = 13
  if playermax != 12 then
    set c = 18
  endif
  set pcbn_length = i
  set player_dialog_one = DialogCreate()
  call DialogSetMessage(player_dialog_one, dlghdr_choose_player)
  set pcbn_button[10] = DialogAddButton(player_dialog_one, dlgbutton_previous_page, IMinBJ(48, 57))
  loop
    exitwhen i > c
    if not IsPlayerObserver(Player(i - 2)) and GetPlayerSlotState(Player(i - 2)) == PLAYER_SLOT_STATE_PLAYING and GetPlayerController(Player(i - 2)) != MAP_CONTROL_CREEP and GetPlayerController(Player(i - 2)) != MAP_CONTROL_NEUTRAL and GetPlayerController(Player(i - 2)) != MAP_CONTROL_RESCUABLE then
      set pcbn_button[pcbn_length] = DialogAddButton(player_dialog_one, cs2s(GetPlayerName(Player(i - 2)), GetPlayerColor(Player(i - 2))), IMinBJ(48 + i - 10, 57))
      set pcbn_number[pcbn_length] = i - 2
      set pcbn_length = pcbn_length + 1
    endif
    set i = i + 1
  endloop
  if playermax != 12 then
    if not IsPlayerObserver(Player(i - 2)) and GetPlayerSlotState(Player(i - 2)) == PLAYER_SLOT_STATE_PLAYING then
      set pcbn_button[19] = DialogAddButton(player_dialog_one, dlgbutton_next_page, IMinBJ(48 + 9, 57))
    endif
  endif
  call AddCancelButton(player_dialog_one)
  call TriggerRegisterDialogEvent(t, player_dialog_one )
  call TriggerAddAction(t, function PlayerDialogResponse)
endfunction

function BuildPlayerDialogTwo takes nothing returns nothing
  local trigger t = CreateTrigger()
  local integer i = 21
  set pcbn_length = i
  set player_dialog_two = DialogCreate()
  call DialogSetMessage(player_dialog_two, dlghdr_choose_player)
  set pcbn_button[20] = DialogAddButton(player_dialog_two, dlgbutton_previous_page, IMinBJ(48, 57))
  loop
    exitwhen i > 27
    if not IsPlayerObserver(Player(i - 4)) and GetPlayerSlotState(Player(i - 4)) == PLAYER_SLOT_STATE_PLAYING and GetPlayerController(Player(i - 4)) != MAP_CONTROL_CREEP and GetPlayerController(Player(i - 4)) != MAP_CONTROL_NEUTRAL and GetPlayerController(Player(i - 4)) != MAP_CONTROL_RESCUABLE then
      set pcbn_button[pcbn_length] = DialogAddButton(player_dialog_two, cs2s(GetPlayerName(Player(i - 4)), GetPlayerColor(Player(i - 4))), IMinBJ(48 + i - 20, 57))
      set pcbn_number[pcbn_length] = i - 4
      set pcbn_length = pcbn_length + 1
    endif
    set i = i + 1
  endloop
  call AddCancelButton(player_dialog_two)
  call TriggerRegisterDialogEvent(t, player_dialog_two )
  call TriggerAddAction(t, function PlayerDialogResponse)
endfunction

function AddCommandDialog takes integer i returns nothing
  local dialog current_dialog = null
  local dialog next_dialog = null
  local string current_name = ""

  if command_dlg3[i] != "" then
    if command_dlg3[i] == "#" then
      set next_dialog = number_dialog
    elseif command_dlg3[i] == "e" then
      set next_dialog = player_dialog
    else
      set current_name = command_dlg1[i]+" "+command_dlg2[i]
      set current_dialog = FindDialog(current_name)
      if current_dialog != null then
        call RegisterCDialogButton(DialogAddButton(current_dialog, command_dlg3[i], command_hotkey3[i]), i, next_dialog)
        return
      endif
      set current_dialog = RegisterDialog(current_name)
      call RegisterCDialogButton(DialogAddButton(current_dialog, command_dlg3[i], command_hotkey3[i]), i, next_dialog)
      set next_dialog = current_dialog
    endif
  endif

  if command_dlg2[i] != "" then
    if command_dlg2[i] == "#" then
      set next_dialog = number_dialog
    elseif command_dlg2[i] == "e" then
      set next_dialog = player_dialog
    else
      set current_name = command_dlg1[i]
      set current_dialog = FindDialog(current_name)
      if current_dialog != null then
        call RegisterCDialogButton(DialogAddButton(current_dialog, command_dlg2[i], command_hotkey2[i]), i, next_dialog)
        return
      endif
      set current_dialog = RegisterDialog(current_name)
      call RegisterCDialogButton(DialogAddButton(current_dialog, command_dlg2[i], command_hotkey2[i]), i, next_dialog)
      set next_dialog = current_dialog
    endif
  endif

  if command_dlg1[i] != "" then
    set current_name = ""
    set current_dialog = FindDialog(current_name)
    if current_dialog != null then
      call RegisterCDialogButton(DialogAddButton(current_dialog, command_dlg1[i], command_hotkey1[i]), i, next_dialog)
      return
    endif
    set current_dialog = RegisterDialog(current_name)
    call RegisterCDialogButton(DialogAddButton(current_dialog, command_dlg1[i], command_hotkey1[i]), i, next_dialog)
  endif
endfunction

function AddCDCancelButtons takes nothing returns nothing
  local integer i = 0
  loop
    exitwhen i >= dlg_length
    call AddCancelButton(dlg_dialog[i])
    set i = i + 1
  endloop
endfunction

function BuildCommandDialogs takes nothing returns nothing
  local integer i = 0
  loop
    exitwhen i >=command_length
    call AddCommandDialog(i)
    set i = i + 1
  endloop
  set root_dialog = FindDialog("")
endfunction

function BuildTributeDialogs takes nothing returns nothing
  local trigger t = CreateTrigger()
  local integer i = 0
  set tribute_type_dlg = DialogCreate()
  call DialogSetMessage(tribute_type_dlg, dlghdr_tribute_type)
  set tribute_g = DialogAddButton(tribute_type_dlg, dlgbutton_gold, 71)
  set tribute_l = DialogAddButton(tribute_type_dlg, dlgbutton_lumber, 76)
  set tribute_give_g = DialogAddButton(tribute_type_dlg, dlgbutton_give_gold, 79)
  set tribute_give_l = DialogAddButton(tribute_type_dlg, dlgbutton_give_lumber, 85)
  call AddCancelButton(tribute_type_dlg)
  call TriggerRegisterDialogEvent(t, tribute_type_dlg)
  call TriggerAddAction(t, function TributeDialogResponse)
  call RegisterCDialogButton(DialogAddButton(root_dialog, dlgbutton_tribute, 84), 0, tribute_type_dlg)
  
  set tribute_dlg = DialogCreate()
  call DialogSetMessage(tribute_dlg, dlghdr_tribute_amount)
  loop
    exitwhen i >= 10
    set tribute_dlg_button[i] = DialogAddButton(tribute_dlg, I2S(100 * (i+1)), IMinBJ(48 + i, 57))
    set i = i + 1
  endloop
  call AddCancelButton(tribute_dlg)
  set tribute_dlg_length = i
  set t = CreateTrigger()
  call TriggerRegisterDialogEvent(t, tribute_dlg)
  call TriggerAddAction(t, function TributeAmountDialogResponse)
endfunction

function BuildDialogs takes nothing returns nothing
  call BuildStartDialog()
  call BuildStartDialogOne()
  if playermax != 12 then
    call BuildStartDialogTwo()
  endif
  call BuildNumberDialog()
  call BuildNumberDialogOne()
  call BuildNumberDialogTwo()
  call BuildPlayerDialog()
  call BuildPlayerDialogOne()
  if playermax != 12 then
    call BuildPlayerDialogTwo()
  endif
  call BuildCommandDialogs()
  call BuildTributeDialogs()
  call AddCDCancelButtons()
endfunction

function InitCommanderPart takes nothing returns nothing
  local integer i = 0
  local trigger commander_trigger = CreateTrigger()
  local trigger cdlg_trigger = CreateTrigger()
  //local timer t = CreateTimer()

  loop
    exitwhen i >= playermax
    call TriggerRegisterPlayerChatEvent( commander_trigger, Player(i), command_prefix, false )
    call TriggerRegisterPlayerEvent( cdlg_trigger, Player(i), EVENT_PLAYER_END_CINEMATIC )
    set i = i + 1
  endloop

  call TriggerAddAction( commander_trigger, function Commander )
  call TriggerAddAction( cdlg_trigger, function DialogCommander )
  set command_length = 0
  set dlg_length = 0
  call RegisterCommands()
  call BuildDialogs()

  //Timer that calls MapInit
  //call TimerStart(t,3.0, false, function MapInit)
endfunction

function SendToAllAIs takes integer cmd, integer data returns nothing
  local integer i = 0
  loop
    exitwhen i > (playermax - 1)
    if GetPlayerController(Player(i)) == MAP_CONTROL_COMPUTER then
      call CommandAI(Player(i), cmd, data)
    endif
    set i = i + 1
  endloop
endfunction

function GetNextHuman takes integer last returns integer
  local integer i = last + 1
  loop
    exitwhen i  > (playermax - 1)
    if GetPlayerController(Player(i)) == MAP_CONTROL_USER and not IsPlayerObserver(Player(i)) and GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING then
      return i
    endif
    set i = i + 1
  endloop
  set i = last + 1
  loop
    exitwhen i  > (playermax - 1)
    if IsPlayerObserver(Player(i)) then
      return i
    endif
    set i = i + 1
  endloop
  return -1
endfunction

function GetFirstHuman takes nothing returns integer
  return GetNextHuman(-1)
endfunction

function CheckAllyToControl takes player p returns boolean
  local integer q = 0
  loop
    exitwhen q > (playermax - 1)
    if IsPlayerAlly(Player(q), p) and GetPlayerController(Player(q)) == MAP_CONTROL_COMPUTER then
      return true
    endif
    set q = q + 1
  endloop
  return false
endfunction

function EnumKillUnit takes nothing returns nothing
  call KillUnit(GetEnumUnit())
endfunction

function RemoveHumanUnitsAndRes takes nothing returns nothing
  local player p = GetEnumPlayer()
  local group g = null
  if GetPlayerController(p) != MAP_CONTROL_USER then
    return
  endif
  set g = CreateGroup()
  call GroupEnumUnitsOfPlayer(g, p, null)
  call ForGroup(g, function EnumKillUnit)
  call SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, 0)
  call SetPlayerState(p, PLAYER_STATE_RESOURCE_LUMBER, 0)
endfunction

function GameStartDlgResponse takes nothing returns nothing
  local timer t = CreateTimer()
  local button cb = GetClickedButton()
  if cb == commander_mode then
    set game_mode = "commander"
  elseif cb == no_human_mode then
    set game_mode = "no_human"
  elseif cb == ai_only_mode then
    set game_mode = "ai_only"
  endif
  if cb != ai_only_mode then
    call InitCommanderPart()
    if cb == no_human_mode then
      call ForForce(GetPlayersAll(), function RemoveHumanUnitsAndRes)
      call SendToAllAIs(53,0)
    endif
  endif
  call DialogDestroy(game_start_dialog)
  call DestroyTrigger(game_start_trigger)
  //Timer that calls MapInit
  call TimerStart(t,3.0, false, function MapInit)
endfunction

function GameStartDefault takes nothing returns nothing
  local timer t = CreateTimer()
  if game_mode != "ai_only" then
    call InitCommanderPart()
    if game_mode == "no_human" then
      call ForForce(GetPlayersAll(), function RemoveHumanUnitsAndRes)
      call SendToAllAIs(53,0)
    endif
  endif
  //Timer that calls MapInit
  call TimerStart(t,3.0, false, function MapInit)
endfunction

function GameStartDlg takes nothing returns nothing
  local integer host = GetFirstHuman()
  local integer p = host
  local timer t = CreateTimer()
  loop
    if p == -1 or IsPlayerObserver(Player(p)) then
      //Timer that calls MapInit
      call TimerStart(t,3.0, false, function MapInit)
      return
    endif
    exitwhen CheckAllyToControl(Player(p))
    set p = GetNextHuman(p)
  endloop
  if game_mode != "" then
    call GameStartDefault()
    return
  endif
  set game_start_dialog = DialogCreate()
  call DialogSetMessage(game_start_dialog, dlghdr_game_type)
  set commander_mode = DialogAddButton(game_start_dialog, dlgbutton_commander, 67)
  set no_human_mode = DialogAddButton(game_start_dialog, dlgbutton_no_human, 79)
  set ai_only_mode = DialogAddButton(game_start_dialog, dlgbutton_ai_only, 78)

  set game_start_trigger = CreateTrigger()
  call TriggerRegisterDialogEvent(game_start_trigger, game_start_dialog)
  call TriggerAddAction(game_start_trigger, function GameStartDlgResponse)

  call DialogDisplay(Player(host), game_start_dialog, true)
endfunction

#INCLUDETABLE <Languages.txt> #EFR
function initLanguage%1 takes nothing returns nothing
#INCLUDETABLE <Languages\%1\Commander.txt> #ENC:%4 #EFR
  set %1 = "%2"
#ENDINCLUDE
#INCLUDETABLE <Languages\%1\CommandsTrans.txt> #ENC:%4 #EFR
  call SaveStr(translation, StringHash(language), StringHash("%1"), "%2")
#ENDINCLUDE
endfunction
#ENDINCLUDE

function LanguageDlgResponse takes nothing returns nothing
  local button b = GetClickedButton()
  if false then
#INCLUDETABLE <Languages.txt> #EFR
  elseif b == %1_button then
    set language = "%1"
    call SendToAllAIs(71,#EVAL{%row-1})
    call initLanguage%1()
#ENDINCLUDE
  endif
  call PauseAllUnitsBJ(false)
  call GameStartDlg()
endfunction

function LanguageDefault takes nothing returns nothing
  if false then
#INCLUDETABLE <Languages.txt> #EFR
  elseif language == "%1" then
    call SendToAllAIs(71,#EVAL{%row-1})
    call initLanguage%1()
#ENDINCLUDE
  endif
  if game_mode != "ai_only" then
    call PauseAllUnitsBJ(false)
    call GameStartDlg()
  endif
endfunction

function LanguageDlg takes nothing returns nothing
  local integer host = GetFirstHuman()

  // Need to pause computer ai and players
  call PauseAllUnitsBJ(true)
  if language != "" or host == -1 then
    //call DisplayToAll("|c0000ffffCMD：|r  -zoom1500")
    call LanguageDefault()
    return
  endif
  set language_dialog = DialogCreate()
  call DialogSetMessage(language_dialog, "Choose Language")
#INCLUDETABLE <Languages.txt> #EFR
  set %1_button = DialogAddButton(language_dialog, "%1", %3)
#ENDINCLUDE
  set language_trigger = CreateTrigger()
  call TriggerRegisterDialogEvent(language_trigger, language_dialog)
  call TriggerAddAction(language_trigger, function LanguageDlgResponse)
  set languagechange_trigger = CreateTrigger()
  call TriggerAddAction( languagechange_trigger, function LanguageDefault )

  call DialogDisplay(Player(host), language_dialog, true)
endfunction

function InitCommander takes nothing returns nothing
  local timer t = CreateTimer()
  call TimerStart(t,1, false, function LanguageDlg)
endfunction

#INCLUDE <Blizzard3.j>
    call InitCommander()
    call InitZoom()
#INCLUDE <Blizzard4.j>