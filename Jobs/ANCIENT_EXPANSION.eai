#IFDEF GLOBAL
    integer ancient_exp_state = 0
    location ancient_exp_loc = null
    location ancient_exp_tree = Location(0, 0)
    unit ancient_exp_wisp = null
    unit ancient_exp_unit = null
    unit ancient_exp_mine = null
    unit ancient_exp_creep = null
    group ancient_exp_group = CreateGroup()
    boolean ancient_attack_running = false
    integer anc_retry = 0

#ELSE

function TreeAvoid takes nothing returns nothing
  local group g = null
  local unit u = null
  set g = CopyGroup(ancient_exp_group, g)  //  Prevent blocking ancient_exp_unit
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if UnitAlive(u) then
      call IssuePointOrder(u, "move", GetLocationX(ancient_exp_tree) + ISign() * GetRandomInt(700, 1000), GetLocationY(ancient_exp_tree) + ISign() * GetRandomInt(-1000, -700))
    endif
    call GroupRemoveUnit(g, u)
  endloop
  call DestroyGroup(g)
  set g = null
endfunction

function TreeGoSitu takes nothing returns nothing
  local unit u = null
  loop
    set u = FirstOfGroup(ancient_exp_group)  // just run once
    exitwhen u == null
    if UnitAlive(u) then
      if DistanceBetweenPoints_dk(GetUnitLoc(u), ancient_exp_tree) > 1000 then
        call IssuePointOrder(u, "move", GetLocationX(ancient_exp_tree) + ISign() * GetRandomInt(400, 1000), GetLocationY(ancient_exp_tree) + ISign() * GetRandomInt(-1000, -400))
      else
        call IssuePointOrder(u, "root", GetUnitX(u), GetUnitY(u))
        call TQAddUnitJob(10, RESET_ANCIENT, -1, u)
      endif
    endif
    call GroupRemoveUnit(ancient_exp_group, u)
  endloop
endfunction

function AncientExpansionReset takes nothing returns nothing
  set ancient_exp_state = 0
  set anc_retry = 0
  if ancient_exp_unit != null and UnitAlive(ancient_exp_unit) then
    call TreeGoSitu()
    call IssuePointOrder(ancient_exp_unit, "root", GetUnitX(ancient_exp_unit), GetUnitY(ancient_exp_unit))
    call TQAddUnitJob(10, RESET_ANCIENT, -1, ancient_exp_unit)
    //call RecycleGuardPosition(ancient_exp_unit)
  endif
  if ancient_exp_wisp != null and UnitAlive(ancient_exp_wisp) then
    call IssuePointOrder(ancient_exp_wisp, "move", GetLocationX(home_location), GetLocationY(home_location))
    //call RecycleGuardPosition(ancient_exp_wisp)
  endif
  call RemoveLocation(ancient_exp_loc)
  set ancient_exp_loc = null
  set ancient_exp_unit = null
  set ancient_exp_wisp = null
  set ancient_exp_creep = null
  set ancient_exp_mine = null
  set not_taken_expansion = null
  set ancient_expanding = false
  set ancient_attack_running = false
endfunction

function GetAncient takes nothing returns nothing
  local unit u = null
  local unit tempu = null
  local unit tree = null
  local location l = null
  local location loc = GetUnitLoc(ancient_exp_mine)
  local group g = CreateGroup()
  local real dmax = 10000000
  local real d = 0
  call GroupEnumUnitsOfPlayer(g, ai_player, null)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if IsUnitType(u, UNIT_TYPE_TOWNHALL) and UnitAlive(u) and not IsUnitHidden(u) then
      set l = GetUnitLoc(u)
      set tempu = GetOneOfIdNearLoc(tempu, ai_player, old_id[race_manual_loading_mine], l, 850)
      if tempu == null or GetResourceAmount(tempu) <= 0 then  // Prevent unroot trees have mines
        set d = DistanceBetweenPoints(l, loc)
        if d < dmax then
          set dmax = d
          set tree = u
        endif
      endif
      call RemoveLocation(l)
    endif
    call GroupRemoveUnit(g, u)
  endloop
  set ancient_exp_unit = tree
  call CreateDebugTag("Expansion State 1: get expansion tree", 10, ancient_exp_unit, 3.00, 1.50)
  call DestroyGroup(g)
  set g = null
  call RemoveLocation(loc)
  set loc = null
  set l = null
  set tempu = null
  set tree = null
endfunction

function BuildAncient takes nothing returns nothing
  local unit u = null
  local real x = 0
  local real y = 0
  if ancient_exp_loc == null then
    set u = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[racial_expansion], GetUnitX(ancient_exp_mine), GetUnitY(ancient_exp_mine), 270.0)
    set x = GetUnitX(u)
    set y = GetUnitY(u)
    call RemoveUnit(u)
    set u = null
  else
    set x = GetLocationX(ancient_exp_loc)
    set y = GetLocationY(ancient_exp_loc)
  endif
  if DistanceBetweenPoints_dd(GetUnitLoc(ancient_exp_mine), Location(x, y)) <= race_max_expa_mine_distance then
    call IssuePointOrderById(ancient_exp_wisp, old_id[racial_expansion], x, y)
    call CreateDebugTag("Expansion State 4 - Ancient build", 10, ancient_exp_wisp, 3.00, 1.50)
  endif
endfunction

function GetAncientCampStrength takes nothing returns real
  if ancient_exp_creep != null and UnitAlive(ancient_exp_creep) then
    // Sum creeps and any enemy structures
    return GetLocationEnemyStrength(GetUnitX(ancient_exp_creep), GetUnitY(ancient_exp_creep), creep_battle_radius, true)
  else
    return GetLocationEnemyStrength(GetUnitX(ancient_exp_mine), GetUnitY(ancient_exp_mine), expansion_radius, true)
  endif
endfunction

function AncientExpansionJob takes nothing returns nothing
local group g = null
local unit u = null
local integer i = 0
local boolean b = false
call DisplayToAllJobDebug("ANCIENT_EXPANSION JOB STARTED")

if ancient_exp_mine == null or not UnitAlive(ancient_exp_mine) or ancient_exp_mine != not_taken_expansion or (ancient_exp_unit != null and GetUnitState(ancient_exp_unit, UNIT_STATE_LIFE) < 1) or (ancient_exp_unit == null and (ancient_exp_state == 2 or ancient_exp_state == 3)) then
  call AncientExpansionReset()
  set gold_buffer = 0
  set wood_buffer = 0
  call Trace("Ancient Expansion state : no mine or tree die , cannot expansion")
  return
endif

set exp_time_count = ai_time
if ancient_exp_state == 0 then
  call TraceAll("Ancient Exp 0: Await Build Order")  // Waiting for build code to trigger
  set i = TownCountDone(racial_expansion)
  set b = i > TownCount(race_manual_loading_mine)
  if i > 0 and ((GetResourceAmount(ancient_exp_mine) < GetUnitGoldCost2(racial_expansion) * 2) or TownCount(racial_peon) == 0 or b) then
    call Trace("Expansion State 0 - prior move tree")
    set ancient_exp_state = 1
    call TQAddJob(1, ANCIENT_EXPANSION, 0)
    return
  endif
  set gold_buffer = GetUnitGoldCost2(racial_expansion)
  set wood_buffer = GetUnitWoodCost2(racial_expansion)
  if GetGold() < gold_buffer or GetWood() < wood_buffer then
    set gold_buffer = 0
    set wood_buffer = 0
    if i > 0 then
      call Trace("Expansion State 0 - no resources expansion , so move tree")
      set ancient_exp_state = 1
      call TQAddJob(1, ANCIENT_EXPANSION, 0)
      return
    endif
    call Trace("Expansion State 0 - no resources expansion and no tree , end job")
    call AncientExpansionReset()
    return
  endif
  if GetAncientCampStrength() <= 0 then
    if ancient_exp_wisp == null or not UnitAlive(ancient_exp_wisp) then
      set ancient_exp_wisp = GetExpansionPeon()
      if ancient_exp_wisp == null or not UnitAlive(ancient_exp_wisp) then
        set ancient_exp_wisp = GetExpansionPeon2(ancient_exp_wisp)
      endif
    endif
    if ancient_exp_wisp != null then
      call CreateDebugTag("Expansion State 0 - prior build racial_expansion", 10, ancient_exp_wisp, 3.00, 1.50)
      set ancient_exp_state = 4
    else
      call Trace("Expansion State 0 - no peon expansion , use tree expansion")
      set ancient_exp_state = 1  // move tree , not build
      set gold_buffer = 0
      set wood_buffer = 0
    endif
    call TQAddJob(1, ANCIENT_EXPANSION, 0)
  else
    set gold_buffer = 0
    set wood_buffer = 0
    if i > 0 and b then
      call Trace("Expansion State 0 - have creep , use tree expansion")
      set ancient_exp_state = 1  // move tree , not build
      call TQAddJob(1, ANCIENT_EXPANSION, 0)
      return
    endif
    call Trace("Expansion State 0 - have creep , not expansion")
    call AncientExpansionReset()
  endif
elseif ancient_exp_state == 1 then
  call GetAncient()
  if ancient_exp_unit == null or GetLocationNonCreepStrength(GetUnitX(ancient_exp_unit), GetUnitY(ancient_exp_unit), 1200) > 0 then
    call Trace("Expansion State 1 - cannot expansion , no tree or have threatened")
    call AncientExpansionReset()
    return
  endif
  set ancient_exp_state = 2
  call RemoveLocation(ancient_exp_tree)
  set ancient_exp_tree = GetUnitLoc(ancient_exp_unit)
  //call RemoveGuardPosition(ancient_exp_unit)
  call Trace("Expansion State 1 - get tree done , unroot")
  call CreateDebugTag("Expansion State 1: Unroot Tree", 10, ancient_exp_unit, 3.00, 1.50)
  call IssueImmediateOrderById(ancient_exp_unit, order_cancel)
  call IssueImmediateOrder(ancient_exp_unit, "unroot")
  call GroupClear(ancient_exp_group)
  set g = CreateGroup()
  call GroupEnumUnitsInRangeOfLoc(g, ancient_exp_tree, 1400, null)
  call GroupRemoveUnit(g, ancient_exp_unit)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if IsUnitType(u, UNIT_TYPE_ANCIENT) and GetOwningPlayer(u) == ai_player and UnitAlive(u) and not IsUnitHidden(u) then  // take other tree , guardians ancient_exp_unit or not blocking ancient_exp_unit
      call GroupAddUnit(ancient_exp_group, u)  // if RemoveGuardPosition , then tree cannot automatic root
      set i = i + 1
    endif
    call GroupRemoveUnit(g, u)
  endloop
  call DestroyGroup(g)
  set g = null
  if i > 4 then
    call GroupImmediateOrderById(ancient_exp_group, order_cancel)
    call GroupImmediateOrder(ancient_exp_group, "unroot")
  else
    call GroupClear(ancient_exp_group)
  endif
  call TQAddJob(2, ANCIENT_EXPANSION, 0)  //  wait unroot
elseif ancient_exp_state == 2 then
  call CreateDebugTag("Expansion State 2: start move", 10, ancient_exp_unit, 3.00, 1.50)
  if DistanceBetweenPoints_dk(GetUnitLoc(ancient_exp_unit), ancient_exp_tree) > 1400 then
    call TreeGoSitu()
    set ancient_exp_state = 3
  else
    call TreeAvoid()
  endif
  call IssuePointOrder(ancient_exp_unit, "move", GetUnitX(ancient_exp_mine), GetUnitY(ancient_exp_mine))
  call TQAddJob(6, ANCIENT_EXPANSION, 0)
elseif ancient_exp_state == 3 then
  call CreateDebugTag("Expansion State 3: take expansion", 10, ancient_exp_unit, 3.00, 1.50)
  if GetAncientCampStrength() > 0 then  // wait creep
    call IssuePointOrder(ancient_exp_unit, "attack", GetUnitX(ancient_exp_mine), GetUnitY(ancient_exp_mine))
  elseif DistanceBetweenPoints_dd(GetUnitLoc(ancient_exp_unit), GetUnitLoc(ancient_exp_mine)) < 1200 then
    call IssueTargetOrder(ancient_exp_unit, "entangle", ancient_exp_mine)
    //call TQAddUnitJob(R2I(GetTimeToReachUnit(ancient_exp_unit, ancient_exp_mine)*2 + 5), RESET_GUARD_POSITION, 0, ancient_exp_unit)
    call AncientExpansionReset()
    call Trace("Expansion State 3 : exp done")
    return
  else
    call IssuePointOrder(ancient_exp_unit, "move", GetUnitX(ancient_exp_mine), GetUnitY(ancient_exp_mine))
  endif
  call TQAddJob(8, ANCIENT_EXPANSION, 0)  //  keep move
elseif ancient_exp_state == 4 then
  if ancient_exp_wisp != null and GetUnitState(ancient_exp_wisp, UNIT_STATE_LIFE) >= 1 and not CheckExpansionTaken(ancient_exp_mine) then
    //call RemoveGuardPosition(ancient_exp_wisp)
    if DistanceBetweenPoints_dd(GetUnitLoc(ancient_exp_wisp), GetUnitLoc(ancient_exp_mine)) < 1200 then
      call BuildAncient()
      call Trace("Expansion State 4: build done , end job")
      call AncientExpansionReset()
      set gold_buffer = 0
      set wood_buffer = 0
      return
    elseif GetLocationNonCreepStrength(GetUnitX(ancient_exp_mine), GetUnitY(ancient_exp_mine), 1200) > 0 then
      if anc_retry > 3 then
        call Trace("Expansion State 4: have enemy , end job")
        call AncientExpansionReset()
        set gold_buffer = 0
        set wood_buffer = 0
        return
      endif
      set anc_retry = anc_retry + 1  // Give more opportunities
      call IssuePointOrderLoc(ancient_exp_wisp, "move", home_location)
      call CreateDebugTag("Expansion State 4 - Go Home", 10, ancient_exp_wisp, 3.00, 1.50)
    else
      call IssuePointOrder(ancient_exp_wisp, "move", GetUnitX(ancient_exp_mine), GetUnitY(ancient_exp_mine))
      call CreateDebugTag("Expansion State 4 - Prep ancient build", 10, ancient_exp_wisp, 3.00, 1.50)
    endif
    call TQAddJob(4, ANCIENT_EXPANSION, 0)
    return
  endif
  call Trace("Expansion State 4: build fail end")
  call AncientExpansionReset()
  set gold_buffer = 0
  set wood_buffer = 0
endif
endfunction
#ENDIF