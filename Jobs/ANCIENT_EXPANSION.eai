#IFDEF GLOBAL
    integer ancient_exp_state = 0
    integer ancient_exp_count = 0
    location ancient_exp_loc = null
    unit ancient_exp_wisp = null
    unit ancient_exp_unit = null
    group ancient_exp_group = CreateGroup()
    boolean ancient_attack_running = false
    boolean ancient_exp_maintree = false

#ELSE

function AncientExpansionReset takes nothing returns nothing
	set ancient_exp_state = 0
	set ancient_exp_count = 0
	if ancient_exp_unit != null then
		call RecycleGuardPosition(ancient_exp_unit)
	endif
	if ancient_exp_wisp != null then
		call RecycleGuardPosition(ancient_exp_wisp)
	endif
	call RemoveLocation(ancient_exp_loc)
	set ancient_exp_loc = null
	set ancient_exp_unit = null
	set ancient_exp_wisp = null
	set not_taken_expansion = null
	set ancient_expanding = false
	set ancient_exp_maintree = false
endfunction

function CheckMine takes group rg returns group
	local unit u = null
	local unit temp = null
	local location l = null
	local group g = rg
	set rg = CreateGroup()
	loop
		set u = FirstOfGroup(g)
		exitwhen u == null
		set l = GetUnitLoc(u)
		set temp = GetOneOfIdNearLoc(temp, ai_player, 'egol', l, 1500)
		if temp == null or GetResourceAmount(temp) <= 0 then
			call GroupAddUnit(rg, u)
		endif
		call RemoveLocation(l)
		call GroupRemoveUnit(g, u)
	endloop
	call DestroyGroup(g)
	set g = null
	set l = null
	return rg
endfunction

function BuildAncient takes nothing returns nothing
	local unit u = null
	local location l = null
	call RemoveGuardPosition(ancient_exp_wisp)
	if ancient_exp_loc == null then
		set u = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[racial_expansion], GetUnitX(current_expansion), GetUnitY(current_expansion), 270.0)
		set l = GetUnitLoc(u)
		call RemoveUnit(u)
		set u = null
	else
		set l = Location(GetLocationX(ancient_exp_loc),GetLocationY(ancient_exp_loc))
	endif
	call IssuePointOrderByIdLoc(ancient_exp_wisp, old_id[racial_expansion], l)
	call RemoveLocation(l)
	set l = null
endfunction

function AncientExpansionJob takes nothing returns nothing
local group g = null
local unit u = null
local location l = null
local boolean isstrong = false
call DisplayToAllJobDebug("ANCIENT_EXPANSION JOB STARTED")

if current_expansion == null then
	call ChooseExpansion()
	if current_expansion != null then
		call RemoveLocation(ancient_exp_loc)
		set ancient_exp_loc = GetBuildLocationInDistanceFromLoc_d(old_id[racial_expansion], GetUnitLoc(current_expansion), ver_creeps_attack_buildings_dist + 500, true)
	endif
endif

if current_expansion == null or (ancient_exp_unit != null and GetUnitState(ancient_exp_unit, UNIT_STATE_LIFE) <= 0) then
	// Found out so no point trying ancient expansion again
	call SetCaptainHome(BOTH_CAPTAINS,GetLocationX(front_loc[0]),GetLocationY(front_loc[0]))
	call GroupRecycleGuardPositionInstant(CopyGroup(ancient_exp_group,g))
	call AncientExpansionReset()
	set gold_buffer = 0
	set wood_buffer = 0
	set g = null
	call Trace("Ancient Expansion state : no mine or tree die , cannot expansion")
	return
endif
set exp_time_count = ai_time
set not_taken_expansion = current_expansion
set u = GetExpFoe(u)
if ancient_exp_state == 0 then
	call Trace("Expansion Distance: " + Int2Str(R2I(GetExpansionDistance())))
	call Trace("Expansion state 0: get the Wisp and Location")
	set gold_buffer = GetUnitGoldCost2(racial_expansion)
	set wood_buffer = GetUnitWoodCost2(racial_expansion)
	if GetGold() < gold_buffer or GetWood() < wood_buffer then
		set ancient_exp_count = 0
		call Trace("Expansion State 0 - no resources expansion , wait check mine")
		set u = null
		if TownCountDone(racial_expansion) > 0 and (race_manual_loading and ((TownCount(race_manual_loading_mine) == 0) or TownCountDone(racial_expansion) > TownCountDone(race_manual_loading_mine)) or (GetMinesOwned() == 0 or TownCountDone(racial_expansion) > GetMinesOwned())) then
			call Trace("Expansion State 0 - no resources expansion and no mine , wait move tree")
			set ancient_exp_state = 1
			call TQAddJob(1, ANCIENT_EXPANSION, 0)
			return
		endif
		call Trace("Expansion State 0 - no resources expansion and no tree , end job")
		call AncientExpansionReset()
		set gold_buffer = 0
		set wood_buffer = 0
		return
	elseif u == null then
		if ancient_exp_wisp == null or not UnitAlive(ancient_exp_wisp) then
			set ancient_exp_wisp = GetExpansionPeon()
			if ancient_exp_wisp == null or not UnitAlive(ancient_exp_wisp) then
				set ancient_exp_wisp = GetExpansionPeon2(ancient_exp_wisp)
			endif
		endif
		if ancient_exp_wisp != null then
			call CreateDebugTag("Expansion State 0 - prior build racial_expansion", 10, ancient_exp_wisp, 3.00, 1.50)
			set ancient_exp_state = 5
			set ancient_exp_count = 0
			set ancient_exp_unit = null
		else
			call Trace("Expansion State 0 - no peon expansion , wait" + Int2Str(3 - ancient_exp_count) + "times to tree expansion")
			set ancient_exp_count = ancient_exp_count + 1
			if ancient_exp_count > 3 then
				set ancient_exp_state = 1
				set ancient_exp_count = 0
				set gold_buffer = 0  // move tree , not build
				set wood_buffer = 0
			endif
		endif
		call TQAddJob(1, ANCIENT_EXPANSION, 0)
	else
		call Trace("Expansion State 0 - have creep or fail , not build")
		call AncientExpansionReset()
		set gold_buffer = 0
		set wood_buffer = 0
	endif
elseif ancient_exp_state == 1 then
	set l = GetUnitLoc(current_expansion)
	set g = CreateGroup()
	call GroupEnumUnitsOfPlayer(g, ai_player, null)
	set g = SelectUnittype(g, UNIT_TYPE_TOWNHALL, true)
	set g = SelectByAlive(g, true)
	set g = SelectByHidden(g, false)
	set g = CheckMine(g)  // Prevent root trees with mines
	set g = GetNearestSubGroupOfGroup(g, l, 1)
	set ancient_exp_unit = FirstOfGroup(g)  //  find tree
	call DestroyGroup(g)
	set g = null
	call RemoveLocation(l)
	set l = null
	if ancient_exp_unit == null then
		call Trace("Expansion State 1 - cannot expansion , no tree")
		call AncientExpansionReset()
		set u = null
		return
	endif
	set ancient_exp_state = 2
	call Trace("Expansion State 1 to 2")
	call TQAddJob(1, ANCIENT_EXPANSION, 0)
elseif ancient_exp_state == 2 then
	call CreateDebugTag("Expansion State 2: Uproot Tree", 10, ancient_exp_unit, 3.00, 1.50)
	call RemoveGuardPosition(ancient_exp_unit)
	call IssueImmediateOrderById(ancient_exp_unit, OrderIdCancel)
	call IssueImmediateOrder(ancient_exp_unit, "unroot")
	call GroupAddUnit(ancient_exp_group, ancient_exp_unit)
	set l = GetUnitLoc(ancient_exp_unit)
	if TownCountDone(racial_expansion) == 1 or DistanceBetweenPoints(l, home_location) < 800 then
		set g = CreateGroup()
		call GroupEnumUnitsInRangeOfLoc(g, l, 1800, null)
		call GroupRemoveUnit(g, ancient_exp_unit)
		set g = SelectByPlayer(g, ai_player, true)
		call SelectByHidden(g, false)
		call SelectByAlive(g, true)
		loop
			set u = FirstOfGroup(g)
			exitwhen u == null
			if IsUnitType(u, UNIT_TYPE_ANCIENT) then  // take other tree , guardians ancient_exp_unit or not blocking ancient_exp_unit
				call RemoveGuardPosition(u)
				call IssueImmediateOrder(u, "unroot")
			endif
			call GroupRemoveUnit(g, u)
		endloop
		call DestroyGroup(g)
		set g = null
		set ancient_exp_maintree = true
	endif
	call RemoveLocation(l)
	set l = null
	set ancient_exp_state = 3
	call TQAddJob(3, ANCIENT_EXPANSION, 0)
elseif ancient_exp_state == 3 then
	call CreateDebugTag("Expansion State 3: Awaiting Hero", 10, ancient_exp_unit, 3.00, 1.50)
	//set isstrong = GetOwnStrength() > GetExpansionStrength()
	call ClearCaptainTargets()
	call SetCaptainHome(BOTH_CAPTAINS,R2I(GetUnitX(ancient_exp_unit)),R2I(GetUnitY(ancient_exp_unit)))
	if IsUnitInRange(hero_unit[1],ancient_exp_unit,750) or IsUnitInRange(hero_unit[2],ancient_exp_unit,750) or IsUnitInRange(hero_unit[3],ancient_exp_unit,750) or u == null then
		if ancient_exp_maintree then
			set g = CreateGroup()
			call GroupEnumUnitsInRange(g, GetUnitX(ancient_exp_unit), GetUnitY(ancient_exp_unit), 2000, null)
			set g = SelectUnittype(g, UNIT_TYPE_ANCIENT, true)
			set g = SelectByAlive(g, true)
			call GroupPointOrder(g, "move", GetUnitX(current_expansion), GetUnitY(current_expansion))
			call DestroyGroup(g)
			set g = null
		endif
		call GroupClear(ancient_exp_group)
		call GroupEnumUnitsInRange(ancient_exp_group, GetUnitX(ancient_exp_unit), GetUnitY(ancient_exp_unit), 1000, null)
		set ancient_exp_group = SelectByPlayer(ancient_exp_group, ai_player, true)
		set ancient_exp_group = SelectByAlive(ancient_exp_group, true)
		set ancient_exp_group = SelectUnittype(ancient_exp_group, UNIT_TYPE_STRUCTURE, false)
		set ancient_exp_group = SelectUnittype(ancient_exp_group, UNIT_TYPE_PEON, false)
		set ancient_exp_group = SelectByUnitStandard(ancient_exp_group, true)
		call GroupAddUnit(ancient_exp_group, ancient_exp_unit)
		call IssueTargetOrder(ancient_exp_unit, "move", current_expansion)
		set ancient_exp_count = 0
		set ancient_exp_state = 4
	else
		if ancient_exp_count < 4 then
			set ancient_exp_count = ancient_exp_count + 1
			call TQAddJob(12, ANCIENT_EXPANSION, 0)
		else
			call Trace("Expansion State 3: maybe not Hero")
			call AncientExpansionReset()
			call GroupRecycleGuardPositionInstant(CopyGroup(ancient_exp_group,g))
			set g = null
		endif
		set u = null
		return
	endif
	call TQAddJob(1, ANCIENT_EXPANSION, 0)
elseif ancient_exp_state == 4 then
	call CreateDebugTag("Expansion State 4: Attacking and taking expansion", 10, ancient_exp_unit, 3.00, 1.50)
	call SetCaptainHome(BOTH_CAPTAINS,R2I(GetUnitX(ancient_exp_unit)),R2I(GetUnitY(ancient_exp_unit)))
	if u == null then
		call CreateDebugTag("Expansion State 4: expansion done", 10, ancient_exp_unit, 3.00, 1.50)
		if ancient_exp_maintree then  //  Prevent blocking ancient_exp_unit
			set g = CreateGroup()
			call GroupEnumUnitsInRange(g, GetUnitX(ancient_exp_unit), GetUnitY(ancient_exp_unit), 2000, null)
			set g = SelectUnittype(g, UNIT_TYPE_ANCIENT, true)
			set g = SelectByAlive(g, true)
			call GroupPointOrder(g, "move", GetLocationX(home_location), GetLocationY(home_location))
			call GroupRecycleGuardPositionDelay(g, 10)
		endif
		call GroupRemoveUnit(ancient_exp_group, ancient_exp_unit)
		call IssueTargetOrder(ancient_exp_unit, "entangle", current_expansion)
		call TQAddUnitJob(R2I(GetTimeToReachUnit(ancient_exp_unit, current_expansion)*2 + 5), RESET_GUARD_POSITION, 0, ancient_exp_unit)
		call GroupRecycleGuardPositionInstant(CopyGroup(ancient_exp_group,g))
		//set no_attack_allowed = false
		call AncientExpansionReset()
		call SetCaptainHome(BOTH_CAPTAINS,GetLocationX(front_loc[0]),GetLocationY(front_loc[0]))
		set g = null
	else
		//call GroupAddTypeAndRemoveGuard(ancient_exp_group, race_ancient_expansion_help_id, ai_player)
		if GetUnitState(ancient_exp_unit, UNIT_STATE_LIFE) <= GetUnitState(ancient_exp_unit, UNIT_STATE_MAX_LIFE) * 0.40 then
			call IssueImmediateOrderById(ancient_exp_unit, OrderId("eattree"))
		elseif ancient_attack_running then
			if DistanceBetweenUnits(ancient_exp_unit, u) <= 750 then
				call GroupTargetOrder(ancient_exp_group, "attack", u)
			else
				call GroupPointOrder(ancient_exp_group, "attack", GetUnitX(u), GetUnitY(u))
			endif
			if ancient_exp_maintree then
				set g = CreateGroup()
				call GroupEnumUnitsInRange(g, GetUnitX(ancient_exp_unit), GetUnitY(ancient_exp_unit), 2000, null)
				set g = SelectUnittype(g, UNIT_TYPE_ANCIENT, true)
				set g = SelectByAlive(g, true)
				call GroupPointOrder(g, "attack", GetUnitX(ancient_exp_unit), GetUnitY(ancient_exp_unit))
				call DestroyGroup(g)
				set g = null
			endif
		endif
		call TQAddJob(6, ANCIENT_EXPANSION, 0)
	endif
elseif ancient_exp_state == 5 then
	if ancient_exp_wisp != null and GetUnitState(ancient_exp_wisp, UNIT_STATE_LIFE) > 0 then
		if not CheckExpansionTaken(current_expansion) then
			call CreateDebugTag("Expansion State 5: build", 10, ancient_exp_wisp, 3.00, 1.50)
			call BuildAncient()
		endif
	endif
	call Trace("Expansion State 5: end")
	call AncientExpansionReset()
	set gold_buffer = 0
	set wood_buffer = 0
endif
set u = null
endfunction
#ENDIF