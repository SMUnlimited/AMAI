#IFDEF GLOBAL
    integer array army_owner
    location array army_loc
    location array army_dir
    location array army_future
    real array army_strength
    group array army_group
    integer array army_count
    integer army_num = 0
    real army_radius = 1500
    real army_future_mult = 3
    group in_army_group = CreateGroup()
    integer main_army = -1
    integer lastArmyNum = 0
    integer lastFreeNum = 0
    integer mode = 0
    integer most_threatened_player_town = 0
    location captain_home = null
    boolean captain_tp = true

#ELSE
// Army Tracker

function CopyArmy takes integer from, integer to returns nothing
  set army_owner[to] = army_owner[from]
  set army_loc[to] = army_loc[from]
  set army_dir[to] = army_dir[from]
  set army_future[to] = army_future[from]
  set army_strength[to] = army_strength[from]
  set army_group[to] = army_group[from]
  set army_count[to] = army_count[from]
  set town_threat_army[to] = town_threat_army[from]
endfunction

function TrackArmy takes integer num returns boolean
  local group g = CreateGroup()
  local unit u = FirstOfGroup(army_group[num])
  //local location l = null
  local real x = 0
  local real y = 0
  local integer p = army_owner[num]
  local player ap = Player(p)
  local player up = null
  local integer tmpmainarmy = -1
  if u != null then
    // If tracking existing army select range from current position not historic position
    call GroupEnumUnitsInRange(g, GetUnitX(u), GetUnitY(u), army_radius, null)
  else
    call GroupEnumUnitsInRangeOfLoc(g, army_loc[num], army_radius, null)
  endif
  call GroupClear(army_group[num])
  set army_strength[num] = 0
  set army_count[num] = 0
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    set up = GetOwningPlayer(u)
    if up == ap and not IsUnitType(u, UNIT_TYPE_STRUCTURE) and not IsUnitType(u, UNIT_TYPE_PEON) and UnitAlive(u) and not IsUnitHidden(u) and not IsUnitInGroup(u, in_army_group) and (up != ai_player or (IsStandardUnit(u) and not IsUnitBuying(u))) then
      call GroupAddUnit(army_group[num], u)
      call GroupAddUnit(in_army_group, u)
      set x = x + GetUnitX(u)  // Prevent loc exceeding map range
      set y = y + GetUnitY(u)
      //set l = GetSumLoc_dd(l, GetUnitLoc(u))
      set army_count[num] = army_count[num] + 1
      if up != ai_player and IsUnitInvisibleAM(u, ai_player) then
        // Fix using invisible units to exploit amai to force defend its town
      else
        set army_strength[num] = army_strength[num] + GetUnitStrength(u)
      endif
    endif
    call GroupRemoveUnit(g, u)
  endloop
  call DestroyGroup(g)
  set g = null

  call RemoveLocation(army_dir[num])
  call RemoveLocation(army_future[num])
  set ap = null
  set up = null
  if army_count[num] <= 1 or army_strength[num] == 0 then
    call DestroyGroup(army_group[num])
    set army_group[num] = null
    call RemoveLocation(army_loc[num])
    set army_loc[num] = null
    set army_dir[num] = null
    set army_future[num] = null
    //call RemoveLocation(l)
    //set l = null
    return false
  endif
  set x = x / Max(army_count[num], 1)
  set y = y / Max(army_count[num], 1)
  //set l = GetDivisionLoc_d(l, Max(army_count[num], 1))
  set army_dir[num] = GetSubtractionLoc_dd(Location(x, y), army_loc[num])
  set army_loc[num] = Location(x, y)
  set army_future[num] = GetSumLoc_kd(army_loc[num], GetMultipleLoc(army_dir[num], army_future_mult))
  if Player(p) == ai_player then
    if IsUnitInGroup(major_hero, army_group[num]) then
      set main_army = num
      if tmpmainarmy < 0 then
        set tmpmainarmy = num // fallback main army
      endif
    endif
    call CreateDebugTagLoc("Tracked Army: " + Int2Str(num) + " Strength:" + Int2Str(R2I(army_strength[num])), 10, x, y, 8.00, 3.00)
  endif
  // if army_strength[num] != 0 then
    // call PingMinimap(GetLocationX(l), GetLocationY(l), 4)
  // endif
  //set l = null
  return true
endfunction

function TrackExistingArmies takes nothing returns nothing
  local integer i = lastArmyNum
  local integer first_free = lastFreeNum
  loop
    exitwhen i >= army_num
    exitwhen i != lastArmyNum and ModuloInteger(i,30) == 0 // Sleep every 30 armies to avoid infinite loops
    if TrackArmy(i) then
      if i != first_free then
        call CopyArmy(i, first_free)
      endif
      set first_free = first_free + 1
    endif
    set i = i + 1
  endloop
  if i >= army_num then
    set army_num = first_free
    set mode = 1
    set lastArmyNum = 0
    set lastFreeNum = 0
  else
    set lastArmyNum = army_num
    set lastFreeNum = first_free
    call TQAddJob(1, ARMY_TRACK, 0)
  endif
endfunction

function SeedNewArmyAtLoc takes location l, integer p returns nothing
  set army_owner[army_num] = p
  set army_loc[army_num] = l
  set army_dir[army_num] = Location(0,0)
  set army_future[army_num] = Location(0,0)
  set army_group[army_num] = CreateGroup()
  if TrackArmy(army_num) then
    set army_num = army_num + 1
  endif
endfunction

function SeedNewArmiesForPlayer takes integer p returns nothing
  local group g = CreateGroup()
  local unit u = null
  local integer i = 0
  call GroupEnumUnitsOfPlayer(g, Player(p), null)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if not IsUnitType(u, UNIT_TYPE_STRUCTURE) and not IsUnitType(u, UNIT_TYPE_PEON) and UnitAlive(u) and not IsUnitHidden(u) and not IsUnitInGroup(u, in_army_group) then
      call SeedNewArmyAtLoc(GetUnitLoc(u), p)
    endif
    call GroupRemoveUnit(g, u)
  endloop
  if Player(p) == ai_player then
    // Calculate main_army to be the largest group of units
    loop
      exitwhen i >= army_num
      if Player(army_owner[i]) == ai_player and army_strength[main_army] < army_strength[i] then
        set main_army = i
      endif
      set i = i + 1
    endloop
  endif
  call DestroyGroup(g)
  set g = null
endfunction

function SeedNewArmies takes nothing returns nothing
  local integer p = lastFreeNum
  local player sp = null
  loop
    exitwhen p >= GetBJMaxPlayers()
    exitwhen p != lastFreeNum and ModuloInteger(p, 10) == 0 // Sleep every 10 players
    set sp = Player(p)
    if GetPlayerSlotState(sp) == PLAYER_SLOT_STATE_PLAYING and not IsPlayerObserver(sp) and GetPlayerUnitCount(sp, false) > 0 then
      call SeedNewArmiesForPlayer(p)
    endif
    set p = p + 1
  endloop
  if p >= GetBJMaxPlayers() then
    set mode = 2
    set lastFreeNum = 0
  else
    set lastFreeNum = p
    call TQAddJob(1, ARMY_TRACK, 0)
  endif
endfunction

function UpdateSpecificTownThreat takes integer num returns nothing
  local integer i = 0
  local real dist = 0
  local real threat = 0
  local real max_threat = 0
  local real t = GetLocationTowerStrength(GetLocationX(town_loc[num]), GetLocationY(town_loc[num]), ver_tower_check_radius) * 2 // Detect any tower rush events
  local location loc = null
  local player p = Player(town_owner[num])
  loop
    exitwhen i >= army_num
    if army_owner[i] != town_owner[i] then
      set dist = RMax(DistanceBetweenPoints(army_future[i], town_loc[num]), full_threat_distance) // Future loc
      set loc = GetSubtractionLoc(town_loc[num], army_loc[i])
      if DistanceBetweenPoints(army_loc[i], town_loc[num]) < GetLengthOfLoc(army_dir[i]) and RAbs(GetAngleBetweenLocs(army_dir[i], loc)) <= 0.4 then // Current loc
        set dist = full_threat_distance
      else
        set dist = RMin(dist, DistanceBetweenPoints(army_loc[i], town_loc[num]))
      endif
      call RemoveLocation(loc)
      if dist <= no_threat_distance then
        //call DisplayToAll("Threat Dist:" + Real2Str(dist))
        //call DisplayToAll("Threat strength:" + Real2Str(army_strength[i]))
        //call DisplayToAll("Threat divisor:" + Real2Str(Pow(dist, distance_threat_exponent)))
        set dist = Pow(dist, distance_threat_exponent)
        if dist == 0 then
          set dist = 1
        endif
        set threat = distance_threat_mult * army_strength[i] / dist
        //call DisplayToAll("Threat:" + Real2Str(Pow(dist, distance_threat_exponent)))
        if IsPlayerAlly(Player(town_owner[num]), Player(army_owner[i])) and Player(army_owner[i]) != ai_player then
          set t = t - (threat*0.3) // Only ally units reduce threat so should protect own towns over allies, but in some situations ally units enough to protect town
        elseif Player(army_owner[i]) != ai_player then
          set t = t + threat
          if threat > max_threat then
            set max_threat = threat
            set town_threat_army[num] = i
          endif
        endif
      endif
    endif
    set i = i + 1
  endloop
  set town_threat[num] = t
  if Player(town_owner[num]) == ai_player then
    if (most_threatened_player_town == -1 or town_threat[most_threatened_player_town] < town_threat[num]) and town_count[num] > 0 then
      set most_threatened_player_town = num
    endif
    set most_threatened_player_town = num
  elseif IsPlayerAlly(Player(town_owner[num]), ai_player) then
    if (most_threatened_town == -1 or town_threat[most_threatened_town] < town_threat[num]) and town_count[num] > 0 then
      if town_can_tp[num] == true then
        set most_threatened_town = num
      endif
    endif
    // call DisplayToAll("Town threatened "+Int2Str(num)+" Threat: "+Int2Str(R2I(town_threat[num])))
    // call PingMinimapEx(GetLocationX(town_loc[num]), GetLocationY(town_loc[num]), 4, 255, 0, 0, true)
  elseif IsPlayerEnemy(p, ai_player) and town_count[num] > 0 then
    if most_threatened_enemy_town == -1 or town_threat[most_threatened_enemy_town] < town_threat[num] then
      set most_threatened_enemy_town = num
    endif
  endif
  set loc = null
  set p = null
endfunction

function UpdateTownThreat takes nothing returns nothing
  local integer i = lastFreeNum
  local real accepted_threat_level = LinearInterpolation(atl_time_start, atl_time_end, atl_time_start_val, atl_time_end_val, TimerGetElapsed(tq_timer)) * LinearInterpolation(atl_enemy_start, atl_enemy_end, atl_enemy_start_mult, atl_enemy_end_mult, c_enemy_total)
  local real playerthreat = 0
  local integer enemy_army = -1
  if i == 0 then
    //call Trace("ARMY_TRACK: Town threat update")
    set most_threatened_town = -1
    set most_threatened_player_town = -1
    set most_threatened_enemy_town = -1
  endif
  loop
    exitwhen i >= town_num
    //exitwhen i != lastFreeNum and ModuloInteger(i, 10) == 0 this would cause most threatened town to be negative during this calculation which would break other processes
    call UpdateSpecificTownThreat(i)
    set i = i + 1
  endloop
  set playerthreat = Pow(full_threat_distance, distance_threat_exponent)
  if playerthreat == 0 then
    set playerthreat = 1
  endif
  set playerthreat = ApplyFleeStrengthModifier(distance_threat_mult * army_strength[main_army] / playerthreat, false) // Converts the players total strength into threat
  if i >= town_num then
    set mode = 3
    set lastFreeNum = 0
    set town_threatened = false
    if most_threatened_town > 0 and town_threat[most_threatened_town] > 0 then
      call Trace("ThreatenedTownThreat:" + Real2Str(town_threat[most_threatened_town]) + " AcceptedThreatLevel:" + Real2Str(accepted_threat_level))
    endif
    if most_threatened_player_town > 0 and town_threat[most_threatened_player_town] > 0 then
      call Trace("PlayerThreatenedTownThreat:" + Real2Str(town_threat[most_threatened_player_town]) + " AcceptedThreatLevel:" + Real2Str(accepted_threat_level))
    endif
    if most_threatened_player_town >= 0 and town_threat[most_threatened_player_town] > accepted_threat_level and town_threat[most_threatened_player_town] <= playerthreat then //and town_threat[most_threatened_town] > (I2R(c_ally_total + 1) / c_enemy_total) * town_threat[most_threatened_enemy_town] then
      set town_threatened = true
      set most_threatened_town = most_threatened_player_town
      set enemy_army = town_threat_army[most_threatened_town]
      if enemy_army >= 0 then
        call SetCaptainHome(BOTH_CAPTAINS,GetLocationX(army_loc[enemy_army]), GetLocationY(army_loc[enemy_army]))
      else
        call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(town_loc[most_threatened_player_town]), GetLocationY(town_loc[most_threatened_player_town]))
      endif
      set captain_home = town_loc[most_threatened_player_town]
      set captain_tp = town_can_tp[most_threatened_player_town]
    elseif most_threatened_town >= 0 and town_threat[most_threatened_town] > accepted_threat_level * 1.2 and town_threat[most_threatened_town] <= playerthreat then
      set town_threatened = true
      set enemy_army = town_threat_army[most_threatened_town]
      if enemy_army >= 0 then
        call SetCaptainHome(BOTH_CAPTAINS,GetLocationX(army_loc[enemy_army]), GetLocationY(army_loc[enemy_army]))
      else
        call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(town_loc[most_threatened_town]), GetLocationY(town_loc[most_threatened_town]))
      endif
      set captain_home = town_loc[most_threatened_town]
      set captain_tp = town_can_tp[most_threatened_town]
    elseif most_threatened_player_town >= 0 and town_threat[most_threatened_player_town] > 0 and town_threat[most_threatened_player_town] <= playerthreat then
      call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(town_loc[most_threatened_player_town]), GetLocationY(town_loc[most_threatened_player_town]))
      set most_threatened_town = most_threatened_player_town
      set captain_home = town_loc[most_threatened_player_town]
      set captain_tp = town_can_tp[most_threatened_player_town]
    elseif most_threatened_town >= 0 and town_threat[most_threatened_town] > 0 and town_threat[most_threatened_town] <= playerthreat then
      call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(town_loc[most_threatened_town]), GetLocationY(town_loc[most_threatened_town]))
      set captain_home = town_loc[most_threatened_town]
      set captain_tp = town_can_tp[most_threatened_town]
    elseif home_town >= 0 then
      call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(town_loc[home_town]), GetLocationY(town_loc[home_town])) // Return to known home town
      set captain_home = town_loc[home_town]
      set captain_tp = town_can_tp[home_town]
    else
      call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(home_location), GetLocationY(home_location)) // Final fallback, just use start location
      set captain_home = home_location
      set captain_tp = true
    endif
  else
    set lastFreeNum = i
    call TQAddJob(1, ARMY_TRACK, 0)
  endif
endfunction

function ArmyTrackJob takes nothing returns nothing
  //local unit alliance = null
  call DisplayToAllJobDebug("ARMY_TRACK JOB START")
  call GroupClear(in_army_group)
  if mode == 0 then
    call TrackExistingArmies()
  endif
  if mode == 1 then
    call SeedNewArmies()
  endif
  if mode == 2 then
    call UpdateTownThreat()
  endif
  if mode == 3 then
    set mode = 0
    call TQAddJob(4 + 1 * sleep_multiplier, TOWN_TRACK, 0)
  endif
endfunction
#ENDIF