#IFDEF GLOBAL
    unit shop_sent = null
    boolean shop_ordered = false
    real shop_buy_time_small = -1
    real shop_buy_time_large = -1
    integer shop_wanted = 0
    unit shop_unit = null
    real shop_distance_limit = 100000
    real raceshop_distance_limit = 100000
    real merchant_distance_limit = 5000
	boolean retreat_home = false
	boolean ismoving = false
	real buyX
	real buyY
	
	group going_home_group = CreateGroup()
	group buying_group = CreateGroup()
	
#ELSE
function IsHealingItem takes integer id returns boolean
	if false then	//basically check that item to build is healing item and drop item to make room for this
#INCLUDETABLE <$VER$\HealingItems.txt> #EFR
	elseif o%1 == id then
		return true	
#ENDINCLUDE	  
	elseif oTOWN_PORTAL == id then
		return true
	endif
	return false
endfunction

function DropNonHealingItem takes unit u returns nothing
	local integer i = 0
	local item t = null
	
	loop
		exitwhen i >= 6
		set t = UnitItemInSlot(u, i)
		if t != null and not IsHealingItem(GetItemTypeId(t)) then
			call UnitDropItemPoint(u, t, GetUnitX(u), GetUnitY(u))
			return
		endif
		set i = i + 1
	endloop
endfunction

function BuyItemJob takes integer id returns nothing
  local real daytime = GetFloatGameState(GAME_STATE_TIME_OF_DAY)
  local real current_time = TimerGetElapsed(tq_timer)
  local real time_next_try = 0
  local real dist = 0
  local location l = null
  local boolean healing = false

local integer detectedenemies = GetLocationNonCreepStrength(GetUnitX(shop_sent), GetUnitY(shop_sent), 1000) 

 call DisplayToAllJobDebug("BUY_ITEM JOB START")

   if shop_ordered == false then
    call Trace("Order to get item is off so end job")
	return	// Shouldn't be buying an item anyway
   endif

  // moved here to prevent a job crash 
   if shop_sent == null or not UnitAlive(shop_sent) then
    set ismoving = false
    if retreat_home then
	    call Trace("Running Home end but item job")
	    set shop_ordered = false
		set shop_buy_time_large = -1
		set shop_buy_time_small = -1
		set retreat_home = false
		return
	endif
	if buy_type[id] == BT_RACIAL_ITEM then
		set shop_sent = GetHeroToBuyItem(shop_unit, shop_distance_limit,false)
	else
		set shop_sent = GetHeroToBuyItem(shop_unit, shop_distance_limit,true)
	endif
    if shop_sent == null then
	  call Trace("No unit to buy item so end job")
      set shop_ordered = false
      set shop_buy_time_large = -1
      set shop_buy_time_small = -1
      return
    endif
	call GroupAddUnit(unit_buying_item, shop_sent)
  endif
 
   //call CreateDebugTag("In BUT ITEM JOB, 10, shop_sent, 3.00, 1.50) 

// Town threatened so dont get item
  if GetUnitTypeId(shop_unit) == old_id[racial_shop] and DistanceBetweenUnits(shop_sent, shop_unit) < 1000 then
  else
    if town_threatened or attack_running then
		call CreateDebugTag("BUY_ITEM:in attack so dont get item", 10, shop_sent, 3.00, 1.50) 
    	call RecycleGuardPosition(shop_sent)
		call GroupRemoveUnit(unit_buying_item, shop_sent)
		call AddAssault(1, GetUnitTypeId(shop_sent))
    	set shop_sent = null
    	set shop_ordered = false
    	set shop_buy_time_large = -1
    	set shop_buy_time_small = -1
    	return
    endif
  endif
   
  if retreat_home then
	set l = GetUnitLoc(shop_sent)
	if DistanceBetweenPoints(l, home_location) >= 1100 then
		call CreateDebugTag("BUY_ITEM: Retreat to Home", 10, shop_sent, 3.00, 1.50)	
		call RemoveGuardPosition(shop_sent)
		if not IsUnitInGroup(shop_sent, going_home_group) then
			call IssuePointOrder(shop_sent, "move", GetLocationX(home_location), GetLocationY(home_location))
			call GroupAddUnit(going_home_group, shop_sent)
		elseif GetUnitCurrentOrder(shop_sent) == OrderId("stop") or GetUnitCurrentOrder(shop_sent) != OrderId("move") then
			call IssuePointOrder(shop_sent, "move", GetLocationX(home_location), GetLocationY(home_location))
		endif
		call TQAddJob(5, BUY_ITEM, id)
	else
		call GroupRemoveUnit(unit_buying_item, shop_sent)
		if IsUnitInGroup(shop_sent, going_home_group) then
			call GroupRemoveUnit(going_home_group, shop_sent)
		endif
		call RecycleGuardPosition(shop_sent)
		call CreateDebugTag("BUY_ITEM: Retreated", 10, shop_sent, 3.00, 1.50)
	    set shop_sent = null
		set retreat_home = false
		set shop_ordered = false
		set shop_buy_time_large = -1
		set shop_buy_time_small = -1
	endif
	call RemoveLocation(l)
	set l = null
	return
  endif
 
// Enemies are present so get home before they harm us
   if detectedenemies >= GetUnitStrength(shop_sent) and GetUnitTypeId(shop_unit) != old_id[racial_shop] then
	 call IssuePointOrder(shop_sent, "move", GetLocationX(home_location), GetLocationY(home_location))
    //call TQAddUnitJob(GetTimeToReachLoc(shop_sent, home_location), RESET_GUARD_POSITION, 1, shop_sent)
	set retreat_home = true
	call CreateDebugTag("BUY_ITEM: Enemies present so dont get item this time", 10, shop_sent, 3.00, 1.50) 
    call TQAddJob(0, BUY_ITEM, id)
	return
   endif

//  call DisplayToAll("Item Buy Start")
  if (shop_buy_time_large >= 0 and shop_buy_time_large + buy_timeout_large < current_time) or (shop_buy_time_small >= 0 and shop_buy_time_small + buy_timeout_small < current_time) then
    set available_time[id] = ai_time + regenerate_time[id] / 2
	call CreateDebugTag("Buy item timeout reached", 10, shop_sent, 3.00, 1.50) 	
    call RecycleGuardPosition(shop_sent)
	call GroupRemoveUnit(unit_buying_item, shop_sent)
    set shop_sent = null
    set shop_ordered = false
    set shop_buy_time_large = -1
    set shop_buy_time_small = -1
    return
  endif

	set healing = IsHealingItem(old_id[id])	

  
  if GetItemNumber(id) >= shop_wanted or shop_unit == null or (not UnitAlive(shop_unit)) or (shop_sent != null and GetSlotsFreeOnUnit(shop_sent) <= 0 and not healing) then
    call RecycleGuardPosition(shop_sent)
	call GroupRemoveUnit(unit_buying_item, shop_sent)
	call CreateDebugTag("BUT_ITEM: Items have been brought", 10, shop_sent, 3.00, 1.50) 
	call AddAssault(1, GetUnitTypeId(shop_sent))
    set shop_sent = null
    set shop_ordered = false
    set shop_buy_time_large = -1
    set shop_buy_time_small = -1
    return
  endif

  
  if shop_buy_time_large < 0 then
    set shop_buy_time_large = current_time
  endif
  call RemoveGuardPosition(shop_sent)
  set dist = DistanceBetweenUnits(shop_sent, shop_unit)
  if dist < buy_distance then
  		call CreateDebugTag("buy item", 10, shop_sent, 3.00, 1.50) 
		if GetSlotsFreeOnUnit(shop_sent) <= 0 and healing then
			call DropNonHealingItem(shop_sent)
		else
		    call IssueImmediateOrder(shop_sent, "stop")
		endif
		set ismoving = false
	if GetUnitTypeId(shop_unit) == old_id[racial_shop] then
		call IssueTargetOrderById(shop_unit, 'Aall', shop_sent)  // Change shop target to this hero
	endif
    call IssueNeutralImmediateOrderById(ai_player, shop_unit, old_id[id])
    if shop_buy_time_small < 0 then
      set shop_buy_time_small = current_time
    endif
    set time_next_try = 0.5
  else
  	call CreateDebugTag("move to item shop", 10, shop_sent, 3.00, 1.50) 
	if ismoving == false then
		set ismoving = true
		call IssuePointOrder(shop_sent, "move", GetUnitX(shop_unit), GetUnitY(shop_unit))
	elseif GetUnitCurrentOrder(shop_sent) == OrderId("stop") or GetUnitCurrentOrder(shop_sent) != OrderId("move") then
		call IssuePointOrder(shop_sent, "move", GetUnitX(shop_unit), GetUnitY(shop_unit))
	endif
    set time_next_try = 4
  endif

  call TQAddJob(time_next_try, BUY_ITEM, id)
endfunction
#ENDIF