#IFDEF GLOBAL
#ELSE
function BuyNeutral takes integer id returns nothing
  local real timetotravel = 0
  local real daytime = GetFloatGameState(GAME_STATE_TIME_OF_DAY)
  local real current_time = TimerGetElapsed(tq_timer)
  local real time_next_try = 0
  local real dist = 0
  local integer nn = GetNeutralNumber(id)
  local unit buy_place = nearest_neutral[nn]
  local boolean place_guarded = neutral_guarded[nn]
local integer detectedenemies = GetLocationNonCreepStrength(GetUnitX(neutral_sent[nn]), GetUnitY(neutral_sent[nn]), 1000) 
  local location l = null
  local boolean retreat_home = false

  call DisplayToAllJobDebug("BUY_NEUTRAL JOB START")

  // moved this check here to prevent a job crash if placed lower down
    if neutral_sent[nn] == null or not UnitAlive(neutral_sent[nn]) then
	  if retreat_home then
	    set retreat_home = false
		return
	  endif
      set neutral_sent[nn] = GetUnitToBuy(buy_place)
      if neutral_sent[nn] == null then
        call TQAddJob(sleep_multiplier, BUY_NEUTRAL, id)
        return
	  endif
	  call GroupAddUnit(unit_buying_merc, neutral_sent[nn])
    endif  

  if retreat_home then
	set l = GetUnitLoc(neutral_sent[nn])
	if DistanceBetweenPoints(l, home_location) >= 1100 then
		call CreateDebugTag("BUY_ITEM: Retreat to Home", 10, neutral_sent[nn], 3.00, 1.50)	
		call RemoveGuardPosition(neutral_sent[nn])
		call IssuePointOrder(neutral_sent[nn], "move", GetLocationX(home_location), GetLocationY(home_location))
		call TQAddJob(5, BUY_NEUTRAL, id)
	else
		call GroupRemoveUnit(unit_buying_merc, neutral_sent[nn])
		call RecycleGuardPosition(neutral_sent[nn])
		set retreat_home = false
		set neutral_sent[nn] = null
		set neutral_ordered[nn] = false
		set buy_time_large[nn] = -1
		set buy_time_small[nn] = -1
	endif
	call RemoveLocation(l)
	set l = null	
	return
  endif
	
// Enemies are present so get home before they harm us
 if DistanceBetweenUnits(neutral_sent[nn], buy_place) <= 800 and detectedenemies >= GetUnitStrength(neutral_sent[nn]) then
    call IssuePointOrder(neutral_sent[nn], "move", GetLocationX(home_location), GetLocationY(home_location))
    //call TQAddUnitJob(GetTimeToReachLoc(neutral_sent[nn], home_location), RESET_GUARD_POSITION, 1, neutral_sent[nn])
	set retreat_home = true
    call TQAddJob(1, BUY_NEUTRAL, id)
 endif

//  call DisplayToAll("Buy Neutral Started")
  if (buy_time_large[nn] >= 0 and buy_time_large[nn] + buy_timeout_large < current_time) or (buy_time_small[nn] >= 0 and buy_time_small[nn] + buy_timeout_small < current_time) then
    set available_time[id] = ai_time + regenerate_time[id] / 2
    call RecycleGuardPosition(neutral_sent[nn])
	call GroupRemoveUnit(unit_buying_merc, neutral_sent[nn])
    set neutral_sent[nn] = null
    set neutral_ordered[nn] = false
    set buy_time_large[nn] = -1
    set buy_time_small[nn] = -1
    return
  endif

  if TownCountDone(id) >= neutral_wanted[nn] then
    call RecycleGuardPosition(neutral_sent[nn])
	call GroupRemoveUnit(unit_buying_merc, neutral_sent[nn])
    set neutral_sent[nn] = null
    set neutral_ordered[nn] = false
    set buy_time_large[nn] = -1
    set buy_time_small[nn] = -1
    return
  endif

  if place_guarded and daytime >= 5 and daytime < 18 then
    set time_next_try = (18 - daytime)*20
  else
    call RemoveGuardPosition(neutral_sent[nn])
    //call SetUnitUserData(neutral_sent[nn], UNIT_BUYING)
    if buy_time_large[nn] < 0 then
      set buy_time_large[nn] = current_time
    endif

	set timetotravel = GetTimeToReachUnit(neutral_sent[nn], buy_place)
	
    set dist = DistanceBetweenUnits(neutral_sent[nn], buy_place)
    if dist < buy_distance then
		call CreateDebugTag("buy unit", 10, neutral_sent[nn], 3.00, 1.50) 
      call IssueImmediateOrder(neutral_sent[nn], "stop")
      call IssueNeutralImmediateOrderById(ai_player, buy_place, old_id[id])
      if buy_time_small[nn] < 0 then
        set buy_time_small[nn] = current_time
      endif
      set time_next_try = 0.5
    else
	  call CreateDebugTag("move to merc camp", 10, neutral_sent[nn], 3.00, 1.50) 
      call IssuePointOrder(neutral_sent[nn], "move", GetUnitX(buy_place), GetUnitY(buy_place))
      
      set time_next_try = 4
    endif
  endif
  call TQAddJob(time_next_try, BUY_NEUTRAL, id)
endfunction
#ENDIF