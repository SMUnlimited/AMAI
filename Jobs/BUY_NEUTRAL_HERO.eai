#IFDEF GLOBAL
#ELSE

function ResetBuyNeutralHero takes integer nn returns unit
  if neutral_sent[nn] != null then
    call RecycleGuardPosition(neutral_sent[nn])
    call GroupRemoveUnit(unit_buying_tavern, neutral_sent[nn])
  endif
  set neutral_sent[nn] = null
  set neutral_ordered[nn] = false
  set TavernResurrect = false
  set buy_time_large[nn] = -1
  set buy_time_small[nn] = -1
  return null
endfunction

function BuyNeutralHero takes integer id returns nothing
  local real timetotravel = 0
  local real daytime = GetFloatGameState(GAME_STATE_TIME_OF_DAY)
  local real current_time = TimerGetElapsed(tq_timer)
  local real time_next_try = 0
  local real distance = 0
  local integer nn = GetNeutralNumber(id)
  //local unit buying_unit = neutral_sent[nn]
  local unit tavern = nearest_neutral[nn]
  local boolean place_guarded = neutral_guarded[nn]

  call DisplayToAllJobDebug("BUY_NEUTRAL_HERO JOB START")

  //call Trace("Get Tavern Hero Job")
  if TavernResurrect and buy_type[id] == BT_HERO then
    set nn = NEUTRAL_TAVERN
    set tavern = nearest_neutral[nn]
    set place_guarded = neutral_guarded[nn]
  endif
  if TownCount(id) >= neutral_wanted[nn] then
    set tavern = ResetBuyNeutralHero(nn)
    return
  endif

  if place_guarded and daytime >= 5 and daytime < 18 then
    set time_next_try = (18 - daytime)*20
  else

    if neutral_sent[nn] == null or GetUnitState(neutral_sent[nn], UNIT_STATE_LIFE) <= 0 then
      if neutral_sent[nn] != null then
        call GroupRemoveUnit(unit_buying_tavern, neutral_sent[nn])
      endif
      set neutral_sent[nn] = GetUnitToBuy(neutral_sent[nn], tavern)
      if neutral_sent[nn] == null then
        set tavern = ResetBuyNeutralHero(nn)
        call Trace("No unit to get neutral hero")
        return
      endif
      call Trace("unit for neutral hero obtained")
      call GroupAddUnit(unit_buying_tavern, neutral_sent[nn])
    endif
    set timetotravel = GetTimeToReachUnit(neutral_sent[nn], tavern)

    if current_time < (neutral_hero_time*5) - timetotravel then
      set time_next_try = RMax((neutral_hero_time*5) - timetotravel - current_time, 0.5)
    else
      set distance = DistanceBetweenUnits(neutral_sent[nn], tavern)
      call RemoveGuardPosition(neutral_sent[nn])
      if distance >= buy_distance then
        call CreateDebugTag("Move to Tavern", 10, neutral_sent[nn], 3.00, 1.50)
        call IssuePointOrder(neutral_sent[nn], "move", GetUnitX(tavern), GetUnitY(tavern))
        set time_next_try = RMin(4, RMax(timetotravel + 1,1))
      else
        call CreateDebugTag("buy tavern hero", 10, neutral_sent[nn], 3.00, 1.50)
        call IssueImmediateOrder(neutral_sent[nn], "stop")
        if TavernResurrect then  // try Resurrect all hero
          if TownCount(hero[1]) < 1 and hero_built[1] then
            call IssueNeutralImmediateOrderById(ai_player, tavern, old_id[hero[1]])
          endif
          if TownCount(hero[2]) < 1 and hero_built[2] then
            call IssueNeutralImmediateOrderById(ai_player, tavern, old_id[hero[2]])
          endif
          if TownCount(hero[3]) < 1 and hero_built[3] then
            call IssueNeutralImmediateOrderById(ai_player, tavern, old_id[hero[3]])
          endif
          set tavern = ResetBuyNeutralHero(nn)
          return  // end job
        endif
        call IssueNeutralImmediateOrderById(ai_player, tavern, old_id[id])
        set time_next_try = 0.5
      endif
    endif
  endif
  call TQAddJob(time_next_try, BUY_NEUTRAL_HERO, id)
  set tavern = null
endfunction

#ENDIF