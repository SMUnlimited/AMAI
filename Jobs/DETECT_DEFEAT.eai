#IFDEF GLOBAL
    integer force_number = 0
    player array own_force
    player array ally_force
    player array enemy_force
    integer gold_problem_level = 0
    boolean ask_for_gold = false
    boolean desperation_assault = false
    integer SaveYourselfMode = -1
    player sharedRacePlayer = null
    boolean humanPlayerAllys = false
#ELSE
//============================================================================
// Self destruction
//============================================================================
function SaveYourself takes nothing returns boolean
  if SaveYourselfMode == -1 then  // Choose self methods based on racial abilities , one ability use one num/mode , not recommended sale item or build(like UD)
    if current_expansion == null then
      call ChooseExpansion()
    endif
    if race_ancient_expansion_available == true and not ancient_expanding then
      call TQAddJob(2, ANCIENT_EXPANSION, 0)
      set ancient_expanding = true
      set SaveYourselfMode = ANCIENT_EXPANSION
      return true
    elseif race_militia_available == true and not militia_expanding then
      call TQAddJob(2, MILITIA_EXPAND, 0)
      set militia_expanding = true
      set SaveYourselfMode = MILITIA_EXPAND
      return true
    endif
  else  //Check Self rescue situation
    if SaveYourselfMode == ANCIENT_EXPANSION then
      if ancient_expanding == true then
        return true  // In self rescue, wait
      elseif TownCount(race_manual_loading_mine) > 0 or not HallsCompleted(racial_expansion) or GetMinesOwned() > 0 then
        set SaveYourselfMode = -1  // Self rescue successful , because ancient_expanding is false and have mine
        return true
      endif
    elseif SaveYourselfMode == MILITIA_EXPAND then
      if militia_expanding == true then
        return true  // In self rescue, wait
      elseif not HallsCompleted(racial_expansion) or GetMinesOwned() > 0 then
        set SaveYourselfMode = -1  // Self rescue successful , because ancient_expanding is false and have mine
        return true
      endif
    endif
  endif
  return false
endfunction

function RemoveFromOwnForce takes player p returns nothing
  local integer i = 0
  if i >= force_number then
    return
  endif
  loop
    exitwhen own_force[i] == p
    set i = i + 1
  endloop
  set force_number = force_number - 1
  loop
    exitwhen i >= force_number
    set own_force[i] = own_force[i+1]
    set i = i + 1
  endloop
endfunction

function KillYourself takes boolean end_ai returns nothing
    local group g = null
    local unit u = null
    local integer i = 0
    local player p = null
    if SaveYourself() then
      return
    endif
    if not player_defeated and not (GetPlayerSlotState(ai_player) == PLAYER_SLOT_STATE_LEFT) then
      call Chat(C_AGG)
      call Chat(C_EGG)
      call Sleep(3)
      set g = CreateGroup()
      call GroupEnumUnitsOfPlayer(g, ai_player, null)
      set g = SelectByAlive(g, true)
      if destroy_buildings_on_defeat and (no_ai_ally and not humanPlayerAllys) then
        loop
          set u = FirstOfGroup(g)
          exitwhen u == null
          call KillUnit(u)
          call GroupRemoveUnit(g, u )
        endloop
      else
        loop
          exitwhen i >= c_ally_total
          set p = ally_force[i]
          if GetPlayerSlotState(p) == PLAYER_SLOT_STATE_PLAYING then
            call SetPlayerAlliance(ai_player, p, ALLIANCE_HELP_REQUEST,  true)
            call SetPlayerAlliance(ai_player, p, ALLIANCE_HELP_RESPONSE, true)
            call SetPlayerAlliance(ai_player, p, ALLIANCE_SHARED_XP,     true)
            call SetPlayerAlliance(ai_player, p, ALLIANCE_SHARED_SPELLS, true)
            call SetPlayerAlliance(ai_player, p, ALLIANCE_SHARED_VISION, true)
            call SetPlayerAlliance(ai_player, p, ALLIANCE_SHARED_CONTROL, true)
            call SetPlayerAlliance(ai_player, p, ALLIANCE_SHARED_ADVANCED_CONTROL, true)
          endif
          set i = i + 1
        endloop
        if not no_ai_ally then
          set wood_exchange_level = 0
          set gold_exchange_level = 0
          call RemoveFromOwnForce(ai_player)
          call ExchangeOnce()
        endif
        if not humanPlayerAllys and sharedRacePlayer != null then
          loop
            set u = FirstOfGroup(g)
            exitwhen u == null
            if not IsUnitHidden(u) then
              call SetUnitOwner(u, sharedRacePlayer, true)
            else
              call KillUnit(u)
            endif
            call GroupRemoveUnit(g, u )
          endloop
        endif
        call RemovePlayer(ai_player, PLAYER_GAME_RESULT_DEFEAT)
        set p = null
      endif
      set player_defeated = true
      call DestroyGroup(g)
      set g = null
      //if not destroy_buildings_on_defeat then
        //call SetPlayerAlliance(ai_player, Player(PLAYER_NEUTRAL_AGGRESSIVE), ALLIANCE_PASSIVE, true)  // trigger the victory/defeat recognition triggers
        //call SetPlayerAlliance(ai_player, Player(PLAYER_NEUTRAL_AGGRESSIVE), ALLIANCE_PASSIVE, false)
      //endif
    endif
//    if end_ai then
//      call PauseCompAI(ai_player,true)
//    endif
endfunction

function Defeated takes nothing returns nothing
  if not (no_ai_ally and not humanPlayerAllys) then
    call Chat(C_Goldproblem)
    if ask_for_gold == false then
      set ask_for_gold = true
      return
    elseif GetGold() >= gold_problem_level then
      set ask_for_gold = false
      call Chat(C_Thanks)
      set desperation_assault = false
      return
    endif
  endif
  if p_surrender[profile] >= 3 and FoodUsed() < 15 and not (no_ai_ally and not humanPlayerAllys) then
    call KillYourself(no_ai_ally) // If no resources, and easily surrender just give up
  else
    if SaveYourself() then
      return
    endif
    set desperation_assault = true
  endif
endfunction

function CheckDefeated takes nothing returns nothing
  local integer hall_count = TownCount(racial_hall[1])
  local integer hall_cost = GetUnitGoldCost2(racial_hall[1])
  local integer expa_cost = GetUnitGoldCost2(racial_expansion)
  local integer expa_count = TownCount(racial_expansion)
  local integer expa_done_count = TownCountDone(racial_expansion)
  local integer worker_cost = GetUnitGoldCost2(racial_peon)
  local integer worker_count = TownCount(racial_peon)
  local integer farm_food = GetFoodMade(old_id[racial_farm])
  local integer farm_count = TownCount(racial_farm)
  local integer farm_cost = GetUnitGoldCost2(racial_farm)
  local integer food_use = FoodUsed()
  local integer gold = GetGold()
  local integer mines = GetMinesOwned()
  local integer agg = p_surrender[profile]
  local group g = CreateGroup()
  local unit u = null
  local player p = null
  local real enemy_sum = 0
  local real player_sum = GetOwnStrength()
  local real ally_sum = 0
  local integer i = 0

  if disable_surrender then
    set agg = 0
  endif

  if town_threatened then
    set enemy_sum = army_strength[town_threat_army[most_threatened_town]]
  else
    call GroupEnumUnitsInRange(g,GetLocationX(home_location),GetLocationY(home_location),front_base_distance,null)
    set g = SelectByPlayer(g, Player(PLAYER_NEUTRAL_AGGRESSIVE), false)
    set g = SelectByPlayer(g, Player(PLAYER_NEUTRAL_PASSIVE), false)
    set g = SelectByHidden(g, false)  // towerrush will create hidden unit
    set g = SelectByAlive(g, true)
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null
      if IsPlayerEnemy(ai_player, GetOwningPlayer(u)) then
        set enemy_sum = enemy_sum + GetUnitStrength(u)
      endif
      call GroupRemoveUnit(g,u)
    endloop
  endif
  call DestroyGroup(g)
  set g = null

  loop
    exitwhen i >= c_ally_total
    set p = ally_force[i]
    if GetPlayerSlotState(p) == PLAYER_SLOT_STATE_PLAYING then
      set ally_sum = ally_sum + GetPlayerStrength(p)
    endif
    set i = i + 1
  endloop
  set ally_sum = ally_sum + player_sum
  set p = null
// Have nothing left checks
  if GetPlayerUnitCount(ai_player, true) == 0 and GetPlayerStructureCount(ai_player, true) == 0 then
    call KillYourself(no_ai_ally)
    return
  endif

  if food_use == 0 and hall_count == 0 then
    if agg <= 0 and no_ai_ally and not humanPlayerAllys then
      if SaveYourself() then
        return
      endif
      set desperation_assault = true
    else
      call KillYourself(no_ai_ally)
      return
    endif
  endif

  if food_use < 6 and hall_count == 0 and worker_count == 0 then
    if agg <= 1 and no_ai_ally and not humanPlayerAllys then
      if SaveYourself() then
        return
      endif
      set desperation_assault = true
    else
      call KillYourself(no_ai_ally)
      return
    endif
  endif

  // Overwhelmed
  if agg > 1 and enemy_sum > ((player_sum + ally_sum + 5) * (5 - (agg - 2))) and hall_count <= 1 then // each agg above 2 increases give up chance by 1 multiplicative factor
    call KillYourself(no_ai_ally)
    return
  endif

  // Key Resource issues
  if hall_count == 0 and gold < hall_cost then
    set gold_problem_level = hall_cost
    call Defeated()
    return
  endif
  if (farm_count * farm_food) < food_use and mines == 0 and gold < farm_cost and worker_count == 0 then
    set gold_problem_level = farm_cost
    call Defeated()
    return
  endif
  if worker_count == 0 and gold < worker_cost and hall_count >= 1 then
    set gold_problem_level = worker_cost
    call Defeated()
    return
  endif
  if mines == 0 and gold < expa_cost and (expa_count - expa_done_count) == 0 and player_sum < 10 then
    set gold_problem_level = expa_cost
    call Defeated()
    return
  endif

endfunction

function SumForceState takes playerstate ps returns integer
  local integer i = 0
  local integer sum = 0
  loop
    exitwhen i >= force_number
    set sum = sum + GetPlayerState(own_force[i],ps)
    set i = i + 1
  endloop
  return sum
endfunction

function SumForceFood takes nothing returns integer
  return SumForceState(PLAYER_STATE_RESOURCE_FOOD_USED)
endfunction

function SumForceGold takes nothing returns integer
  return SumForceState(PLAYER_STATE_RESOURCE_GOLD)
endfunction

function CheckDefeatedForce takes nothing returns nothing
  if SumForceFood() == 0 and SumForceGold() <= 100 then
    call KillYourself(true)
  endif
endfunction

function DetectDefeatJob takes nothing returns nothing
  local integer i = 0
  local player p = null
  local race r = GetPlayerRace(ai_player)
  call DisplayToAllJobDebug("DETECT_DEFEAT Job Start")
  set no_ai_ally = true
  loop
    exitwhen i >= c_ally_total
    set p = ally_force[i]
    if GetPlayerSlotState(p) == PLAYER_SLOT_STATE_PLAYING then
      if GetPlayerController(p) == MAP_CONTROL_USER then
        set humanPlayerAllys = true
      else
        set no_ai_ally = false
        if r == GetPlayerRace(p) then
          set sharedRacePlayer = p
        endif
      endif
    endif
    set i = i + 1
  endloop
  call CheckDefeated()
  call CheckDefeatedForce()
  if desperation_assault == true and (TownCount(race_manual_loading_mine) > 0 or not HallsCompleted(racial_expansion) or GetMinesOwned() > 0) then
    set desperation_assault = false
  endif
  if not player_defeated and not pathing_done then
    call TQAddJob(13 * sleep_multiplier, DETECT_DEFEAT, 0)
  endif
  set p = null
  set r = null
endfunction
#ENDIF