#IFDEF GLOBAL
    unit double_expansion_target = null
    boolean double_expansion_ally_present = false
    boolean double_expansion_enemy_present = false
#ELSE
//============================================================================
// Detect double expansion
//============================================================================

function GetOtherExpansionNearby takes unit ru, real tx, real ty returns unit
  local group g = CreateGroup()
  local unit u = null
  local player p = null
  //local integer id = 0
  set ru = null
  call GroupEnumUnitsInRange(g, tx, ty, expansion_taken_radius, null)
  set g = SelectByPlayer(g, ai_player, false)
  set g = SelectByAlive2(g, true)
  set g = SelectByHidden(g, false)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    set p = GetOwningPlayer(u)
    if p != Player(PLAYER_NEUTRAL_PASSIVE) and p != Player(PLAYER_NEUTRAL_AGGRESSIVE) then
      if IsUnitType(u, UNIT_TYPE_TOWNHALL) == true or IsUnitGoldMine(u) then //or id == oUNDEAD_MINE then//id == oTOWN_HALL or id == oKEEP or id == oCASTLE or id == oUNDEAD_MINE or id == oGREAT_HALL or id == oSTRONGHOLD or id == oFORTRESS or id == oTREE_LIFE or id == oTREE_AGES or id == oTREE_ETERNITY then
        call DestroyGroup(g)
        set g = null
        set ru = u
        set u = null
        set p = null
        return ru
      elseif IsPlayerEnemy(p, ai_player) and IsUnitType(u, UNIT_TYPE_STRUCTURE) == true then
        set ru = u
      endif
    endif
    call GroupRemoveUnit(g,u)
  endloop
  call DestroyGroup(g)
  set g = null
  set p = null
  return ru
endfunction

function CheckDoubleExpansionsClaimedInArea takes unit ru returns boolean
  local group g = CreateGroup()
  local unit u = null
  local player p = null
  local integer minecount = 0
  local integer claimedMines = 0
  set double_expansion_ally_present = false
  set double_expansion_enemy_present = false
  call GroupEnumUnitsInRange(g, GetUnitX(ru), GetUnitY(ru), expansion_taken_radius, null)
  if GetOwningPlayer(ru) == ai_player and IsUnitType(ru, UNIT_TYPE_TOWNHALL) then
    call GroupRemoveUnit(g,ru)
    set claimedMines = claimedMines + 1
  endif
  set g = SelectByAlive2(g, true)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    set p = GetOwningPlayer(u)
    if p != Player(PLAYER_NEUTRAL_AGGRESSIVE) then
      if IsPlayerEnemy(p, ai_player) and IsUnitType(u, UNIT_TYPE_STRUCTURE) then
        set double_expansion_target = u
        set double_expansion_enemy_present = true
      endif
      if IsUnitGoldMine(u) then
        if p != Player(PLAYER_NEUTRAL_PASSIVE) then
          if IsUnitType(u, UNIT_TYPE_TOWNHALL) then
            set claimedMines = claimedMines + 1
          endif
          if IsPlayerAlly(ai_player, p) then
            set double_expansion_ally_present = true
          else
            set double_expansion_target = u
            set double_expansion_enemy_present = true
          endif
        endif
        if not IsUnitType(u, UNIT_TYPE_TOWNHALL) then
          set minecount = minecount + 1
        endif
      endif
    endif
    call GroupRemoveUnit(g,u)
  endloop
  call DestroyGroup(g)
  set g = null
  set p = null
  call Trace("Total Mines:" + Int2Str(minecount) + " Claimed Mines:" + Int2Str(claimedMines))
  return minecount > 0 and claimedMines > minecount
endfunction

// Beware Does not include own halls and mines in this check
function GetTotalClaimedMinesNearby takes real tx, real ty returns integer
  local group g = CreateGroup()
  local unit u = null
  local integer count = 0
  call GroupEnumUnitsInRange(g, tx, ty, expansion_taken_radius, null)
  set g = SelectByPlayer(g, ai_player, false)
  set g = SelectByPlayer(g, Player(PLAYER_NEUTRAL_PASSIVE), false)
  set g = SelectByPlayer(g, Player(PLAYER_NEUTRAL_AGGRESSIVE), false)
  set g = SelectByAlive2(g, true)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if IsUnitType(u, UNIT_TYPE_TOWNHALL) == true or IsUnitGoldMine(u) then //or id == oUNDEAD_MINE then//id == oTOWN_HALL or id == oKEEP or id == oCASTLE or id == oUNDEAD_MINE or id == oGREAT_HALL or id == oSTRONGHOLD or id == oFORTRESS or id == oTREE_LIFE or id == oTREE_AGES or id == oTREE_ETERNITY then
      set count = count + 1
    endif
    call GroupRemoveUnit(g,u)
  endloop
  call DestroyGroup(g)
  set g = null
  call Trace("Total Claimed Mines by other players:" + Int2Str(count))
  return count
endfunction

function GetTotalMinesNearby takes real tx, real ty returns integer
  local group g = CreateGroup()
  local unit u = null
  local player p = null
  local integer count = 0
  call GroupEnumUnitsInRange(g, tx, ty, expansion_taken_radius, null)
  set g = SelectByAlive2(g, true)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    set p = GetOwningPlayer(u)
    if IsUnitGoldMine(u) and p != Player(PLAYER_NEUTRAL_PASSIVE) and p != Player(PLAYER_NEUTRAL_AGGRESSIVE) then
      set count = count + 1
    endif
    call GroupRemoveUnit(g,u)
  endloop
  call DestroyGroup(g)
  set g = null
  set p = null
  call Trace("Total Mines:" + Int2Str(count))
  return count
endfunction

function CheckDoubleExpansion takes nothing returns nothing
  local group g = CreateGroup()
  local unit u = null
  call GroupEnumUnitsOfPlayer(g, ai_player, null)
  set g = SelectNumberOfId(g, 100, old_id[racial_expansion])
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if CheckDoubleExpansionsClaimedInArea(u) then
      if double_expansion_ally_present then
        //call IssueImmediateOrderById(u, order_cancel)
        call Trace("Ally double expansion detected")
      endif
    endif
    if double_expansion_enemy_present then
      call Trace("Enemy double expansion detected")
    endif
    call GroupRemoveUnit(g,u)
  endloop
  call DestroyGroup(g)
  set g = null
endfunction

function DetectDoubleExpJob takes nothing returns nothing
  call DisplayToAllJobDebug("DETECT_DOUBLE JOB START")
  call CheckDoubleExpansion()
  if not pathing_done then
    call TQAddJob(10 * sleep_multiplier, DETECT_DOUBLE_EXP, 0)
  endif
endfunction
#ENDIF