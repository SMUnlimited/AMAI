#IFDEF GLOBAL
// Block fix states
constant integer BLOCK_CHECK_HOME = 0
constant integer BLOCK_CHECK_HERO_MOVEMENT = 1 
constant integer BLOCK_CHECK_HERO_STRUCTURES = 2
constant integer BLOCK_CHECK_OTHER = 3

// Current state tracking
integer blockstate = BLOCK_CHECK_HOME
integer ancient_move_attempts = 0
location ancient_root_location = Location(0, 0)

// Units involved in fixing blocks
unit blocking_path_unit = null
unit blocking_ancient = null 
unit blocked_unit = null
#ELSE

// ######################## Fix Block ###############################
// Handles different types of pathing blocks:
// 1. Home area blocking
// 2. Hero movement near altar/tavern
// 3. Structure and unit blocking
// 4. Ancient building repositioning
// ##################################################################

function TryAttackTree takes unit u, integer id, location l returns boolean
    if id == 'ebal' or id == 'hmtm' or id == 'ocat' or id == 'umtw' or id == 'ncat' then // Attack ground units
        call RemoveGuardPosition(u)
        call IssuePointOrderLoc(u, "attackground", l)
        call TQAddUnitJob(6, RESET_GUARD_POSITION_ONLY, 0, u)
        call CreateDebugTag("fix block : attack tree", 10, u, 3.00, 1.50)
        return true
    elseif GetUnitAbilityLevel(u, 'AEfn') > 0 or GetUnitAbilityLevel(u, 'ACfr') > 0  then // Force of nature
        call RemoveGuardPosition(u)
        call IssuePointOrderLoc(u, "forceofnature", l)
        call TQAddUnitJob(6, RESET_GUARD_POSITION_ONLY, 0, u)
        call CreateDebugTag("fix block : use skill to tree", 10, u, 3.00, 1.50)
        return true
    endif
    return false
endfunction

function MoveAncient takes unit u returns nothing
    local unit utemp = null
    if GetUnitCurrentOrder(u) != OrderId("root") then
        call RemoveLocation(ancient_root_location)
        set utemp = CreateUnitAtLoc(Player(PLAYER_NEUTRAL_PASSIVE), GetUnitTypeId(u), front_loc[0], 270)
        set ancient_root_location = GetUnitLoc(utemp)
        call RemoveUnit(utemp)
        set utemp = null
        call IssueImmediateOrder(u, "cancel")
        call IssueImmediateOrder(u, "unroot")
    endif
    call CreateDebugTagLoc("fix block : root here", 10, GetLocationX(ancient_root_location), GetLocationY(ancient_root_location), 3.00, 1.50)
    call IssuePointOrderLoc(u, "root", ancient_root_location)
    set ancient_move_attempts = ancient_move_attempts + 1
endfunction

function RootAncient takes nothing returns nothing
    call IssuePointOrder(blocking_ancient, "root", GetUnitX(blocking_ancient), GetUnitY(blocking_ancient))
    set blocking_ancient = null
endfunction

function TeleportFixBlock takes unit u, player p returns nothing
    local group g = null
    local location l = null
    local real x = GetLocationX(home_location)
    local real y = GetLocationY(home_location)
    if p != ai_player then
        set g = CreateGroup()
        set l = GetPlayerStartLocationLoc(p)
        call GroupEnumUnitsInRangeOfLoc(g, l, 850, null)
        set g = SelectUnittype(g, UNIT_TYPE_TOWNHALL, true)
        set g = SelectByPlayer(g, p, true)
        set g = SelectByHidden(g, false)
        set g = SelectByAlive(g, true)
        if FirstOfGroup(g) != null then
            set x = GetLocationX(l)
            set y = GetLocationY(l)
        endif
        call RemoveLocation(l)
        set l = null
        call DestroyGroup(g)
        set g = null
    endif
    if GetSlotsFreeOnUnit(u) == 0 then
        call SetItemPosition(UnitItemInSlot(u, 0), x, y)
    endif
    call UnitUseItemPoint(u, UnitAddItemById(u, old_id[tp_item]), x, y)
endfunction

function TryFixBlockStructure takes location l, real range returns nothing
    local group g = CreateGroup()
    local unit u = null
    local unit utemp = null
    local integer i = 0
    call GroupEnumUnitsInRangeOfLoc(g, l, range, null)
    call GroupRemoveUnit(g, expansion_peon)
    call GroupRemoveUnit(g, blocking_path_unit)
    loop
        set u = FirstOfGroup(g)
        exitwhen u == null or blocking_ancient != null or (not race_ancient_expansion_available and utemp != null)
        if GetOwningPlayer(u) == ai_player and IsUnitType(u, UNIT_TYPE_STRUCTURE) and not IsUnitGoldMine(u) and not IsUnitType(u, UNIT_TYPE_TOWNHALL) and UnitAlive(u) and not IsUnitHidden(u) then
            if IsUnitType(u, UNIT_TYPE_ANCIENT) then
                call MoveAncient(u)
                set blocking_ancient = u
            endif
            set i = GetUnitTypeId(u)
            if blocking_ancient == null and utemp == null and GetUnitCount(i) > 1 and i != old_id[racial_expansion] and i != old_id[racial_altar] and i != old_id[racial_lumber] then
                set utemp = u
            endif
        endif
        call GroupRemoveUnit(g, u)
    endloop
    if blocking_ancient == null and utemp != null then
        call CreateDebugTag("fix block : kill build", 10, utemp, 3.00, 1.50)
        call SetPlayerGold(ai_player, GetPlayerState(ai_player, PLAYER_STATE_RESOURCE_GOLD) + GetUnitGoldCost(GetUnitTypeId(utemp)))
        call SetPlayerWood(ai_player, GetPlayerState(ai_player, PLAYER_STATE_RESOURCE_LUMBER) + GetUnitWoodCost(GetUnitTypeId(utemp)))
        call KillUnit(utemp)
    endif
    call DestroyGroup(g)
    set g = null
    set u = null
    set utemp = null
endfunction

function TryFixBlockRemoveTree takes location l, real range, boolean action returns nothing
    local group g = CreateGroup()
    local unit u = null
    local integer i = 0
    call GroupEnumUnitsInRangeOfLoc(g, l, range, null)
    call GroupRemoveUnit(g, expansion_peon)
    call GroupRemoveUnit(g, blocking_path_unit)
    if action then
        // attack tree
        loop
            set u = FirstOfGroup(g)
            exitwhen u == null
            if GetOwningPlayer(u) == ai_player and not IsUnitType(u, UNIT_TYPE_PEON) and not IsUnitType(u, UNIT_TYPE_STRUCTURE) and UnitAlive(u) and not IsUnitHidden(u) and not IsUnitBuying(u) and not IsUnitLoaded(u) and not IsUnitInvisible(u, Player(PLAYER_NEUTRAL_AGGRESSIVE)) then
                exitwhen TryAttackTree(u, GetUnitTypeId(u), l)
            endif
            call GroupRemoveUnit(g, u)
        endloop
    else
        // move peon to tree
        loop
            set u = FirstOfGroup(g)
            exitwhen u == null or i > 2
            if GetOwningPlayer(u) == ai_player and IsUnitType(u, UNIT_TYPE_PEON) and UnitAlive(u) and not IsUnitHidden(u) and GetUnitCurrentOrder(u) == OrderId("harvest") and not IsUnitBuying(u) and not IsUnitLoaded(u) then
                call RemoveGuardPosition(u)
                call IssuePointOrderLoc(u, "move", l)
                call TQAddUnitJob(4, RESET_GUARD_POSITION_ONLY, 0, u)
                call CreateDebugTag("fix block : harvest tree", 10, u, 3.00, 1.50)
                set i = i + 1
            endif
            call GroupRemoveUnit(g, u)
        endloop
    endif
    call DestroyGroup(g)
    set g = null
    set u = null
endfunction

function TryFixBlockMove takes location l, real range, boolean action returns nothing
    local group g = CreateGroup()
    local unit u = null
    local player p = null
    local boolean array allyhero
    call GroupEnumUnitsInRangeOfLoc(g, l, range, null)
    call GroupRemoveUnit(g, expansion_peon)
    call GroupRemoveUnit(g, blocking_path_unit)
    if action then
        loop
            set u = FirstOfGroup(g)
            exitwhen u == null
            set p = GetOwningPlayer(u)
            if blocked_unit == null and p == ai_player and not IsUnitType(u, UNIT_TYPE_PEON) and not IsUnitType(u, UNIT_TYPE_STRUCTURE) and not IsUnitType(u, UNIT_TYPE_HERO) and not IsUnitType(u, UNIT_TYPE_FLYING) and GetUnitTypeId(u) != 'ngir' and UnitAlive(u) and not IsUnitHidden(u) and not IsUnitBuying(u) and IsStandardUnit(u) and not IsUnitLoaded(u) then
                set blocked_unit = u
            elseif p != ai_player and IsPlayerAlly(ai_player, p) and not allyhero[GetPlayerId(p)] and GetPlayerController(p) == MAP_CONTROL_COMPUTER and IsUnitType(u, UNIT_TYPE_HERO) and UnitAlive(u) and not IsUnitHidden(u) and not IsUnitLoaded(u) and not IsUnitType(u, UNIT_TYPE_FLYING) then
                call CreateDebugTagLoc("fix block : ally hero block", 10, GetUnitX(u), GetUnitY(u), 3.00, 1.50)
                call TeleportFixBlock(u, p)
                set allyhero[GetPlayerId(p)] = true
            endif
            call GroupRemoveUnit(g, u)
        endloop
    else
        // Move units to the front
        loop
            set u = FirstOfGroup(g)
            exitwhen u == null
            if GetOwningPlayer(u) == ai_player and not IsUnitType(u, UNIT_TYPE_PEON) and not IsUnitType(u, UNIT_TYPE_STRUCTURE) and not IsUnitType(u, UNIT_TYPE_FLYING) and GetUnitTypeId(u) != 'ngir' and UnitAlive(u) and not IsUnitHidden(u) and not IsUnitBuying(u) and not IsUnitLoaded(u) and not IsUnitInvisible(u, Player(PLAYER_NEUTRAL_AGGRESSIVE)) then
                if IsStandardUnit(u) then
                elseif GetUnitCurrentOrder(u) != OrderId("cannibalize") then
                    call IssuePointOrderLoc(u, "move", front_loc[0])
                    call CreateDebugTagLoc("fix block : move aside", 10, GetUnitX(u), GetUnitY(u), 3.00, 1.50)
                endif
            endif
            call GroupRemoveUnit(g, u)
        endloop
    endif
    call DestroyGroup(g)
    set g = null
    set u = null
    set p = null
endfunction

function RemoveBlockPathUnit takes nothing returns nothing
    if blocking_path_unit != null then
        call RemoveUnit(blocking_path_unit)
    endif
    set blocking_path_unit = null
endfunction

function FindTree takes real x, real y returns nothing
    call RemoveBlockPathUnit()
    call TryFixBlockMove(home_location, 1000, false)
    set blocking_path_unit = CreatePathingUnitFull(blocking_path_unit, ai_player, 'ewsp', x, y)
    call UnitApplyTimedLife(blocking_path_unit, 'BTLF', 18)
    call SetUnitMoveSpeed(blocking_path_unit, 300)
    call IssueImmediateOrder(blocking_path_unit, "autoharvestlumber")
endfunction

function ShouldSkipBlockCheck takes nothing returns boolean
    return TownThreatened() or town_threatened or not attack_running or teleporting or not pathing_done or water_map or GetPlayerStructureCount(ai_player, true) < 8
endfunction

function CleanupBlockFix takes nothing returns nothing
    if blocking_ancient != null and UnitAlive(blocking_ancient) then
        call RootAncient()
    endif
    call RemoveBlockPathUnit()
    set blocked_unit = null
endfunction

function FixBlockJob takes nothing returns nothing
    local location l = null
    local unit u = null
    local integer i = 0
    
    if ShouldSkipBlockCheck() then
        call CleanupBlockFix()
        call TQAddJob(240, FIX_BLOCK, 0)
        return
    endif
    
    if blocking_ancient != null and UnitAlive(blocking_ancient) then
        if ancient_move_attempts > 3 then
            call RootAncient()
        else
            call MoveAncient(blocking_ancient)
            call TQAddJob(4, FIX_BLOCK, 0)
            return
        endif
    endif
    if blocked_unit != null and DistanceBetweenPoints_kd(home_location, GetUnitLoc(blocked_unit)) < front_base_distance then
        call CreateDebugTag("fix block : hero block at here", 10, blocked_unit, 3.00, 1.50)
        call FindTree(GetUnitX(blocked_unit), GetUnitY(blocked_unit))
        set blocked_unit = null
        call TQAddJob(1, FIX_BLOCK, 0)  // tree must close
        return
    elseif blocking_path_unit != null and DistanceBetweenPoints_kd(home_location, GetUnitLoc(blocking_path_unit)) < front_base_distance then
        if GetUnitTypeId(blocking_path_unit) == 'ewsp' then
            set l = GetUnitLoc(blocking_path_unit)
            if GetUnitCurrentOrder(blocking_path_unit) == OrderId("harvest") then
                // Found tree
                call TryFixBlockRemoveTree(l, 1200, race_no_wood_harvest or GetPlayerRace(ai_player) == RACE_NIGHTELF)
            else
                // Didn't find tree
                call TryFixBlockStructure(l, 550)
            endif
            call RemoveBlockPathUnit()
            call RemoveLocation(l)
            set l = null
        else
            call CreateDebugTag("fix block : unit block at here", 10, blocking_path_unit, 3.00, 1.50)
            call FindTree(GetUnitX(blocking_path_unit), GetUnitY(blocking_path_unit))
        endif
        call TQAddJob(2, FIX_BLOCK, 0)
        return
    endif    
    call RemoveBlockPathUnit()
    set blocking_ancient = null
    set blocked_unit = null
    set ancient_move_attempts = 0

    call DisplayToAllJobDebug("Fix_Block Job Start, state : " + Int2Str(blockstate))
    
    call TryFixBlockMove(home_location, 1200, blockstate == BLOCK_CHECK_OTHER) // check other block , maybe pathing sys will always led unit go one loc , but loc blind alley , this block unable to handle , like map lastmanstanding - when hero no block , but maybe new train unit wiil go tavern

    if blockstate == BLOCK_CHECK_HOME then
        // determine location to send pathing unit to
        set l = GetPlayerStartLocationLoc(enemy_force[0])
        if l == null or DistanceBetweenPoints(home_location, l) < front_base_distance then
          if l != null then
            call RemoveLocation(l)
            set l = null
          endif
          set i = GetRandomInt(0, NEUTRAL_COUNT - 1)
          if nearest_neutral[i] != null then
            set l = GetUnitLoc(nearest_neutral[i])
            if DistanceBetweenPoints(home_location, l) < front_base_distance then
              call RemoveLocation(l)
              set l = null
            endif
          endif
        endif
        if l != null then
          set blocking_path_unit = CreatePathingUnitFull(blocking_path_unit, ai_player, 'hbew', GetLocationX(home_location), GetLocationY(home_location))  // must big unit and can not revive
          call UnitApplyTimedLife(blocking_path_unit, 'BTLF', 18)  // Prevent player defeat unit not remove or home too close then unit block pther palyer
          call IssuePointOrderLoc(blocking_path_unit, "move", l)
          call RemoveLocation(l)
          set l = null
        endif
    elseif blockstate == BLOCK_CHECK_HERO_MOVEMENT then
        // Handling hero movement
    elseif blockstate == BLOCK_CHECK_HERO_STRUCTURES then // 1 wait hero move , 2 check hero - altar block or tavern to close maybe block , like map lastmanstanding
        loop
            exitwhen i > 3
            set u = hero_unit[i]
            if u != null and UnitAlive(u) and not IsUnitLoaded(u) and not IsUnitBuying(u) and IsStandardUnit(u) and (DistanceBetweenPoints_kd(home_location, GetUnitLoc(u)) < front_base_distance or (nearest_neutral[NEUTRAL_TAVERN] != null and DistanceBetweenPoints_kd(home_location, GetUnitLoc(nearest_neutral[NEUTRAL_TAVERN])) < front_base_distance and DistanceBetweenUnits(u, nearest_neutral[NEUTRAL_TAVERN]) < 1000)) then
              call CreateDebugTagLoc("fix block : hero block", 10, GetUnitX(u), GetUnitY(u), 3.00, 1.50)
              call TeleportFixBlock(u, ai_player)
              set i = 3  // once check one
            endif
            set i = i + 1
        endloop
        set u = null
    endif

    set blockstate = blockstate + 1
    if blockstate > BLOCK_CHECK_OTHER then
        set blockstate = BLOCK_CHECK_HOME
    endif

    call TQAddJob(240 - Min(blockstate, 1) * 230, FIX_BLOCK, 0)
endfunction

#ENDIF
