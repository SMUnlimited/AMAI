#IFDEF GLOBAL
boolean fixbuild = false
#ELSE

// ######################## Fix u #################
// #  Created by JZY 11/06/24.
// #  fix some mine to close map , AI can not u at home , but u here player home , if the player not ally , AI maybe can not u .
// ##################################################################
function FixBuildJob takes nothing returns nothing
  local group g = CreateGroup()
  local unit u = null
  local unit build = null
  local integer id = 0
  local real x = 0
  local real y = 0
  call DisplayToAllJobDebug("Fix Job Start")
  call GroupEnumUnitsInRangeOfLoc(g, home_location, 3000, null)
  call GroupRemoveUnit(g, expansion_peon)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if GetOwningPlayer(u) == ai_player and not IsUnitHidden(u) and IsUnitType(u, UNIT_TYPE_PEON) and not IsUnitLoaded(u) and UnitAlive(u) and not IsUnitBuying(u) then
      if DistanceBetweenPoints_kd(home_location,GetUnitLoc(u)) > 800 or GetUnitState(u, UNIT_STATE_LIFE) < GetUnitState(u, UNIT_STATE_MAX_LIFE) then
        set id = GetUnitCurrentOrder(u)
        if id <= 852678 then
          call IssuePointOrderByIdLoc(u, 851987, home_location)
          call CreateDebugTag("Fix Job : peon go home", 10, u, 4.00, 2.00)
        elseif id != old_id[racial_rushcreep] and id != old_id[racial_expansion] then
          set build = CreatePathingUnitFull(build, ai_player, id, GetLocationX(home_location) + ISign() * GetRandomReal(500, 1000), GetLocationY(home_location) + ISign() * GetRandomReal(-1000, -500))
          set x = GetUnitX(build)
          set y = GetUnitY(build)
          call RemoveUnit(build)
          call IssuePointOrderById(u, id, x, y)
          call CreateDebugTag("Fix Job : peon build", 10, u, 4.00, 2.00)
        endif
      endif
    endif
    call GroupRemoveUnit(g, u)
  endloop
  call DestroyGroup(g)
  set g = null
  set build = null
  if GetUnitCountDone(old_id[racial_farm]) < 2 then
    call TQAddJob(2, FIX_BUILD, 0)
  endif
endfunction
#ENDIF