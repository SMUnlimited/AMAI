#IFDEF GLOBAL
  unit secondmine = null
#ELSE
function PeonMineCheck takes unit mine, boolean unloadpeon returns boolean
  local group g = CreateGroup()
  local group tempg = null
  local location unitloc = GetUnitLoc(mine)
  local unit u = null
  local unit savewisp = null
  local integer i = 0
  local integer peon = TownCount(racial_peon)
  local integer peond = TownCountDone(racial_peon)
  local integer delaywisps = Min(ver_optimal_gold - 1,peond)
  if peond >= Max(ver_optimal_gold,6) then
    set delaywisps = ver_optimal_gold
  endif
  if race_manual_loading then
    call GroupEnumUnitsOfPlayer(g, ai_player, null)
    set g = SelectById(g, old_id[race_manual_loading_wisp], true)
    set g = SelectByAlive(g, true)
    set tempg = CreateGroup()
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null
      if IsUnitInTransport(u, mine) then
        set savewisp = u
        set i = i + 1
      elseif not IsUnitHidden(u) then
        call GroupAddUnit(tempg, u)
      endif
      call GroupRemoveUnit(g, u)
    endloop
    if FoodSpace() <= 0 and i >= 3 and unloadpeon == false and savewisp != null and peon <= 4 and peon == peond then  // no foodspace , no peon(at least keep 2 harvest mine) , need one harvest mine peon build Farms
      set delaywisps = 2
      set unloadpeon = IssueTargetOrder(mine, "unload", savewisp)
    elseif not hero_built[1] and peon < 8 then
      set delaywisps = ver_optimal_gold - 2
      set i = Min(i,delaywisps)
    endif
    if i < delaywisps then
      set tempg = SelectByLoaded(tempg, false)
      set tempg = SelectUnittype(tempg, UNIT_TYPE_STRUCTURE, false)  //  Preventing Tree Transformation
      set tempg = GetNearestSubGroupOfGroup(tempg, unitloc, delaywisps - i)
      //call GroupRemoveGuardPositionInstant(g) // this gets wisps to come off the trees.
      //call GroupTargetOrder(g, "harvest", mine)
      loop  //use accurate quantity control , prevent any wips harvestmine , but mine no vacancies
        set u = FirstOfGroup(tempg)
        exitwhen u == null or i >= delaywisps
        call IssueTargetOrder(u, "harvest", mine)
        set i = i + 1
        call GroupRemoveUnit(tempg, u)
      endloop
    endif
    call DestroyGroup(tempg)
    set tempg = null
    set savewisp = null
  elseif race_uses_mine_expansion then
    call GroupEnumUnitsOfPlayer(g, ai_player, null)
    set g = SelectUnittype(g, UNIT_TYPE_PEON, true)
    set g = SelectByAlive(g, true)
    set g = SelectByHidden(g, false)
    set tempg = CreateGroup()
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null or i >= delaywisps
      if GetUnitCurrentOrder(u) == OrderId("harvest") and DistanceBetweenUnits(u,mine) < 225 then  // UD harvest gold max Distance is 221
        set i = i + 1
      elseif GetUnitCurrentOrder(u) == 0 and not IsUnitBuying(u) and not IsUnitInGroup(u, unit_zepplin_move) then
        call GroupAddUnit(tempg,u)  // prevent the mine harvest peon more than 5
      endif
      call GroupRemoveUnit(g, u)
    endloop
    if i < delaywisps then
      loop
        set u = FirstOfGroup(tempg)
        exitwhen u == null or i >= delaywisps
        call IssueTargetOrder(u, "harvest", mine)
        set i = i + 1
        call GroupRemoveUnit(tempg, u)
      endloop
    endif
    call DestroyGroup(tempg)
    set tempg = null
  else  //human and orc
    call GroupEnumUnitsOfPlayer(g, ai_player, null)
    set g = SelectUnittype(g, UNIT_TYPE_PEON, true)
    set g = SelectByAlive(g, true)
    set g = SelectByHidden(g, false)
    set g = GetNearestSubGroupOfGroup(g, home_location, 10)
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null or i >= delaywisps
      if (GetUnitCurrentOrder(u) == 0 or GetUnitCurrentOrder(u) == OrderId("harvest")) and not IsUnitBuying(u) and not IsUnitInGroup(u, unit_zepplin_move) then  // no get other order peon , maybe the peon go buy unit or build some
        call IssueTargetOrder(u, "harvest", mine)
      endif
      call GroupRemoveUnit(g, u)
      set i = i + 1
    endloop
    set i = delaywisps  //human and orc no need full
  endif
  call RemoveLocation(unitloc)
  set unitloc = null
  call DestroyGroup(g)
  set g = null
  set u = null
  return i < delaywisps
endfunction

function HarvestCheckJob takes nothing returns nothing
  local group g = null
  local unit u = null
  local integer i = 0
  local boolean mines_not_full = true
  local boolean unloadpeon = false  // if no food , race_manual_loading need peon unload mine , but just need once unload
  //  call DisplayToAll("Harvest Start")
  if first_town_mine == -1 then
    return  // home_location no more mine , ORC and HUMAN no need run
  endif
  call DisplayToAllJobDebug("HARVEST CHECK Job Start")
  set g = CreateGroup()
  if race_manual_loading then
    call GroupEnumUnitsOfPlayer(g, ai_player, null)
    set g = SelectNumberOfId(g, 100,  old_id[race_manual_loading_mine])
  elseif not TownThreatened() then
    if race_uses_mine_expansion then
      call GroupEnumUnitsInRangeOfLoc(g, home_location, 1500, null)
      set g = SelectByPlayer(g, ai_player, true)
      set g = SelectById(g, old_id[racial_expansion], true)
    elseif GetResourceAmount(secondmine) <= 0 and TownCountDone(racial_peon) > 10 then  //human and orc
      call GroupEnumUnitsInRangeOfLoc(g, home_location, 1500, null)
      call GroupRemoveUnit(g,own_town_mine[0])
      set g = SelectById(g, old_id[GOLD_MINE], true)
      loop
        set u = FirstOfGroup(g)
        exitwhen u == null
        if GetResourceAmount(u) > i then  // find Resource max mine
          set i = GetResourceAmount(u)
          set secondmine = u
        endif
        call GroupRemoveUnit(g, u)
      endloop
      call GroupAddUnit(g, secondmine)  // only first take secondmine run PeonMineCheck , Prevention have more peon harvest
    endif
  endif
  set i = 0
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null or i >= 3
    if UnitAlive(u) then
      set mines_not_full = PeonMineCheck(u,unloadpeon == true) and mines_not_full
      set i = i + 1  //prevent all peon harvest mine , not peon harvest wood
    endif
    call GroupRemoveUnit(g, u)
  endloop
  call DestroyGroup(g)
  set g = null
  set u = null
  if mines_not_full then
    call TQAddJob(4, HARVEST_CHECK, 0)
  else
    call TQAddJob(40, HARVEST_CHECK, 0)
  endif
endfunction
#ENDIF