#IFDEF GLOBAL
  integer item_exp_state = 0
  unit itemhero = null
  boolean item_attack_running = false
  boolean expitem_buy = false
  location item_exp_guard_loc = null
#ELSE

function ItemExpansionJob takes nothing returns nothing
  local unit u = null
  local unit temp = null
  local location loc = null
  local location item_exp_loc = null
  local item exp_item = null
  local integer time_next_try = 5
  if (itemhero != null and GetUnitState(itemhero, UNIT_STATE_LIFE) <= 0) or town_threatened or current_expansion == null then
    call RecycleGuardPosition(itemhero)
    call Trace("Expansion cannot or no Expansion")  // no call ChooseExpansion() , this is passive expansion , avoidance buy repeat item
    set item_attack_running = false
    set item_expanding = false
    set expitem_buy = false
    set item_exp_state = 0
    set itemhero = null
    return
  endif
  set exp_time_count = ai_time
  set u = GetExpFoe(u)
  if item_exp_state == 0 then
    call Trace("Expansion Distance: " + Int2Str(R2I(GetExpansionDistance())))
    call Trace("Expansion state 0: Check Expansion Hero and Location")
    if itemhero == null then
      set exp_item = GetItemOfType(exp_item,race_item_expansion_item_id)
      if exp_item != null then
        set itemhero = GetItemHero(exp_item)
      endif
    endif
    if itemhero == null and expitem_buy == false then
      set u = null
      if GetGold() < gold_price[race_item_expansion_item_id] + 120 or GetWood() < wood_price[race_item_expansion_item_id] + 80 then
        call Trace("Expansion no gold or wood")
        set item_expanding = false
        set item_exp_state = 0
        set itemhero = null
        return
      endif
      set shop_ordered = true
      call TQAddJob(5, BUY_ITEM, race_item_expansion_item_id)
      call TQAddJob(20, ITEM_EXPANSION, 0)
      return
    endif
    call SetItemDroppable( GetItemOfTypeOnUnit(race_item_expansion_item_id, itemhero), false )  //prevent droppable
    call SetItemPawnable( GetItemOfTypeOnUnit(race_item_expansion_item_id, itemhero), false )  //can selling
    set expitem_buy = true
    set not_taken_expansion = current_expansion
    if u == null then
      set temp = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[racial_expansion], GetUnitX(current_expansion), GetUnitY(current_expansion), 270.0)
      set item_exp_loc = Location(GetUnitX(temp),GetUnitY(temp))
      call RemoveUnit(temp)
      set temp = null
      set loc = GetUnitLoc(current_expansion)
      call RemoveLocation(item_exp_guard_loc)
      set item_exp_guard_loc = AIGetProjectedLoc(loc, item_exp_loc, 850, 0)  //Guarding position
      call RemoveLocation(loc)
      set loc = null
      call RemoveGuardPosition(itemhero)
      call UnitUseItemPoint(itemhero, GetItemOfTypeOnUnit(race_item_expansion_item_id, itemhero), GetLocationX(item_exp_loc), GetLocationY(item_exp_loc))
      set item_exp_state = 3
      call RemoveLocation(item_exp_loc)
      set item_exp_loc = null
    else
      set item_exp_state = 1
    endif
  elseif item_exp_state == 1 then
    call Trace("Expansion state 1: Wait Rush Expansion")
    if u == null then
      set item_exp_state = 2
      set item_attack_running = false
      set time_next_try = 1
    endif
  elseif item_exp_state == 2 then
    call RemoveGuardPosition(itemhero)
    call UnitUseItemPoint(itemhero, GetItemOfTypeOnUnit(race_item_expansion_item_id, itemhero), GetLocationX(item_exp_loc), GetLocationY(item_exp_loc))
    set item_exp_state = 3
  elseif item_exp_state == 3 then
    call Trace("Expansion state 3: Check Use Item")
    if GetItemOfTypeOnUnit(race_item_expansion_item_id, itemhero) != null and not CheckExpansionTaken (current_expansion) then
      set temp = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[racial_expansion], GetUnitX(current_expansion), GetUnitY(current_expansion), 270.0)
      set item_exp_loc = Location(GetUnitX(temp),GetUnitY(temp))
      call RemoveUnit(temp)
      set temp = null
      call RemoveGuardPosition(itemhero)
      call UnitUseItemPoint(itemhero, GetItemOfTypeOnUnit(race_item_expansion_item_id, itemhero), GetLocationX(item_exp_loc), GetLocationY(item_exp_loc))
      set time_next_try = 1
      call RemoveLocation(item_exp_loc)
      set item_exp_loc = null
    else
      call Trace("Expansion Done")
      call RecycleGuardPosition(itemhero)
      set item_attack_running = false
      set item_expanding = false
      set expitem_buy = false
      set item_exp_state = 0
      set itemhero = null
      call SetItemDroppable( GetItemOfTypeOnUnit(race_item_expansion_item_id, itemhero), true )  //prevent droppable
      call SetItemPawnable( GetItemOfTypeOnUnit(race_item_expansion_item_id, itemhero), true )  //can selling
      set u = null
      return
    endif
  endif
  set u = null
  call TQAddJob(time_next_try, ITEM_EXPANSION, 0)
endfunction
#ENDIF