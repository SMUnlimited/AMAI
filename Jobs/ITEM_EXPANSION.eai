#IFDEF GLOBAL
  integer item_exp_state = 0
  integer item_exp_count = 0
  unit itemhero = null
  //boolean item_attack_ruard = false
  boolean expitem_buy = false
  //location item_exp_guard_loc = Location(0,0)  // no need guard
#ELSE

function ItemExpansionReset takes nothing returns nothing
  if itemhero != null and UnitAlive(itemhero) and IsStandardUnit(itemhero) then
    call RecycleGuardPosition(itemhero)
  endif
  set item_expanding = false
  set expitem_buy = false
  set item_exp_state = 0
  set item_exp_count = 0
  set not_taken_expansion = null
  set itemhero = null
endfunction

function UseExpansionItem takes item t returns boolean
  local unit u = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[racial_expansion], GetUnitX(current_expansion), GetUnitY(current_expansion), 270.0)
  local location loc = GetUnitLoc(current_expansion)
  local location l = GetUnitLoc(u)
  local boolean b = false
  //local location rl = AIGetProjectedLoc(loc, l, 850, 0)  //Guarding position
  call RemoveUnit(u)
  if DistanceBetweenPoints_kd(l, loc) <= race_max_expa_mine_distance then
    set b = UnitUseItemPoint(itemhero, t, GetLocationX(l), GetLocationY(l))
    //call MoveLocation(item_exp_guard_loc, GetLocationX(rl), GetLocationY(rl))
  endif
  set loc = null
  //call RemoveLocation(rl)
  //set rl = null
  call RemoveLocation(l)
  set l = null
  set u = null
  return b
endfunction

function ItemExpansionJob takes nothing returns nothing
  local unit u = null
  local item exp_item = null
  call DisplayToAllJobDebug("ITEM_EXPANSION JOB STARTED")
  if itemhero != null and UnitAlive(itemhero) then
    if GetItemOfTypeOnUnit(race_item_expansion_item_id, itemhero) == null then  //prevent item change hero
      call RecycleGuardPosition(itemhero)
      set itemhero = GetItemHero(GetItemOfType(exp_item,race_item_expansion_item_id))
      set exp_item = null
    endif
    if not IsStandardUnit(itemhero) then
      call Trace("Item expansion : end jon , hero not standard")  // no need ChooseExpansion() , this is passive expansion , avoidance buy repeat item
      call ItemExpansionReset()
      return
    elseif IsUnitBuying(itemhero) and not expitem_buy then  // Priority given to purchase
      call TQAddJob(16, ITEM_EXPANSION, 0)
      return
    endif
  endif
  if town_threatened or current_expansion == null then
    call Trace("Item expansion : Cannot Expansion or no Expansion")  // no need ChooseExpansion() , this is passive expansion , avoidance buy repeat item
    call ItemExpansionReset()
    return
  endif
  set exp_time_count = ai_time
  if item_exp_state == 0 then
    call Trace("Item expansion state 0 - Check Expansion Hero and Location , Distance :" + Int2Str(R2I(GetExpansionDistance())))
    set exp_item = GetItemOfType(exp_item,race_item_expansion_item_id)
    if exp_item == null then
      if expitem_buy == false then
        if shop_ordered or GetGold() < gold_price[race_item_expansion_item_id] + 120 or GetWood() < wood_price[race_item_expansion_item_id] + 80 then
          call Trace("Item expansion state 0 - No gold or wood or buy item job is runing for other item")
          call ItemExpansionReset()
          return
        endif
        set shop_unit = GetOneOfId(shop_unit, ai_player, old_id[racial_shop])
        if shop_unit == null then
          call Trace("Item expansion state 0 - no shop")
          call ItemExpansionReset()
          return
        endif
        set shop_wanted = 1
        set shop_distance_limit = raceshop_distance_limit
        set shop_ordered = true
        set expitem_buy = true
        call TQAddJob(2, BUY_ITEM, race_item_expansion_item_id)
      elseif item_exp_count > 4 or not shop_ordered then
        call Trace("Item expansion state 0 - buy item timeout")
        call ItemExpansionReset()
        return
      endif
      set item_exp_count = item_exp_count + 1
      call TQAddJob(16, ITEM_EXPANSION, 0)
      return
    endif
    set itemhero = GetItemHero(exp_item)
    call SetItemDroppable(exp_item, false)  //prevent droppable
    call SetItemPawnable(exp_item, false)  //prevent sell
    set expitem_buy = false
    set exp_item = null
    call CreateDebugTag("Item expansion state 0 to 1", 10, itemhero, 3.00, 1.50)
    set item_exp_state = 1
  elseif item_exp_state == 1 then
    if GetExpFoe(u) == null then
      call Trace("Item expansion state 1 - Rush Expansion done")
      set exp_item = GetItemOfType(exp_item,race_item_expansion_item_id)
      if itemhero != null and exp_item != null and not CheckExpansionTaken(current_expansion) and GetLocationNonCreepStrength(GetUnitX(itemhero), GetUnitY(itemhero), 1200) <= 0 then
        call RemoveGuardPosition(itemhero)
        if DistanceBetweenUnits(itemhero, current_expansion) > race_max_expa_mine_distance then
          call CreateDebugTag("Item expansion state 1 - move to expansion", 10, itemhero, 3.00, 1.50)
          call IssuePointOrder(itemhero, "move", GetUnitX(current_expansion), GetUnitY(current_expansion))
          call TQAddJob(RMin(4, RMax(GetTimeToReachUnit(itemhero, current_expansion) + 1,1)), ITEM_EXPANSION, 0)
          set exp_item = null
          return
        else
          call CreateDebugTag("Item expansion state 1 - use item", 10, itemhero, 3.00, 1.50)
          if not UseExpansionItem(exp_item) then
            call IssuePointOrder(itemhero, "move", GetUnitX(current_expansion), GetUnitY(current_expansion))  // Prevent the hero's position from getting stuck
            call TQAddJob(4, ITEM_EXPANSION, 0)
            set exp_item = null
            return
          endif
        endif
      else
        call Trace("Item expansion state 1 - End")
        if exp_item != null then
          call SetItemDroppable(exp_item, true)  //can droppable
          call SetItemPawnable(exp_item, true)  //can selling
        endif
      endif
      call ItemExpansionReset()
      set exp_item = null
      return
    endif
    call Trace("Item expansion state 1 - Wait rush Expansion")
    set u = null
  endif
  call TQAddJob(16, ITEM_EXPANSION, 0)
endfunction
#ENDIF