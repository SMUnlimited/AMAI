#IFDEF GLOBAL
  constant integer ACTION_DO_NOTHING = 0
  constant integer ACTION_GO_HOME = 1
  constant integer ACTION_FOUNTAIN = 2
  constant integer ACTION_TP = 3
  constant integer ACTION_ZEPPELIN_HOME = 4
  constant integer ACTION_ZEPPELIN_FOUNTAIN = 5
  constant integer ACTION_HEALER = 6
  constant integer ACTION_MANA_FOUNTAIN = 7
  constant integer ACTION_MOONWELLS = 8

  location array hero_loc
  location array hero_dir
  real array hero_hp
  real array hero_hp_loss
  real array hero_enemy_density
  location array hero_enemy_loc
  real array hero_ally_density
  location array hero_ally_loc
  //boolean array hero_singetping

#ELSE


//==========================================================================
// (AMAI)	GetDensities
//==========================================================================
function GetDensities takes location l, player p, real r returns nothing
  local group g = CreateGroup()
  local unit u = null
  local real ur = 0
  local real xe = 0
  local real ye = 0
  local real xa = 0
  local real ya = 0
  local location ul = null
  local location loc = null
  local player up = null
  local integer i = 0
  set enemy_density = 0
  set ally_density = 0
  call GroupEnumUnitsInRangeOfLoc(g, l, r, null)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if ModuloInteger(i, 200) == 0 then
      call Sleep(0.1)
    endif
    if UnitAlive(u) and not IsUnitHidden(u) then
      set ul = GetUnitLoc(u)
      set ur = 1 - (DistanceBetweenPoints(ul, l) / r)
      set loc = GetMultipleLoc(ul, ur)
      //if ur == 1 then
      set up = GetOwningPlayer(u)
      if IsPlayerEnemy(p, up) then
        set enemy_density = enemy_density + ur
        set xe = xe + GetLocationX(loc)  // Prevent loc exceeding map range
        set ye = ye + GetLocationY(loc)
        //set enemy_density_loc = GetSumLoc_dd(enemy_density_loc, GetMultipleLoc(ul, ur))
      elseif IsPlayerAlly(p, up) then
        set ally_density = ally_density + ur
        set xa = xa + GetLocationX(loc)
        set ya = ya + GetLocationY(loc)
        //set ally_density_loc = GetSumLoc_dd(ally_density_loc, GetMultipleLoc(ul, ur))
      endif
      call RemoveLocation(loc)
      call RemoveLocation(ul)
    endif
    call GroupRemoveUnit(g, u)
    set i = i + 1
  endloop

  if ally_density > 0 then
    set xa = xa / ally_density
    set ya = ya / ally_density
    //set ally_density_loc = GetDivisionLoc_d(ally_density_loc, ally_density)
  else
    set xa = 0
    set ya = 0
  endif
  call RemoveLocation(ally_density_loc)
  set ally_density_loc = Location(xa,ya)
  if enemy_density > 0 then
    set xe = xe / enemy_density
    set ye = ye / enemy_density
    //set enemy_density_loc = GetDivisionLoc_d(enemy_density_loc, enemy_density)
  else
    set xe = 0
    set ye = 0
  endif
  call RemoveLocation(enemy_density_loc)
  set enemy_density_loc = Location(xe,ye)
  call DestroyGroup(g)
  set g = null
  set ul = null
  set loc = null
  set up = null
endfunction

function GoHomeIfMainHero takes unit u, real x, real y returns nothing
  if main_army >= 0 and army_group[main_army] != null and IsUnitInGroup(u, army_group[main_army]) then
    call CaptainGoHome() // Retreat attack captain.
    call TeleportCaptain(x, y)
    set break_attack = attack_running
    set isfleeing = true
    set attack_running = false
  endif
endfunction

function TeleportHome takes integer hn returns nothing
  local integer i = 0
  local real dx = GetLocationX(captain_home)
  local real dy = GetLocationY(captain_home)
  if teleporting then
    return
  endif
  if not captain_tp then // can't teleport here so just go home
    if home_town >= 0 and town_loc[home_town] != null and town_can_tp[home_town] then
      set dx = GetLocationX(town_loc[home_town])
      set dy = GetLocationY(town_loc[home_town])
    else
      set dx = GetLocationX(home_location)
      set dy = GetLocationY(home_location)
    endif
  endif
  call GoHomeIfMainHero(hero_unit[hn], dx, dy)
  call UnitUseItemPoint(hero_unit[hn], GetItemOfTypeOnUnit(tp_item, hero_unit[hn]), dx + GetRandomInt(300,500) * ISign(), dy + GetRandomInt(300,500) * ISign())
  set teleporting = true
  if teleportloc != null then
    call RemoveLocation(teleportloc)
  endif
  set teleportloc = Location(dx,dy)  //  set new teleport job move loc
  call TQAddUnitJob(0.5, TELEPORT, 0, hero_unit[hn])
endfunction

function GetTeleportLandPoint takes location l returns location
  local group g = CreateGroup()
  local unit u = null
  local player p = null
  local location loc = null
  local real x = GetLocationX(l)
  local real y = GetLocationY(l)
  call GroupEnumUnitsInRangeOfLoc(g, l, 1800, null)
  if teleportloc != null then
    call RemoveLocation(teleportloc)  // set new loc , cannot return teleportloc
  endif
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null  //Find a enemy unit , land to unit loc , prevent army land to hall , cannot expand
    set p = GetOwningPlayer(u)
    if IsPlayerEnemy(ai_player,p) and p != Player(PLAYER_NEUTRAL_AGGRESSIVE) and not IsUnitType(u, UNIT_TYPE_FLYING) and not IsUnitInvisible(u, ai_player) and UnitAlive(u) and not IsUnitHidden(u) then
      set loc = GetUnitLoc(u)
      if DistanceBetweenPoints(loc, l) > 850 then
        set teleportloc = AIGetProjectedLoc(l, loc, GetRandomReal(420, 840), 0)
        call RemoveLocation(loc)
      else
        set teleportloc = loc
      endif
      call DestroyGroup(g)
      set g = null
      set u = null
      set p = null
      set loc = null
      return Location(GetLocationX(teleportloc),GetLocationY(teleportloc))
    endif
    call GroupRemoveUnit(g, u)
  endloop
  set teleportloc = Location(x,y)
  call DestroyGroup(g)
  set g = null
  set p = null
  return Location(x,y)
endfunction

function TeleportToLoc takes unit u, location l returns nothing
  local location loc = null
  if teleporting then
    return
  endif
  set loc = GetTeleportLandPoint(l)
  call GoHomeIfMainHero(u, GetLocationX(loc), GetLocationY(loc))
  set teleporting = true
  call UnitUseItemPoint(u, GetItemOfTypeOnUnit(tp_item, u), GetLocationX(loc), GetLocationY(loc))
  call TQAddUnitJob(0.5, TELEPORT, 0, u)
  call RemoveLocation(loc)
  set loc = null
endfunction

function ItemSingetp takes integer hn, integer loc, integer FountainID returns boolean
  local boolean b = false
  local location l = null
  local item t = null
  if loc == 0 then  // teleport to battle
    set l = GetUnitLoc(major_hero)
  elseif enemy_density < 1 or GetUnitState(hero_unit[hn], UNIT_STATE_LIFE) > GetUnitState(hero_unit[hn], UNIT_STATE_MAX_LIFE) * 0.4 then  // life too low cannot use singetp
    if loc == 1 then
      set l = Location(GetLocationX(home_location), GetLocationY(home_location))
    elseif loc == 2 then
      set l = Location(GetUnitX(nearest_neutral[FountainID]), GetUnitY(nearest_neutral[FountainID]))
    endif
  endif
  if l != null then
    if DistanceBetweenPoints_kd(l,GetUnitLoc(hero_unit[hn])) > 2000 then
      call RemoveGuardPosition(hero_unit[hn])
      call IssuePointOrderLoc(hero_unit[hn], "move", l)  // prevent can not use item
      if GetUnitAbilityLevel(hero_unit[hn], 'AImt') > 0 then
        set t = GetItemOfTypeOnUnit(singe_tp_item, hero_unit[hn])
        if t != null then
          call CreateDebugTag("use singe tp item", 10, hero_unit[hn], 3.00, 1.50)
          call UnitUseItemPoint(hero_unit[hn], t, GetLocationX(l) + ISign() * 220, GetLocationY(l) + ISign() * 220)
          set b = true
          //set hero_singetping[hn] = true
        endif
        set t = null
      endif
    endif
    call RemoveLocation(l)
    set l = null
  endif
  return b
endfunction

// function ItemSaveHero takes integer hn returns boolean
//   local integer i = 1  // only supports three heroes
//   local integer id = 0
//   local item t = null
//   loop
//     exitwhen i > 3
//     if i != hn and CheckUseSaveItem(i) and DistanceBetweenUnits(hero_unit[i],hero_unit[hn]) < 700 then
//       set id = GetUnitCurrentOrder(hero_unit[i])
//       if id == 0 or id == OrderId("attack") or id == OrderId("stop") or id == OrderId("move") then
//         if GetUnitAbilityLevel(hero_unit[i], 'ANsa') > 0 and GetPlayerStructureCount(ai_player, true) > 0 then
//           set t = GetItemOfTypeOnUnit(sanctuary_item,hero_unit[i])
//           if t != null and UnitUseItemTarget(hero_unit[i],t,hero_unit[hn]) then
//             call CreateDebugTag("sanctuary item save", 10, hero_unit[hn], 3.00, 1.50)
//             set t = null
//             return true
//           endif
//         elseif GetUnitAbilityLevel(hero_unit[i], 'ANpr') > 0 and TownCountDone(racial_hall[1]) > 0 then
//           set t = GetItemOfTypeOnUnit(preservation_item,hero_unit[i])
//           if t != null and UnitUseItemTarget(hero_unit[i],t,hero_unit[hn]) then
//             call CreateDebugTag("preservation item save", 10, hero_unit[hn], 3.00, 1.50)
//             set t = null
//             return true
//           endif
//         endif
//       endif
//     endif
//     set i = i + 1
//   endloop
//   set t = null
//   return ItemSingetp(hn,1,0)
// endfunction

function ExecuteSaveHero takes integer hn, integer a, unit healer returns nothing
  local location l = null
  local group g = null
  local location unitloc = null
  local location loc = null
  local integer hFountainID = GetHealthFountainID()
  local integer mFountainID = GetManaFountainID()

  if a != ACTION_DO_NOTHING and a != ACTION_TP then
    if GetUnitAbilityLevel(hero_unit[hn], 'AOwk') > 0 or GetUnitAbilityLevel(hero_unit[hn], 'ANwk') > 0 then
      if not IsUnitInvisible(hero_unit[hn], Player(PLAYER_NEUTRAL_AGGRESSIVE)) then
        call IssueImmediateOrder(hero_unit[hn], "windwalk")
      endif
    endif
    if a != ACTION_HEALER and hero_unit[hn] == major_hero then
      set major_hero = null
    endif
  endif
  if a == ACTION_HEALER and healer != null and GetUnitState(hero_unit[hn], UNIT_STATE_LIFE) >= 0.40 * GetUnitState(hero_unit[hn], UNIT_STATE_MAX_LIFE) then
    call GroupAddUnit(unit_healing, hero_unit[hn])
    call GroupAddUnit(unit_healing, healer)
    call CreateDebugTag("HERO: Going to Healer", 10, hero_unit[hn], 4.00, 2.00)
    set unitloc = GetUnitLoc(healer)
    call RemoveGuardPosition(hero_unit[hn])
    if GetLocationX(last_enemy_loc) != 0 and GetLocationY(last_enemy_loc) != 0 then
      set loc = GetSubtractionLoc(unitloc, last_enemy_loc)
      set l = GetProjectedLoc(unitloc, loc, 350)
      call RemoveLocation(unitloc)
      set unitloc = l
      set l = null
      call RemoveLocation(loc)
      set loc = null
    endif
    call IssuePointOrderLoc(hero_unit[hn], "move", unitloc)
    call HealUnit(healer, hero_unit[hn], true)
    call TQAddUnitJob(GetTimeToReachLoc(hero_unit[hn], unitloc) + 1, RESET_GUARD_POSITION, 0, hero_unit[hn])
    call RemoveLocation(unitloc)
    set unitloc = null
    return
  endif
  // if a != ACTION_TP and not teleporting and not town_threatened and not UnitInvis(hero_unit[hn]) and ItemSaveHero(hn) then  //No mandatory control required
  //   call GroupAddUnit(unit_healing,hero_unit[hn])
  //   if a == ACTION_MOONWELLS then
  //     call CreateDebugTag("HERO: Item Save Going to Moonwells", 10, hero_unit[hn], 4.00, 2.00)
  //     call TQAddUnitJob(0, MOON_WELL_CONTROL, 80, hero_unit[hn])
  //   else
  //     call RemoveGuardPosition(hero_unit[hn])
  //     call TQAddUnitJob(16, RESET_HEALTH, 80, hero_unit[hn])
  //   endif
  //   return
  // endif
  if a == ACTION_FOUNTAIN then
    call CreateDebugTag("HERO: Going to Fountain", 10, hero_unit[hn], 4.00, 2.00)
    call GroupAddUnit(unit_healing, hero_unit[hn])
    call ItemSingetp(hn,2,hFountainID)
    call TQAddUnitJob(2, HEALTH_FOUNTAIN, 80, hero_unit[hn])
  elseif a == ACTION_MANA_FOUNTAIN then
    call CreateDebugTag("HERO: Going to Mana Fountain", 10, hero_unit[hn], 4.00, 2.00)
    call GroupAddUnit(unit_healing, hero_unit[hn])
    call ItemSingetp(hn,2,mFountainID)
    call TQAddUnitJob(2, MANA_FOUNTAIN, 80, hero_unit[hn])
  elseif a == ACTION_GO_HOME then
    //call UnitGoHome(hero_unit[hn])
    call CreateDebugTag("HERO: Going Home", 10, hero_unit[hn], 4.00, 2.00)
    call GroupAddUnit(unit_healing, hero_unit[hn])
    call ItemSingetp(hn,1,0)
    call TQAddUnitJob(2, SEND_HOME, 0, hero_unit[hn])
  elseif a == ACTION_ZEPPELIN_HOME then
    call CreateDebugTag("HERO: Zeppelin Home", 10, hero_unit[hn], 4.00, 2.00)
    call GroupAddUnit(unit_rescueing, follow_zeppelin)
    set g = CreateGroup()
    call GroupAddUnit(g, follow_zeppelin)
    call GroupAddUnit(unit_healing, hero_unit[hn])
    call ItemSingetp(hn,1,0)
    call TQAddGroupJob(2, ZEPPELIN_MOVE, ZTARGET_HOME, hero_unit[hn], g)
    set g = null
  elseif a == ACTION_ZEPPELIN_FOUNTAIN then
    call CreateDebugTag("HERO: Zepplin to fountain", 10, hero_unit[hn], 4.00, 2.00)
    call GroupAddUnit(unit_rescueing, follow_zeppelin)
    set g = CreateGroup()
    call GroupAddUnit(g, follow_zeppelin)
    call GroupAddUnit(unit_healing, hero_unit[hn])
    call ItemSingetp(hn,2,hFountainID)
    call TQAddGroupJob(2, ZEPPELIN_MOVE, ZTARGET_FOUNTAIN, hero_unit[hn], g)
    set g = null
  elseif a == ACTION_TP and not teleporting then
    call CreateDebugTag("Hero: Town Portalling", 10, hero_unit[hn], 4.00, 2.00)
    call TeleportHome(hn)
  elseif a == ACTION_MOONWELLS then
    call CreateDebugTag("HERO: Going to Moonwells", 10, hero_unit[hn], 4.00, 2.00)
    call GroupAddUnit(unit_healing,hero_unit[hn])
    call ItemSingetp(hn,1,0)
    call TQAddUnitJob(2, MOON_WELL_CONTROL, 80, hero_unit[hn])
  endif
endfunction

function SaveHero takes integer hn , integer armyOfHero returns nothing
  local real daytime = GetFloatGameState(GAME_STATE_TIME_OF_DAY)
  local unit healer = null
  local integer hFountainID = GetHealthFountainID()
  local integer mFountainID = GetManaFountainID()
  local location l = GetUnitLoc(hero_unit[hn])
  set healer = GetHealer(healer)
  call ActionListInit(9)
#INCLUDE <HeroFleeRules.ai>
  call ExecuteSaveHero(hn, ActionListEval(), healer)
  call RemoveLocation(l)
  set l = null
  set healer = null
endfunction

function HeroBugFixHealthCheck takes integer hn returns boolean
  return GetUnitState(hero_unit[hn], UNIT_STATE_LIFE) >= 0.80 * GetUnitState(hero_unit[hn], UNIT_STATE_MAX_LIFE) and IsUnitInGroup(hero_unit[hn], unit_healing)
endfunction

function MicroHeroJob takes integer hn returns nothing
  local real new_hp = 0.0
  local real teleportdistance = 0.0
  local integer current_order = 0
  local integer armyOfHero = 0
  local boolean healing = false
  call DisplayToAllJobDebug("MICRO_HERO Job start")
  if UnitAlive(hero_unit[hn]) then
    set armyOfHero = GetArmyOfUnit(hero_unit[hn])
    if HeroBugFixHealthCheck(hn) then    // A Temporary Bug fix
      call CreateDebugTag("HERO: Healing Bug Fix Job", 10, hero_unit[hn], 4.00, 2.00)
      call RecycleGuardPosition(hero_unit[hn])
      call GroupRemoveUnit(unit_healing, hero_unit[hn])
    else
      set healing = IsUnitInGroup(hero_unit[hn], unit_healing)
    endif
    set new_hp = GetUnitState(hero_unit[hn], UNIT_STATE_LIFE) / RMax(GetUnitState(hero_unit[hn], UNIT_STATE_MAX_LIFE), 1)

    //  call DisplayToAll("MicroH Start")
    call RemoveLocation(hero_dir[hn])
    //set hero_dir[hn] = GetSubtractionLoc_dd(GetUnitLoc(hero_unit[hn]), hero_loc[hn])
    set hero_dir[hn] = hero_loc[hn]
    set hero_loc[hn] = GetUnitLoc(hero_unit[hn])
    set hero_hp_loss[hn] = hero_hp[hn] - new_hp
    set hero_hp[hn] = new_hp
    call GetDensities(hero_loc[hn], ai_player, hero_radius)
    set hero_enemy_density[hn] = enemy_density
    if (enemy_density > 0) then
      call Trace("Hero Enemy Density:" + Real2Str(enemy_density))
    endif
    call MoveLocation(hero_enemy_loc[hn], GetLocationX(enemy_density_loc), GetLocationY(enemy_density_loc))
    set hero_ally_density[hn] = ally_density
    call MoveLocation(hero_ally_loc[hn], GetLocationX(ally_density_loc), GetLocationY(ally_density_loc))
    if not UnitAlive(hero_unit[hn]) then  // Densities have sleep time
      call TQAddJob(4, MICRO_HERO, hn)
      return
    endif
    set current_order = GetUnitCurrentOrder(hero_unit[hn])
    if (not teleporting and (current_order >= 852008 and current_order <= 852013)) or current_order == OrderId("massteleport") then
      if (current_order != OrderId("massteleport") and GetItemTypeId(UnitItemInSlot(hero_unit[hn], current_order - 852008)) == old_id[tp_item]) or (current_order == OrderId("massteleport") and GetUnitAbilityLevel(hero_unit[hn], 'AHmt') > 0) then
        call CreateDebugTag("HERO: Already teleporting", 10, hero_unit[hn], 4.00, 2.00)
        if current_order != OrderId("massteleport") then  // can not konw teleport to where
          call GoHomeIfMainHero(hero_unit[hn], GetLocationX(home_location), GetLocationY(home_location))
        endif
        if not teleporting and teleportloc != null then // unknown destination as was triggered by hardcoded logic
          call RemoveLocation(teleportloc)
          set teleportloc = null
        endif
        set teleporting = true
        call TQAddUnitJob(0.5, TELEPORT, 0, hero_unit[hn])
        call TQAddJob(4, MICRO_HERO, hn)
        return
      endif
    endif
    if not healing and not attack_running and not retreat_controlled and not town_threatened and not TownThreatened() and not teleporting and major_hero != null and UnitAlive(major_hero) then
      call ItemSingetp(hn,0,0)
      call TQAddUnitJob(2, RESET_GUARD_POSITION, 0, hero_unit[hn])
      call TQAddJob(4, MICRO_HERO, hn)
      return
    endif
    //  call DisplayToAll("Hero Order: "+Int2Str(GetUnitCurrentOrder(hero_unit[hn])))

    //  call DisplayToAll(Int2Str(R2I(hero_enemy_density[hn] * 10)))
    //  call DisplayToAll(Int2Str(R2I(DistanceBetweenPoints(hero_enemy_loc[hn],GetUnitLoc(hero_unit[hn])))))

    if UnitAlive(hero_unit[hn]) and not healing and not teleporting and GetUnitState(hero_unit[hn], UNIT_STATE_LIFE) < RMax(flee_health_percentage * GetUnitState(hero_unit[hn], UNIT_STATE_MAX_LIFE), flee_minimum_health) then
      call SaveHero(hn,armyOfHero)
    endif
    // if hero_singetping[hn] then  // no need , now can use tp
    //   call TQAddJob(2.5, MICRO_HERO, hn)
    //   set hero_singetping[hn] = false
    //   return
    // endif

    if UnitAlive(hero_unit[hn]) and not teleporting and armyOfHero >= 0 and GetItemNumberOnUnit(tp_item, hero_unit[hn]) > 0 then
      if most_threatened_town >= 0 and town_loc[most_threatened_town] != null then
        set teleportdistance = DistanceBetweenPoints(hero_loc[hn], town_loc[most_threatened_town])
      endif
      if town_threatened and most_threatened_town >= 0 and town_threat[most_threatened_town] >= teleport_min_threat and teleportdistance > LinearInterpolation(teleport_low_threat, teleport_high_threat, teleport_low_threat_distance, teleport_high_threat_distance, town_threat[most_threatened_town]) and town_can_tp[most_threatened_town] and army_strength[armyOfHero] >= teleport_army_min_strength then
        call CreateDebugTag("HERO: Teleporting to threatened town", 10, hero_unit[hn], 4.00, 2.00)
        call TeleportToLoc(hero_unit[hn], town_loc[most_threatened_town])
        call TQAddJob(2, MICRO_HERO, hn)
        return
      // Next statement detects when the main army is outmatched and so teleports back to home base
      elseif attack_running and army_loc[armyOfHero] != null and army_strength[armyOfHero] >= teleport_army_min_strength and isfleeing and DistanceBetweenPoints(hero_loc[hn], home_location) > teleport_low_threat_distance then
        call CreateDebugTag("HERO: Army outmatched-teleporting home", 10, hero_unit[hn], 4.00, 2.00)
        call TeleportHome(hn)
        call TQAddJob(2, MICRO_HERO, hn)
        return
      endif
    endif
  endif
  call TQAddJob(1 * sleep_multiplier, MICRO_HERO, hn)
  //call DisplayToAll("MICRO_HERO END")
endfunction
#ENDIF