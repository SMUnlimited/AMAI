#IFDEF GLOBAL

    group unit_healing = CreateGroup()
    group unit_rescueing = CreateGroup()
    group unit_harassing = CreateGroup()
    group unit_zepplin_move = CreateGroup()
    group unit_buying_item = CreateGroup()
    group unit_buying_merc = CreateGroup()
    group unit_buying_tavern = CreateGroup()

#ELSE

//============================================================================
// Micro Units Control - // Updated by Strategy Master 26/07/05
//============================================================================


//function MakeUnitHeal takes unit u returns nothing
//  local unit healer = null
//  local location unitloc = null
//  local real daytime = GetFloatGameState(GAME_STATE_TIME_OF_DAY)

//  if IsUnitType(u, UNIT_TYPE_HERO) then
//    return
//  endif
// set healer = GetHealer(healer)
//  if healer != null and not IsUnitType(u, UNIT_TYPE_MECHANICAL) then
//    set unitloc = GetUnitLoc(healer)
//    call RemoveGuardPosition(u)
//    call GroupAddUnit(unit_healing, u)
//    call TQAddUnitJob(GetTimeToReachLoc(u, unitloc) + 1, RESET_GUARD_POSITION, 0, u)
//    call IssuePointOrder(u, "move", GetUnitX(healer), GetUnitY(healer))
//    call HealUnit(healer, u, true)
//	call RemoveLocation(unitloc)
//	set unitloc = null
//  elseif race_use_fountain and not IsUnitType(u, UNIT_TYPE_PEON) and not IsUnitType(u, UNIT_TYPE_MECHANICAL) and neutral_enemy[NEUTRAL_HEALING_FOUNTAIN] <= 0 and not (id == old_id[racial_ghoul]) and not (id == old_id[racial_militia]) and neutral_available[NEUTRAL_HEALING_FOUNTAIN] and nearest_neutral[NEUTRAL_HEALING_FOUNTAIN] != null and (not neutral_guarded[NEUTRAL_HEALING_FOUNTAIN] or (neutral_night_buy[NEUTRAL_HEALING_FOUNTAIN] and daytime >= 18 and nearest_neutral[NEUTRAL_HEALING_FOUNTAIN] != null)) then
//      call RemoveGuardPosition(u)
//    	call GroupAddUnit(unit_healing, u)
//  //  call TQAddUnitJob(8, RESET_HEALTH, 80, u)
//  //  call IssuePointOrder(u, "move", GetUnitX(nearest_neutral[NEUTRAL_HEALING_FOUNTAIN]), GetUnitY(nearest_neutral[NEUTRAL_HEALING_FOUNTAIN]))
//      call TQAddUnitJob(0.5, HEALTH_FOUNTAIN, 80, u)
//  endif
//endfunction

//============================================================================
function StatueControl takes unit u returns nothing
  local location loc = GetSubtractionLoc(last_ally_loc, last_enemy_loc)
  local location statue_loc = GetProjectedLoc(last_ally_loc, loc, statue_distance)
  if DistanceBetweenPoints_dk(GetUnitLoc(u), statue_loc) > 200 then
    call IssuePointOrderLoc(u, "move", statue_loc)
  endif
  call RemoveLocation(loc)
  set loc = null
  call RemoveLocation(statue_loc)
  set statue_loc = null
endfunction

//============================================================================
function DenyUnit takes unit u , integer id returns nothing
  if id != 'ugrm' and id != 'ohwd' and not IsUnitType(u, UNIT_TYPE_ETHEREAL) and not IsUnitInvisible(u, Player(PLAYERAGGRESSIVE)) then
    set deny_unit = u
  endif
endfunction

//============================================================================
function ItemSaveUnit takes unit u, boolean itemsave returns boolean
  local integer i = 1  // only supports three heroes
  local integer id = 0
  local real t = TimerGetElapsed(tq_timer)
  loop
    exitwhen i > 3
    if heroitemsave[i] and UnitAlive(hero_unit[i]) and not IsUnitInvisible(hero_unit[i], Player(PLAYERAGGRESSIVE)) and DistanceBetweenUnits(hero_unit[i],u) < 700 then  //处理重复判断和 循环内判断单位在单位内的问题  判断英雄是否在施法
      set id = GetUnitCurrentOrder(hero_unit[i])
      if id == 0 or id == OrderId("attack") or id == OrderId("stop") or id == OrderId("move") then  // no interrupt casting
        if t >= 45 + sanctuarycd[i] and UnitUseItemTarget(hero_unit[i],sanctuaryitem[i],u) then
          set sanctuarycd[i] = t
          set heroitemsave[i] = false
          return true
        elseif t >= 30 + preservationcd[i] and UnitUseItemTarget(hero_unit[i],preservationitem[i],u) then
          set preservationcd[i] = t
          set heroitemsave[i] = false
          return true
        endif
      endif
    endif
    set i = i + 1
  endloop
  return false
endfunction

function SaveUnit takes unit u , integer id, boolean itemsave returns nothing
  local real daytime = GetFloatGameState(GAME_STATE_TIME_OF_DAY)
  local unit healer = null
  local location l = null
  local group g = null
  local location unitloc = null
  local location temploc = null
  local integer hFountainID = GetHealthFountainID()
  local integer healertepy = 0

  if IsUnitType(u, UNIT_TYPE_HERO) then
    return
  endif
  if id == 'hphx' or id == old_id[racial_militia] then
    call IssuePointOrder(u, "move", GetLocationX(home_location), GetLocationY(home_location))
    return
  endif
  call RemoveGuardPosition(u)
  if GetUnitAbilityLevel(u, 'AOwk') > 0 or GetUnitAbilityLevel(u, 'ANwk') > 0 then
    if not IsUnitInvisible(u, Player(PLAYERAGGRESSIVE)) then
      call IssueImmediateOrder(u, "windwalk")
    endif
  elseif itemsave and ItemSaveUnit(u,itemsave) then
    set itemsave = false
    call GroupAddUnit(unit_healing, u)
    call TQAddUnitJob(16, RESET_HEALTH, 60, u)
    return
  endif
  set healer = GetHealer(healer)
  //  call SetUnitUserData(u, UNIT_GOING_HOME)
  if healer != null then  //and not IsUnitType(u, UNIT_TYPE_MECHANICAL) then  //Repetitive judgment
    set healertepy = healer_type[GetHealerId(GetUnitTypeId(healer))]
    if not CaptainInCombat(true) or (healertepy == HEALER_TYPE_NO_TARGET or healertepy == HEALER_TYPE_WARD or GetUnitState(u, UNIT_STATE_LIFE) > GetUnitState(u, UNIT_STATE_MAX_LIFE) * 55) then
      call CreateDebugTag("Going to Healer", 10, u, 3.00, 1.50)
      // Captain In Combat , if healer no Immediate and extensive treatment , urgent healing need go home , avoid staying on the battlefield
      set unitloc = GetUnitLoc(healer)
      if GetLocationX(last_enemy_loc) != 0 and GetLocationY(last_enemy_loc) != 0 then
        set temploc = GetSubtractionLoc(unitloc, last_enemy_loc)
        set l = GetProjectedLoc(unitloc, temploc, 350)
        call TQAddUnitJob(GetTimeToReachLoc(u, l) + 1, RESET_GUARD_POSITION, 0, u)
        call IssuePointOrderLoc(u, "move", l)
        call RemoveLocation(temploc)
        set temploc = null
        call RemoveLocation(l)
        set l = null
      else
        call TQAddUnitJob(GetTimeToReachLoc(u, unitloc) + 1, RESET_GUARD_POSITION, 0, u)
        call IssuePointOrderLoc(u, "move", unitloc)
      endif
      call GroupAddUnit(unit_healing, u)
      call RemoveLocation(unitloc)
      set unitloc = null
      call HealUnit(healer, u, false)
      set healer = null
      return
    endif
  endif
  if race_use_fountain and neutral_enemy[hFountainID] <= 0 and id != old_id[racial_ghoul] and neutral_available[hFountainID] and nearest_neutral[hFountainID] != null and (not neutral_guarded[hFountainID] or (neutral_night_buy[hFountainID] and (daytime >= 18 or daytime < 6))) then  //not IsUnitType(u, UNIT_TYPE_PEON) and not IsUnitType(u, UNIT_TYPE_MECHANICAL)  //Repetitive judgment
    if follow_zeppelin != null and not IsUnitInGroup(follow_zeppelin, unit_rescueing) and not IsUnitType(u, UNIT_TYPE_FLYING) then
      //    call SetUnitUserData(follow_zeppelin, UNIT_RESCUEING)
      call CreateDebugTag("Zepplin to fountain", 10, follow_zeppelin, 3.00, 1.50)
      call GroupAddUnit(unit_rescueing, follow_zeppelin)
      set g = CreateGroup()
      call GroupAddUnit(g, follow_zeppelin)
      call GroupAddUnit(unit_healing, u)
      call TQAddGroupJob(0, ZEPPELIN_MOVE, ZTARGET_FOUNTAIN, u, g)
      set g = null
    else
      call GroupAddUnit(unit_healing, u)
      call CreateDebugTag("Going to Fountain", 10, u, 3.00, 1.50)
      call TQAddUnitJob(0, HEALTH_FOUNTAIN, 80, u)
      call IssuePointOrder(u, "move", GetUnitX(nearest_neutral[hFountainID]), GetUnitY(nearest_neutral[hFountainID]))
    endif
  elseif race_has_moonwells and TownCountDone(racial_farm) > 0 then  //and not IsUnitType(u, UNIT_TYPE_SUMMONED) then  //Repetitive judgment
    if follow_zeppelin != null and not IsUnitInGroup(follow_zeppelin, unit_rescueing) and not IsUnitType(u, UNIT_TYPE_FLYING) then
      call GroupAddUnit(unit_rescueing, follow_zeppelin)
      call CreateDebugTag("Zeppelin to Moonwells", 10, u, 3.00, 1.50)
      set g = CreateGroup()
      call GroupAddUnit(g, follow_zeppelin)
      call GroupAddUnit(unit_healing, u)
      call TQAddGroupJob(0, ZEPPELIN_MOVE, ZTARGET_MOONWELLS, u, g)
      set g = null
    else
      call CreateDebugTag("Going to Moonwells", 10, u, 3.00, 1.50)
      call GroupAddUnit(unit_healing, u)
      call TQAddUnitJob(0, MOON_WELL_CONTROL, 80, u)
    endif
  //elseif GetUnitCurrentOrder(u) != OrderId("move") then
  elseif follow_zeppelin != null and not IsUnitInGroup(follow_zeppelin, unit_rescueing) and not IsUnitType(u, UNIT_TYPE_FLYING) then
    //    call SetUnitUserData(follow_zeppelin, UNIT_RESCUEING)
    call CreateDebugTag("Zepplin Home", 10, u, 3.00, 1.50)
    call GroupAddUnit(unit_rescueing, follow_zeppelin)
    set g = CreateGroup()
    call GroupAddUnit(g, follow_zeppelin)
    call GroupAddUnit(unit_healing, u)
    call TQAddGroupJob(0, ZEPPELIN_MOVE, ZTARGET_HOME, u, g)
    set g = null
  else
    call CreateDebugTag("Going Home", 10, u, 3.00, 1.50)
    call GroupAddUnit(unit_healing, u)
    call TQAddUnitJob(0, SEND_HOME, GetRandomInt(0,Max(exist_town_num-1,0)), u)
    //call TQAddUnitJob(GetTimeToReachLoc(u, home_location) + 1, RESET_GUARD_POSITION, 0, u)
    //call IssuePointOrderLoc(u, "move", home_location)
  endif
  set healer = null
endfunction

//============================================================================
function GetMana takes unit u , integer id returns nothing
  local real daytime = GetFloatGameState(GAME_STATE_TIME_OF_DAY)
  local integer mFountainID = GetManaFountainID()

  if race_use_fountain and GetUnitState(u, UNIT_STATE_MANA) < GetUnitState(u, UNIT_STATE_MAX_MANA) * 0.4 and neutral_enemy[mFountainID] <= 0 and not (id == old_id[racial_ghoul]) and not (id == old_id[racial_militia]) and neutral_available[mFountainID] and nearest_neutral[mFountainID] != null and (not neutral_guarded[mFountainID] or (neutral_night_buy[mFountainID] and (daytime >= 18 or daytime < 6))) then
    call CreateDebugTag("Going to mana fountain", 10, u, 3.00, 1.50)
    call GroupAddUnit(unit_healing, u)
    call TQAddUnitJob(8, MANA_FOUNTAIN, 80, u)
    call IssuePointOrder(u, "move", GetUnitX(nearest_neutral[mFountainID]), GetUnitY(nearest_neutral[mFountainID]))
  endif
endfunction

//============================================================================
function MicroUnitsJob takes nothing returns nothing
  local group g = CreateGroup()
  local unit u = null
  local real unit_life = 0
  local real unit_life_max = 0
  local real unit_mana = 0
  local group new_healer_group = CreateGroup()
  local boolean ward_check = false
  local boolean prev_ward = ward_cast
  local boolean deny = (GetGold() > 600 and GetWood() > 400) or GetGoldOwned() > 3000
  //local location unitloc = null
  local real health_sum = 0.0
  local integer count = 0
  local real unit_health_ratio = 0.0
  local integer id = 0
  local boolean itemsave = (heroitemsave[1] or heroitemsave[2] or heroitemsave[3]) and not town_threatened and TownCountDone(racial_hall[1]) > 0
  if major_hero == null or not UnitAlive(major_hero) then
    set major_hero = GetMajorHero(major_hero)
  endif
  //call DisplayToAllJobDebug("MICRO_UNITS Job Started")

  //call GroupEnumUnitsInRange(g,GetUnitX(major_hero),GetUnitY(major_hero),battle_radius,null)
  call GroupEnumUnitsOfPlayer(g, ai_player, null)
  set g = SelectUnittype(g,UNIT_TYPE_PEON,false)
  set g = SelectUnittype(g,UNIT_TYPE_STRUCTURE,false)
  set g = SelectByIllusion(g, false)
  set g = SelectByUnitStandard(g, true)
  //set g = SelectUnittype(g,UNIT_TYPE_SUMMONED,false)  // need search 'ohwd' and 'hphx'
  //call DisplayToAll("MICRO_UNITS: Group made")
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    set unit_life = GetUnitState(u, UNIT_STATE_LIFE)
    set unit_life_max = GetUnitState(u, UNIT_STATE_MAX_LIFE)
    set unit_mana = GetUnitState(u, UNIT_STATE_MANA)
    set id = GetUnitTypeId(u)
    if id == 'ohwd' then
      //         call GroupAddUnit(new_healer_group, u)
      set ward_check = true
    endif
    if unit_life > 0 then
      //call DisplayToAllJobDebug("MICRO_UNITS: Main Loop")
      //set unitloc = GetUnitLoc(u)
      //if (attack_running or town_threatened) then //and DistanceBetweenUnits(major_hero, u) <= battle_radius then
        //call Trace("MIRCO_UNITS: Attack healing section")
        //if IsPlayerAlly(GetOwningPlayer(u), ai_player) then
          //call Trace("MICRO_UNITS: Friendly Unit")
          if deny == true and not IsUnitType(u, UNIT_TYPE_HERO) and unit_life < RMin(0.1 * unit_life_max, 24) then
            call DenyUnit(u,id)
          endif
          if not IsUnitType(u, UNIT_TYPE_MECHANICAL) and (id == 'hphx' or not IsUnitType(u, UNIT_TYPE_SUMMONED)) and unit_life < RMax(flee_health_percentage * unit_life_max, flee_minimum_health) then
            call SaveUnit(u,id,itemsave)
          else  //if not IsUnitType(u, UNIT_TYPE_SUMMONED) then
            #INCLUDETABLE <$VER$\StandardUnits.txt> #COND "%4" =~ /\bstatue\b/
            if id == o%1 then
              //call DisplayToAllJobDebug("MICRO_UNITS: Statue Control")
              if attack_running and GetLocationX(last_enemy_loc) != 0 and GetLocationY(last_enemy_loc) != 0 then
                call StatueControl(u)
              endif
              //call DisplayToAllJobDebug("MICRO_UNITS: Statue Control end")
            endif
            #ENDINCLUDE
            if IsUnitHealer(u) then
              call GroupAddUnit(new_healer_group, u)
            endif
            //if GetUnitFoodUsed(u) > 0 and unit_mana < RMax(0.35 * GetUnitState(u, UNIT_STATE_MAX_MANA), 50) then
              //call GetMana(u, id)
            //endif
          endif
        //else
        //endif
      //else
        // HEAL ARMY CODE
        //INCONSISTENCY  - NOT MODDABLE DETECTED HERE
        //if id == 'ohwd' then
          //set ward_cast = true
        //endif
        // ///////////////////////////////////
        //if not (IsUnitType(u, UNIT_TYPE_MECHANICAL)) then
          //	set unit_health_ratio = unit_life / unit_life_max
          //	set health_sum = health_sum + unit_health_ratio
          //	set count = count + 1


          //	if GetHealerId(id) != -1 and GetUnitState(u, UNIT_STATE_MANA) >= (healer_mana_cost[GetHealerId(id)] * 2) / 3 and ((healer_upg_id[GetHealerId(id)] == 0) or (GetUpgradeLevel(healer_upg_id[GetHealerId(id)]) >= healer_upg_level[GetHealerId(id)])) then
            //		call GroupAddUnit(new_healer_group, u)
          //	endif

          //	if not IsUnitInGroup(u, unit_healing) then
            //		if unit_life < RMax(flee_health_percentage * unit_life_max, flee_minimum_health) then
              //		    //call DisplayToAllJobDebug("MICRO_UNITS Special Extra Save")
              //			call SaveUnit(u,id)
            //		elseif unit_health_ratio <= 0.5 then
              //		    //call DisplayToAllJobDebug("MICRO_UNITS Make Unit Heal")
              //			call MakeUnitHeal(u)
            //		endif
          //	endif
        //endif
      //endif
    endif
    call GroupRemoveUnit(g,u)
    //call RemoveLocation(unitloc)
  endloop
  //set unitloc = null

  //call DisplayToAll("MICRO_UNITS: Clear up code")
  if prev_ward or not ward_cast then
    set ward_cast = ward_check
  endif

//endif
  call DestroyGroup(healer_group)
  set healer_group = new_healer_group
  set new_healer_group = null
  call DestroyGroup(g)
  set g = null
  call TQAddJob(1 * sleep_multiplier, MICRO_UNITS, 0)
  //call DisplayToAll("MICRO_UNITS END")

endfunction

#ENDIF