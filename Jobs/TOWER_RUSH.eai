#IFDEF GLOBAL

#ELSE

// ######################## Tower Rush ##############################
// #  Created by Strategy Master 13/07/05. Controls all part of the
// #  tower rush when tower rush check comes true.
// ##################################################################
function TowerRushHeroControl_dk takes unit u, location l, location t returns nothing
	call RemoveGuardPosition(u)
	call ClearCaptainTargets()
	if DistanceBetweenPoints(l, t) > 200 then
		call CreateDebugTag("TRush: hero moving", 10, u, 4.00, 2.00)
		call IssuePointOrderLoc(u, "move", t)
	endif
	if DistanceBetweenPoints(l, toweringplayerloc) <= DistanceBetweenPoints(t, toweringplayerloc) + 230 then
		call UnitUseItemPoint( u, GetItemOfTypeOnUnit(race_tower_item, u), GetLocationX(l), GetLocationY(l))
	endif
	call RemoveLocation(l)
	set l = null
endfunction

function TowerRushBuilderFirstControl_d takes unit u, unit hall returns nothing
	if hall != null and DistanceBetweenUnits(u, hall) < 1000 then
		call SetUnitCreepGuard(u,false)
		call RemoveGuardPosition(u)
		if (GetUnitAbilityLevel(u, 'ANha') != 0 or GetUnitAbilityLevel(u, 'Ahar') != 0 or GetUnitAbilityLevel(u, 'Ahr3') != 0) then
		call IssueImmediateOrder( u, "returnresources" )
		endif
		if race_militia_available and DistanceBetweenPoints_kd(toweringplayerloc, GetUnitLoc(u)) > 6800 then
			call IssueImmediateOrder( u, race_militia_unitstring )
		endif
	endif
endfunction

function TowerRushBuilderControl_dk takes unit u, location l, location t, boolean CanBuild returns nothing
	local real builder_x = 0
	local real builder_y = 0
	local integer id = GetUnitCurrentOrder(u)
	local unit loccheck = null
	local location unitloc = null
	local location loc = null
	call SetUnitCreepGuard(u,false)
	call RemoveGuardPosition(u)
	if DistanceBetweenPoints(l, t) > 300 and id != OrderId("move") then
		call CreateDebugTag("TRush: builder moving", 10, u, 4.00, 2.00)
		call IssuePointOrderLoc(u, "move", t)
	elseif DistanceBetweenPoints(l, t) <= 500 and ((id != OrderId("smart") and id != OrderId("repair") and id != OrderId("build") and id != old_id[race_tower_id]) or id == 0) then  //Improve efficiency
		if towers_built >= 6 and race_tower_shop == 0 then  //Building shop
			set loc = GetSubtractionLoc(tower_target_loc, toweringplayerloc)
			set unitloc = GetProjectedLoc(tower_target_loc, loc, 800)
			call RemoveLocation(loc)
			if race_tower_id_replace == 0 then
				set loccheck = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[racial_shop], GetLocationX(unitloc), GetLocationY(unitloc), 270.0)
			else
				set loccheck = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[race_tower_id_replace], GetLocationX(unitloc), GetLocationY(unitloc), 270.0)
			endif
			set loc = GetUnitLoc(loccheck)
			set builder_x = GetLocationX(loc)
			set builder_y = GetLocationY(loc)
			call RemoveLocation(unitloc)
			call RemoveLocation(loc)
			call RemoveUnit(loccheck)
			if not IsTerrainPathable(builder_x, builder_y, PATHING_TYPE_BUILDABILITY) then
				if GetGold() > (GetUnitGoldCost2(racial_shop)) and GetWood() > (GetUnitWoodCost2(racial_shop)) then
					call IssueBuildOrderById(u, old_id[racial_shop], builder_x, builder_y)
					call CreateDebugTag("TRush: Shop Building", 10, u, 4.00, 2.00)
					set race_tower_shop = 1
				endif
			endif
		else  //Building tower
			if not CanBuild or GetUnitTypeId(u) == old_id[racial_militia] or (race_tower_bypeon == true and u == builder[4] and IsUnitType(builder[1], UNIT_TYPE_STRUCTURE) and IsUnitType(builder[2], UNIT_TYPE_STRUCTURE) and IsUnitType(builder[3], UNIT_TYPE_STRUCTURE)) then
				call RemoveLocation(l)
				set l = null
				return  // HUMAN militia cannot build , ELF no need all peon build , try give one repair
			endif
			if towers_built <= 6 then
				set loc = AIGetProjectedLoc(t,toweringplayerloc,GetRandomInt(220,230),GetRandomInt(-90,-80))
			else
				set loc = Location(GetLocationX(t),GetLocationY(t))
			endif
			if race_tower_id_replace == 0 then
				set loccheck = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[race_tower_id], GetLocationX(t), GetLocationY(t), 270.0)
			else
				set loccheck = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[race_tower_id_replace], GetLocationX(t), GetLocationY(t), 270.0)
			endif
			call RemoveLocation(loc)
			set unitloc = GetUnitLoc(loccheck)
			set builder_x = GetLocationX(unitloc)
			set builder_y = GetLocationY(unitloc)
			call RemoveLocation(unitloc)
			call RemoveUnit(loccheck)
			if not IsTerrainPathable(builder_x, builder_y, PATHING_TYPE_BUILDABILITY) then
				if towers_built < 3 or (towers_built >= 3 and towers_built < 6 and GetGold() > (GetUnitGoldCost2(race_tower_id) + 100) and GetWood() > (GetUnitWoodCost2(race_tower_id) + 80)) or (towers_built >= 6 and GetGold() > (GetUnitGoldCost2(race_tower_id) * 3) and (GetWood() > GetUnitWoodCost2(race_tower_id) * 3)) then
					call IssueBuildOrderById(u, old_id[race_tower_id], builder_x, builder_y)
					set towers_built_count = towers_built_count + 1
					if towers_built != 0 then
						call CreateDebugTag("TRush: Building", 10, u, 4.00, 2.00)
					else
						call CreateDebugTag("TRush: First Building", 10, u, 4.00, 2.00)
						set towers_built = 1
					endif
				endif
			endif
		endif
	endif
	call RemoveLocation(l)
	set l = null
	set loc = null
	set loccheck = null
	set unitloc = null
endfunction

function TowerRushTowerMoveControl_dk takes unit u, location l, location t returns nothing  //reuse these too far towers
	local unit loccheck = null
	local location unitloc = null
	local integer id = GetUnitCurrentOrder(u)
	call RemoveGuardPosition(u)
	if GetUnitState(u, UNIT_STATE_LIFE) >= GetUnitState(u, UNIT_STATE_MAX_LIFE) * 0.65 then  //exclude UNIT_STATE_LIFE too low , dangerous to stand up
		if DistanceBetweenPoints(l, toweringplayerloc) > DistanceBetweenPoints(t, toweringplayerloc) + 220 and id != OrderId(race_tower_movestartstring) then
			set unitloc = GetProjectedLoc(t, l, 70)
			if race_tower_id_replace == 0 then
				set loccheck = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[race_tower_id], GetLocationX(unitloc), GetLocationY(unitloc), 270.0)
			else
				set loccheck = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), old_id[race_tower_id_replace], GetLocationX(unitloc), GetLocationY(unitloc), 270.0)
			endif
			call RemoveLocation(unitloc)
			set unitloc = GetUnitLoc(loccheck)
			call RemoveUnit(loccheck)
			if not IsTerrainPathable(GetLocationX(unitloc), GetLocationY(unitloc), PATHING_TYPE_BUILDABILITY) then
				call IssueImmediateOrder( u, race_tower_moveendstring )
				call IssuePointOrderLoc( u, race_tower_movestartstring, unitloc)  //move tree
			endif
			call RemoveLocation(unitloc)
		endif
	endif
	if id != OrderId(race_tower_movestartstring) or GetUnitState(u, UNIT_STATE_LIFE) < GetUnitState(u, UNIT_STATE_MAX_LIFE) * 0.5 then
		call IssuePointOrderLoc( u, race_tower_movestartstring, l )
	endif
	call RemoveLocation(l)
	set l = null
	set loccheck = null
	set unitloc = null
endfunction

function TowerRushSetBuilder takes unit u, integer i returns boolean
	if IsUnitType(u, UNIT_TYPE_STRUCTURE) or UnitAlive(u) == false or IsUnitBuying(u) or IsUnitInGroup(u, unit_zepplin_move) then  // the peon harvest gold or build by peon become, like ELF
		return false
	endif
	set builder[i] = u
	if race_tower_repair_ability == 'Arst' then  // open automatic repair
		call IssueImmediateOrderById(u, 852203)
	elseif race_tower_repair_ability == 'Aren' then
		call IssueImmediateOrderById(u, 852162)
	else
		call IssueImmediateOrderById(u, 852025)  // human('Ahrp') , orc('Arep') , or other race
	endif
	return true
endfunction

function TowerRushJob takes nothing returns nothing
	local group g = null
	local group tempg = null
	local unit u = null
	local location t = null
	local item it = null
	local integer i = 0
	local integer towers_attck = 0
	local integer s = 0
	local integer randomnum = 0
	local integer towermove = 30
	local integer buildtries = 10
	local integer id = 0
	local real time_next_try = 5
	local boolean CloseJob = false
	local boolean CanBuild = true
	call DisplayToAllJobDebug("TOWER_RUSH Job START")
	if not hero_built[1] and race_tower_item_must == true then
		call TQAddJob(5, TOWER_RUSH, 0)
		return
	endif
	if race_tower_move then
		set buildtries = 8  //the tower can move
	endif
	set g = CreateGroup()
	call GroupEnumUnitsInRange(g, first_tower_point_x, first_tower_point_y, 1200, null)
	loop
		set u = FirstOfGroup(g)
		exitwhen u == null
		if GetOwningPlayer(u) == ai_player and GetUnitState(u, UNIT_STATE_LIFE) > 0 and IsUnitType(u, UNIT_TYPE_STRUCTURE) then
			set randomnum = GetRandomInt(1, 4)
			set id = GetUnitTypeId(u)
			if id == old_id[race_tower_id] or (race_tower_upgrade1 != 0 and id == old_id[race_tower_upgrade1]) or ( race_tower_upgrade2 != 0 and id == old_id[race_tower_upgrade2]) then
				if id == old_id[race_tower_id] then
					if (randomnum == 4 or GetUnitCountDone(old_id[race_towerrush_requirement]) == 0) and TownCount(race_tower_upgrade2) < 2 and race_tower_upgrade2 != 0 then
						call IssueImmediateOrderById(u, old_id[race_tower_upgrade2])
					elseif race_tower_upgrade1 != 0 then
						call IssueImmediateOrderById(u, old_id[race_tower_upgrade1])
					endif
				endif
				if race_tower_move == true then
					set builder[towermove] = u
					set towermove = towermove + 1
				endif
				if IsUnitType(u, UNIT_TYPE_ATTACKS_GROUND) or IsUnitType(u, UNIT_TYPE_ATTACKS_FLYING) then
					set towers_attck = towers_attck + 1
				endif
				set i = i + 1
			elseif id == old_id[racial_shop] then
				set s = s + 1
			endif
			if race_has_power_build and GetUnitState(u, UNIT_STATE_LIFE) < GetUnitState(u, UNIT_STATE_MAX_LIFE) * 0.7 then
				if builder[randomnum] != null and GetUnitCurrentOrder(builder[randomnum]) == 0 then
					call IssueTargetOrder( builder[randomnum], "repair", u )
					call CreateDebugTag("TRush: repair tower", 10, u, 4.00, 2.00)
				endif
			endif
		endif
		call GroupRemoveUnit(g,u)
	endloop
	set towers_built = i
	set race_tower_shop = s
	set CanBuild = towers_built - towers_attck < 2
	if ((towers_built >= 4 and race_tower_item_must != true) or (towers_built > 0 and race_tower_item_must == true)) and tower_used_item == false then
		set tower_used_item = true  //No need used item
	endif
	if towers_built <= 3 then
		if GetLocationCreepStrength(GetLocationX(tower_target_loc), GetLocationY(tower_target_loc), 500) > 0 then
			set t = GetProjectedLoc(tower_target_loc, towerrushsubloc, 600)
		else
			set t = GetProjectedLoc(tower_target_loc, towerrushsubloc, 660)
		endif
		if first_tower_point_x == 0 then
			set first_tower_point_x = GetLocationX(t)
			set first_tower_point_y = GetLocationY(t)
		endif
	elseif towers_built <= 6 then
		set t = GetProjectedLoc(tower_target_loc, towerrushsubloc, 200)
		if second_attack_point_x == 0 then
			set second_attack_point_x = GetLocationX(t)
			set second_attack_point_y = GetLocationY(t)
		endif
	else
		set t = Location(GetLocationX(tower_target_loc), GetLocationY(tower_target_loc))
	endif
	call CreateDebugTagLoc(Int2Str(i), 10, GetLocationX(t), GetLocationY(t), 60.00, 55.00)
	//call Trace("Getting ready to tower rush")
	if not (GetLocationX(t) == 0 and GetLocationY(t) == 0) and (TownCountDone(hero[1]) + TownCountDone(hero[2]) + TownCountDone(hero[3])) != 0 then
		set CloseJob = (town_threatened and most_threatened_town >= 0 and town_threat[most_threatened_town] >= teleport_low_threat + 60) or (GetLocationNonCreepStrength(GetLocationX(t), GetLocationY(t), 1200) > (GetOwnStrength() + towers_attck + towers_built * 0.3) * 4) or ((towers_built_count > 6 * race_tower_peon) and towers_built < 2)  //6 job cycles
	endif
	if GetPlayerSlotState(rushedplayer) != PLAYER_SLOT_STATE_PLAYING or GetPlayerUnitCount(rushedplayer,true) <= 0 or CloseJob == true then  //or (builder[1] != null and (GetUnitState(builder[1], UNIT_STATE_LIFE) <= 0  and GetUnitState(builder[3], UNIT_STATE_LIFE) <= 0 and GetUnitState(builder[2], UNIT_STATE_LIFE) <= 0)) then
		//maybe enemy give up the Location,so temporary no need built
		call Trace("I have finished the tower rush")
		set gold_buffer = 0
		set wood_buffer = 0
		call CaptainGoHome()
		if tower_attack_run == true and race_has_power_build then  // reduction
			call GroupClear(g)
			call GroupEnumUnitsOfPlayer(g, ai_player, null)
			set g = SelectUnittype(g, UNIT_TYPE_PEON, true)
			set g = SelectByAlive(g, true)
			set g = SelectByHidden(g, false)
			set i = 41
			loop
				set u = FirstOfGroup(g)
				exitwhen u == null
				if not IsUnitBuying(u) then
					call TQAddUnitJob(3, RESET_GUARD_POSITION, 0, u)  //Prevent peon immediately go tower point repair tower
				endif
				if builder[i] != null then
					set builder[i] = null
					set i = i + 1
				endif
				call GroupRemoveUnit(g,u)
			endloop
			call DestroyGroup(tower_rush_power)
			call GroupClear(g)
			call GroupEnumUnitsInRange(g, first_tower_point_x, first_tower_point_y, 2200, null)
			call GroupAddUnit(g, builder[1])  //Prevent unit out of range
			call GroupAddUnit(g, builder[2])
			call GroupAddUnit(g, builder[3])
			call GroupAddUnit(g, builder[4])
			loop
				set u = FirstOfGroup(g)
				exitwhen u == null
				if GetOwningPlayer(u) == ai_player then
					call IssueImmediateOrderById( u, 851976 )  //Cancel can recycling resources and prevent AI run FAST BUILD
					call RecycleGuardPosition(u)
					call IssuePointOrderLoc(u, "move", home_location)
				endif
				call GroupRemoveUnit(g,u)
			endloop
		endif
		set race_tower_alliancetarget = false
		set tower_used_item = false
		set tower_attack_run = false
		set tower_peon_run = false
		set towerrush = false
		call DisplayToAllies(chat_stop_towerrush)
		call DisplayToObserversImportant(chat_stop_towerrush)
		if builder[0] != null and GetItemOfTypeOnUnit(race_tower_item, builder[0]) != null then
			call SetItemPawnable( GetItemOfTypeOnUnit(race_tower_item, builder[0]), true )  //can selling
			call SetItemDroppable( GetItemOfTypeOnUnit(race_tower_item, builder[0]), true )  //droppable
		endif
		set builder[0] = null
		set builder[1] = null
		set builder[2] = null
		set builder[3] = null
		set builder[4] = null
		set builder[10] = null
		set builder[20] = null
		set rushedplayer = null
		call RemoveLocation(toweringplayerloc)
		call RemoveLocation(tower_target_loc)
		call RemoveLocation(towerrushsubloc)
		call RemoveLocation(t)
		set toweringplayerloc = null
		set tower_target_loc = null
		set towerrushsubloc = null
		set t = null
		call DestroyGroup(g)
		set g = null
		set towers_built = 0
		set towers_built_count = 0
		set race_tower_shop = 0
		set first_tower_point_x = 0
		set first_tower_point_y = 0
		set second_attack_point_x = 0
		set second_attack_point_y = 0
		set enemy_point_x = 0
		set enemy_point_y = 0
		call SetAllianceTarget(null)
		//call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(front_loc[0]), GetLocationY(front_loc[0]))
		call SetPeonsRepair(true)
		return
	endif

	// if tower_attack_run == true then
	// 	if towers_built < 4 and race_simple_melee > 2 then
	// 		if race_tower_upgrade1 == 0 then
	// 			set gold_buffer = GetUnitGoldCost2(race_tower_id) + 100
	// 			set wood_buffer = GetUnitWoodCost2(race_tower_id) + 110
	// 		else
	// 			set gold_buffer = GetUnitGoldCost2(race_tower_upgrade1) + 70
	// 			set wood_buffer = GetUnitWoodCost2(race_tower_upgrade1) + 80
	// 		endif
	// 	elseif towers_built < 8 and race_simple_melee > 3 then
	// 		set gold_buffer = GetUnitGoldCost2(race_tower_id) + 40
	// 		set wood_buffer = GetUnitWoodCost2(race_tower_id) + 50
	// 	else
	// 		set gold_buffer = 0
	// 		set wood_buffer = 0
	// 	endif
	// endif
    if tower_attack_run != true and not town_threatened and (GetUnitCountDone(old_id[hero[1]]) + GetUnitCountDone(old_id[hero[2]]) + GetUnitCountDone(old_id[hero[3]])) > 0 and (race_tower_item_must != true or (race_tower_item_must == true and builder[0] != null)) then
		set tower_attack_run = true
	endif
	if builder[0] == null then
		set builder[0] = GetItemHero(GetItemOfType(it,race_tower_item))
		set it = null
	endif
	if builder[0] != null then  //Avoid next cycle judgment
		call SetItemDroppable(GetItemOfTypeOnUnit(race_tower_item, builder[0]), false)  //prevent droppable
		call SetItemPawnable(GetItemOfTypeOnUnit(race_tower_item, builder[0]), false)  //can selling
	endif

	if towermove != 30 then
		loop
			exitwhen towermove < 30
			call TowerRushTowerMoveControl_dk(builder[towermove], GetUnitLoc(builder[towermove]), t)
			set builder[towermove] = null
			set towermove = towermove - 1
		endloop
	endif

	call GroupClear(g)
	call GroupEnumUnitsOfPlayer(g, ai_player, null)
	set g = SelectUnittype(g, UNIT_TYPE_PEON, true)
	set g = SelectByAlive(g, true)
	set g = SelectByLoaded(g,false)
	set g = SelectByHidden(g,false)
	set tempg = CopyGroup(g,tempg)
	set g = GetNearestSubGroupOfGroup(g, tower_target_loc, 10)
	set i = 1
	loop
		set u = FirstOfGroup(g)
		exitwhen i > race_tower_peon or u == null
		if builder[i] == null or not UnitAlive(builder[i]) or IsUnitType(builder[i], UNIT_TYPE_STRUCTURE) or IsUnitLoaded(builder[i]) then  // prevent WIPS build and harvest
			if TowerRushSetBuilder(u, i) then
				set i = i + 1
				call GroupRemoveUnit(tempg,builder[i])  // Prevent cannot build tower
				call GroupRemoveUnit(tower_rush_power,builder[i])
			endif
		endif
		call GroupRemoveUnit(g,u)
	endloop
	if race_has_power_build and tower_attack_run == true then  // fix AI pull all peon to build tower
		set i = 41
		loop
			exitwhen i > 45  //prevent harvest gold peon more then 5 , so just control 3 peon
			if builder[i] == null or not UnitAlive(builder[i]) or not IsUnitInGroup(builder[i], tempg) then
				set builder[i] = FirstOfGroup(tempg)
				if i > 42 then
					call RemoveGuardPosition(builder[i])
					call GroupAddUnit(tower_rush_power,builder[i])
					call IssueImmediateOrder(builder[i], "autoharvestgold")
				elseif id == 0 then
					call RecycleGuardPosition(builder[i])
				endif
			endif
			set id = GetUnitCurrentOrder(builder[i])
			if id == OrderId("harvest") or id == OrderId("resumeharvesting") then  // no need do anything
			elseif i > 42 then
				call IssueImmediateOrder(builder[i], "autoharvestgold")
			endif
			call GroupRemoveUnit(tempg,builder[i])
			set i = i + 1
		endloop
		call GroupRemoveUnit(tower_rush_power,builder[41])  // give AI 2 peon build other construct
		call GroupRemoveUnit(tower_rush_power,builder[42])
		//call RecycleGuardPosition(builder[41])
		loop
			set u = FirstOfGroup(tempg)
			exitwhen u == null
			set id = GetUnitCurrentOrder(u)
			if id == OrderId("harvest") or id == OrderId("resumeharvesting") then  // no need do anything
			elseif not IsUnitInGroup(u, tower_rush_power) then
				call RemoveGuardPosition(u)
				call GroupAddUnit(tower_rush_power,u)
				call IssueImmediateOrder(u, "autoharvestlumber")
			endif
			call GroupRemoveUnit(tempg,u)
		endloop
	endif

	if towers_built < buildtries and tower_attack_run == true then
		if GetItemNumberOnUnit(race_tower_item, builder[0]) > 0 then
			call TowerRushHeroControl_dk(builder[0], GetUnitLoc(builder[0]), t)
		endif
		if IsPointBlighted(GetLocationX(t), GetLocationY(t)) and tower_used_item == false and IsPointBlighted(GetLocationX(home_location), GetLocationY(home_location)) then
			set tower_used_item = true  //UD item used success
		endif
		set i = 1
		if tower_peon_run != true then
			loop
				exitwhen i > race_tower_peon
				call GroupClear(g)
				call GroupEnumUnitsInRange(g, GetUnitX(builder[i]),GetUnitY(builder[i]), 1000 ,null)
				set g = SelectUnittype(g, UNIT_TYPE_TOWNHALL, true)
				call TowerRushBuilderFirstControl_d(builder[i], FirstOfGroup(g))
				set i = i + 1
			endloop
			set tower_peon_run = true
			set time_next_try = 4
		else
			loop
				exitwhen i > race_tower_peon
				call TowerRushBuilderControl_dk(builder[i], GetUnitLoc(builder[i]), t, CanBuild)
				set i = i + 1
			endloop
			set time_next_try = 2
		endif
	endif

	call DestroyGroup(tempg)
	set tempg = null
	call DestroyGroup(g)
	set g = null
	call RemoveLocation(t)
	set t = null
	set u = null
	call TQAddJob(RMax(time_next_try,1), TOWER_RUSH, 0)
endfunction

#ENDIF