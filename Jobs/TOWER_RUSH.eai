#IFDEF GLOBAL

#ELSE

// ######################## Tower Rush ##############################
// #  Created by Strategy Master 13/07/05. Controls all part of the
// #  tower rush when tower rush check comes true.
// ##################################################################

function TowerRushBuilderControl takes unit u, location l returns nothing
    local real builder_x = 0
    local real builder_y = 0
    local integer buildrange = 1100
	local integer randomnum = GetRandomInt(1,4)
	local unit loccheck = null
	local location unitloc = null
	local location t = null
	
	if towers_built < 3 then
		set t = GetProjectedLoc(tower_target_loc, GetSubtractionLoc(tower_target_loc, toweringplayerloc), 600)	
	elseif towers_built < 6 then
		set t = GetProjectedLoc(tower_target_loc, GetSubtractionLoc(tower_target_loc, toweringplayerloc), 350)	
	elseif towers_built <= 9 then
		set t = Location(GetLocationX(tower_target_loc), GetLocationY(tower_target_loc))	
	endif
	
	if first_tower_point_x == 0 and first_tower_point_y == 0 then
		set first_tower_point_x = GetLocationX(t)
		set first_tower_point_y = GetLocationY(t)
		set enemy_point_x = GetLocationX(tower_target_loc)
		set enemy_point_y = GetLocationY(tower_target_loc)		
	endif
	
	if DistanceBetweenPoints(l, tower_target_loc) > buildrange and GetUnitCurrentOrder(u) != OrderId("move") then
		call CreateDebugTag("TRush: builder moving", 10, u, 4.00, 2.00)
		call IssuePointOrderLoc(u, "move", t)
	elseif towers_built == 0 and DistanceBetweenPoints(l, tower_target_loc) <= buildrange and GetUnitCurrentOrder(u) != OrderId("smart") and GetUnitCurrentOrder(u) != OrderId("repair") then
		if not IsTerrainPathable(GetLocationX(l), GetLocationY(l), PATHING_TYPE_BUILDABILITY) then
			call IssueImmediateOrder(u, "stop")
			call CreateDebugTag("TRush: First Building", 10, u, 4.00, 2.00)
			set loccheck = CreateUnit(Player(PLAYERPASSIVE), old_id[race_tower_id], first_tower_point_x, first_tower_point_y, 270.0)
			set unitloc = GetUnitLoc(loccheck)
			//set first_tower_point_x = GetLocationX(unitloc)
			//set first_tower_point_y = GetLocationY(unitloc)
			call RemoveUnit(loccheck)
			set loccheck = null
			call RemoveLocation(unitloc)
			set unitloc = null
			if GetGold() < GetUnitGoldCost2(race_tower_id) or GetWood() < GetUnitWoodCost2(race_tower_id) then
			//set gold_buffer = GetUnitGoldCost2(towerid)
			//set wood_buffer = GetUnitWoodCost2(towerid)
			else
			//set gold_buffer = 0
			//set wood_buffer = 0
				set towers_built = 1
				call IssueBuildOrderById(u, old_id[race_tower_id], first_tower_point_x, first_tower_point_y)
			endif
		else
			call CreateDebugTag("TRush: Not Buildable location", 10, u, 4.00, 2.00)
			call IssuePointOrderLoc(u, "move", t)
		endif
	elseif DistanceBetweenPoints(l, tower_target_loc) <= buildrange and GetUnitCurrentOrder(u) != OrderId("smart") and GetUnitCurrentOrder(u) != OrderId("repair") then
		if towers_built < 3 or (towers_built < 6 and GetGold() >= GetUnitGoldCost(race_tower_id) and GetWood() >= GetUnitWoodCost(race_tower_id)) or (towers_built <= 9 and GetGold() >= GetUnitGoldCost(race_tower_id)*2 and GetWood() >= GetUnitWoodCost(race_tower_id)*2) then
			set builder_x = GetLocationX(t)
			set builder_y = GetLocationY(t)				
			//set builder_x = ((enemy_point_x - first_tower_point_x) / 6) + first_tower_point_x
			//set builder_y = ((enemy_point_y - first_tower_point_y) / 6) + first_tower_point_y	
		//else
			//set builder_x = ((enemy_point_x - GetLocationX(loc1)) / 6) + GetLocationX(loc1) 
			//set builder_y = ((enemy_point_x - GetLocationX(loc1)) / 6) + GetLocationY(loc1)
			//set builder_x = GetLocationX(l) - GetRandomInt(100,300)
			//set builder_y = GetLocationY(l) - GetRandomInt(100,300)				
		//endif
			set loccheck = CreateUnit(Player(PLAYERPASSIVE), old_id[race_tower_id], builder_x, builder_y, 270.0)
			set unitloc = GetUnitLoc(loccheck)
			set builder_x = GetLocationX(unitloc)
			set builder_y = GetLocationY(unitloc)
			call RemoveUnit(loccheck)
			set loccheck = null
			call RemoveLocation(unitloc)
			set unitloc = null
			if not IsTerrainPathable(builder_x, builder_y, PATHING_TYPE_BUILDABILITY) then
				call CreateDebugTag("TRush: Building", 10, u, 4.00, 2.00)
				if GetGold() < GetUnitGoldCost2(race_tower_id) or GetWood() < GetUnitWoodCost2(race_tower_id) then
					//set gold_buffer = GetUnitGoldCost2(towerid)
					//set wood_buffer = GetUnitWoodCost2(towerid)
				else
					//set gold_buffer = 0
					//set wood_buffer = 0
					call IssueBuildOrderById(u, old_id[race_tower_id], builder_x, builder_y)
				endif
			else
				call CreateDebugTag("TRush: Not Buildable location", 10, u, 4.00, 2.00)
				call IssuePointOrderLoc(u, "move", t)
			endif
		endif
	else
	endif
	
			call RemoveLocation(t)
			set t = null	
endfunction

function TowerRushJob takes nothing returns nothing
    local group g = CreateGroup()
    local unit u = null
    local integer requirement = race_towerrush_requirement
    local integer towerid = race_tower_id
    local integer upgradeid = race_tower_upgrade
    local integer buildtries = 9
    local real time_next_try = 0
    local location loc1 = null
    local location loc2 = null
    local location loc3 = null
    local integer i = 0
    local integer v = 0
	local integer randomnum

	
	  call DisplayToAllJobDebug("TOWER_RUSH Job START")
	
// This makes sure towers that can be upgraded are all upgraded when tower rush finishes
if upgradeid != 0 then
	call GroupEnumUnitsInRange(g, first_tower_point_x, first_tower_point_y, 1000, null)
	loop
    		set u = FirstOfGroup(g)
    		exitwhen u == null
    		if GetOwningPlayer(u) == ai_player and GetUnitTypeId(u) == old_id[towerid] and GetUnitState(u, UNIT_STATE_LIFE) > 0 then
                   call TQAddJob(5, TOWER_RUSH, 0)	
				if GetGold() < GetUnitGoldCost2(upgradeid) or GetWood() < GetUnitWoodCost2(upgradeid) then
					set gold_buffer = GetUnitGoldCost2(upgradeid)
      				set wood_buffer = GetUnitWoodCost2(upgradeid)
				else
		      		call IssueImmediateOrderById(u, old_id[upgradeid])
				endif
			  return
		else

		endif 	
		call GroupRemoveUnit(g, u)
	endloop
	

endif

//   call Trace("Getting ready to tower rush")
//
    if GetPlayerSlotState(rushedplayer) != PLAYER_SLOT_STATE_PLAYING or GetPlayerUnitCount(rushedplayer,true) <= 0 or (towers_built == 0 and not (first_tower_point_x == 0 and first_tower_point_y == 0) and GetLocationNonCreepStrength(first_tower_point_x, first_tower_point_y, 1500) > GetOwnStrength() * 4) then    //or (builder[1] != null and (GetUnitState(builder[1], UNIT_STATE_LIFE) <= 0  and GetUnitState(builder[3], UNIT_STATE_LIFE) <= 0 and GetUnitState(builder[2], UNIT_STATE_LIFE) <= 0)) then
        call Trace("I have finished the tower rush")
        call RecycleGuardPosition(builder[1])
        call RecycleGuardPosition(builder[2])
        call RecycleGuardPosition(builder[3])
        set builder[1] = null
        set builder[2] = null
        set builder[3] = null
		set towers_built = 0
        set first_tower_point_x = 0
        set first_tower_point_y = 0
		call RemoveLocation(toweringplayerloc)
        set enemy_point_x = 0
        set enemy_point_y = 0
        call RemoveLocation(tower_target_loc)
		set towerrush = false
	    set gold_buffer = 0
		set wood_buffer = 0
		call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(home_location), GetLocationY(home_location))
	  return
    endif

	if towers_built < 3 then
		set gold_buffer = GetUnitGoldCost2(towerid) * 2
		set wood_buffer = GetUnitWoodCost2(towerid) * 2
	elseif towers_built < 6 then
		set gold_buffer = GetUnitGoldCost2(towerid)
		set wood_buffer = GetUnitWoodCost2(towerid) 
	elseif towers_built <= 9 then
		set gold_buffer = 0
		set wood_buffer = 0
	endif
		
	call GroupEnumUnitsOfPlayer(g, ai_player, null)
	set g = SelectByAlive(g,true)
	set g = SelectById(g, old_id[racial_peon], true)
	set g = GetNearestSubGroupOfGroup(g, tower_target_loc, 3)  //g not destroyed memory leak - need to modify the code

	if (builder[1] == null or GetUnitState(builder[1], UNIT_STATE_LIFE) <= 0) and GetUnitCountDone(old_id[racial_peon]) > 7 then
		set builder[1] = FirstOfGroup(g)
	endif
	call GroupRemoveUnit(g,builder[1])
	if (builder[2] == null or GetUnitState(builder[2], UNIT_STATE_LIFE) <= 0) and GetUnitCountDone(old_id[racial_peon]) > 7 then
		set builder[2] = FirstOfGroup(g)
	endif	
	call GroupRemoveUnit(g,builder[2])
	if (builder[3] == null or GetUnitState(builder[3], UNIT_STATE_LIFE) <= 0) and GetUnitCountDone(old_id[racial_peon]) > 7 then
		set builder[3] = FirstOfGroup(g)
	endif
	call GroupRemoveUnit(g,builder[3])
    
    if towers_built < buildtries then
	    if TownCountDone(requirement) <= 0 then 
			set time_next_try = 5
		else
	        call RemoveGuardPosition(builder[1])
	        call RemoveGuardPosition(builder[2])
	        call RemoveGuardPosition(builder[3])
	        set loc1 = GetUnitLoc(builder[1])
			set loc2 = GetUnitLoc(builder[2])
			set loc3 = GetUnitLoc(builder[3])

	        set time_next_try = 2

			call TowerRushBuilderControl(builder[1], loc1)
			call TowerRushBuilderControl(builder[2], loc2)
			call TowerRushBuilderControl(builder[3], loc3)
		endif
	endif

	set towers_built = 0
	call GroupEnumUnitsInRange(g, enemy_point_x, enemy_point_y, 3000, null)
	loop
    	set u = FirstOfGroup(g)
    	exitwhen u == null
		exitwhen towers_built == buildtries
    	if GetOwningPlayer(u) == ai_player and GetUnitTypeId(u) == old_id[towerid] then
    		set towers_built = towers_built + 1
			if GetUnitState(u, UNIT_STATE_LIFE) < GetUnitState(u, UNIT_STATE_MAX_LIFE) then
    			set randomnum = GetRandomInt(1,3)
				if GetUnitCurrentOrder(builder[randomnum]) != OrderId("repair") then
					call IssueTargetOrder(builder[randomnum], "repair", u)
				endif
			endif
		endif 	
		if upgradeid != 0 and GetUnitTypeId(u) == old_id[upgradeid] then
			set towers_built = towers_built + 1
		endif
		call GroupRemoveUnit(g, u)
	endloop
    
	call DestroyGroup(g)
	set g = null
	call RemoveLocation(loc1)
	call RemoveLocation(loc2)
	call RemoveLocation(loc3)
    set loc1 = null
    set loc2 = null
    set loc3 = null
    call TQAddJob(RMax(time_next_try,1), TOWER_RUSH, 0)
endfunction

#ENDIF