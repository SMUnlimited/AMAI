#IFDEF GLOBAL
    boolean town_threatened = false
    integer array town_owner
    location array town_loc
    real array town_value
    real array town_threat
    integer array town_count
    integer array town_threat_army
    boolean array town_can_tp
    integer most_threatened_town = -1
    integer most_threatened_enemy_town = -1
    integer max_value_town = -1
    integer home_town = -1
    integer town_num = 0
    real town_radius = 2500
    group in_town_group = CreateGroup()
#ELSE
function CopyTown takes integer from, integer to returns nothing
  set town_owner[to] = town_owner[from]
  set town_loc[to] = town_loc[from]
  set town_value[to] = town_value[from]
  set town_threat[to] = town_threat[from]
  set town_count[to] = town_count[from]
  set town_can_tp[to] = town_can_tp[from]
  // Not below are temporary to keep usage of it accurate as army track will run after this and re-evaluate.
  if most_threatened_town == from then
    set most_threatened_town = to
  endif
  if most_threatened_enemy_town == from then
    set most_threatened_enemy_town = to
  endif
  if most_threatened_player_town == from then
    set most_threatened_player_town = to
  endif
  if home_town == from then
    set home_town = to
  endif
  if max_value_town == from then
    set max_value_town = to
  endif
endfunction

function TrackTown takes integer num returns boolean
  local group g = CreateGroup()
  local unit u = null
  //local location l = null
  local real x = 0
  local real y = 0
  local integer p = town_owner[num]
  local player tp = Player(p)
  set town_value[num] = 0
  set town_count[num] = 0
  set town_can_tp[num] = false
  call GroupEnumUnitsInRangeOfLoc(g, town_loc[num], town_radius, null)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if GetOwningPlayer(u) == tp and IsUnitType(u, UNIT_TYPE_STRUCTURE) and GetUnitState(u, UNIT_STATE_LIFE) >= 1 and not IsUnitHidden(u) and not IsUnitInGroup(u, in_town_group) then
      call GroupAddUnit(in_town_group, u)
      set x = x + GetUnitX(u)  // Prevent loc exceeding map range
      set y = y + GetUnitY(u)
      //set l = GetSumLoc_dd(l,GetUnitLoc(u))
      set town_count[num] = town_count[num] + 1
      set town_value[num] = town_value[num] + 1
      if IsUnitType(u, UNIT_TYPE_TOWNHALL) then
        set town_can_tp[num] = true
      endif
    endif
    call GroupRemoveUnit(g, u)
  endloop
  call DestroyGroup(g)
  set g = null
  call RemoveLocation(town_loc[num])
  set tp = null
  if town_count[num] == 0 then
    set town_loc[num] = null
    return false
  endif
  set x = x / Max(town_count[num], 1)
  set y = y / Max(town_count[num], 1)
  set town_loc[num] = Location(x, y)
  if Player(p) == ai_player then
    call CreateDebugTagLoc("Tracked Town: " + Int2Str(num) + " Structures: " + Int2Str(town_count[num]), 16, x, y, 8.00, 3.00)
    if town_value[num] > max_value_town then
      set max_value_town = num
    endif
    if DistanceBetweenPoints(town_loc[num], home_location) <= town_radius then
      set home_town = num
    endif
  endif
  return true
endfunction

function TrackExistingTowns takes nothing returns nothing
  local integer i = 0
  local integer validTownNum = 0
  loop
    exitwhen i >= town_num
    if TrackTown(i) then
      if i != validTownNum then
        call CopyTown(i, validTownNum)
      endif
      set validTownNum = validTownNum + 1
    else
      if most_threatened_town == i then
        set most_threatened_town = -1
      endif
      if most_threatened_enemy_town == i then
        set most_threatened_enemy_town = -1
      endif
      if most_threatened_player_town == i then
        set most_threatened_player_town = -1
      endif
      if home_town == i then
        set home_town = -1
      endif
      if max_value_town == i then
        set max_value_town = -1
      endif
    endif
    set i = i + 1
  endloop
  set town_num = validTownNum
endfunction

function SeedNewTownAtLoc takes location l, integer p returns nothing
  set town_owner[town_num] = p
  set town_loc[town_num] = l
  set town_threat[town_num] = 0
  if TrackTown(town_num) then
    set town_num = town_num + 1
  endif
endfunction

function SeedNewTownsForPlayer takes integer p returns nothing
  local group g = CreateGroup()
  local group tg = CreateGroup()
  local unit u = null
  call GroupEnumUnitsOfPlayer(g, Player(p), null)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if UnitAlive(u) and not IsUnitHidden(u) and not IsUnitInGroup(u, in_town_group) then
      if IsUnitType(u, UNIT_TYPE_TOWNHALL) or IsUnitGoldMine(u) then
        call SeedNewTownAtLoc(GetUnitLoc(u), p)
      elseif IsUnitType(u, UNIT_TYPE_STRUCTURE) then
        call GroupAddUnit(tg, u)
      endif
    endif
    call GroupRemoveUnit(g, u)
  endloop
  loop
    set u = FirstOfGroup(tg)
    exitwhen u == null
    if not IsUnitInGroup(u, in_town_group) then
      call SeedNewTownAtLoc(GetUnitLoc(u), p)
    endif
    call GroupRemoveUnit(tg, u)
  endloop
  call DestroyGroup(tg)
  set tg = null
  call DestroyGroup(g)
  set g = null
endfunction

function SeedNewTowns takes nothing returns nothing
  local integer p = 0
  local player sp = null
  loop
    exitwhen p >= GetBJMaxPlayers()
    set sp = Player(p)
    if sp != null and GetPlayerSlotState(sp) == PLAYER_SLOT_STATE_PLAYING and not IsPlayerObserver(sp) and GetPlayerStructureCount(sp, false) > 0 then
      call SeedNewTownsForPlayer(p)
    endif
    set p = p + 1
  endloop
  if home_town == -1 then
    set home_town = max_value_town // most valuable town is likely the home town
  endif
  set sp = null
endfunction

function TownTrackJob takes nothing returns nothing
  call DisplayToAllJobDebug("TOWN_TRACK Job Start")
  if not town_threatened and not TownThreatened() then
    call GroupClear(in_town_group)
    set home_town = -1
    call TrackExistingTowns()
    call SeedNewTowns()
  endif
  //call TQAddJob(15, TOWN_TRACK, 0)
  call TQAddJob(1, ARMY_TRACK, 0) // Always runs army track after updating towns as otherwise most threatened town will not be correct
endfunction
#ENDIF