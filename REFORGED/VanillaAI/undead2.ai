//==================================================================================================
//  Undead Melee Strategic AI
//==================================================================================================
globals
    boolean basic_opening       = true

    boolean b_hero1_done        = false
    boolean b_hero2_done        = false
    boolean b_hero3_done        = false
    boolean b_hero4_done        = false
    boolean b_sphinx_ok         = false

    integer AG                  = 0 // attacking ghouls
    integer WG                  = 0 // wood ghouls

    integer c_abom              = 0
    integer c_abom_done         = 0
    integer c_acolyte           = 0
    integer c_altar_done        = 0
    integer c_banshee           = 0
    integer c_banshee_done      = 0
    integer c_boneyard_done     = 0
    integer c_citadel_done      = 0
    integer c_fiend             = 0
    integer c_fiend_done        = 0
    integer c_food_made         = 0
    integer c_food_used         = 0
    integer c_garg              = 0
    integer c_garg_done         = 0
    integer c_ghoul_done        = 0
    integer c_gold              = 0
    integer c_gold_owned        = 0
    integer c_grave_done        = 0
    integer c_halls_done        = 0
    integer c_hero1_done        = 0
    integer c_hero2_done        = 0
    integer c_hero3_done        = 0
    integer c_mines             = 0
    integer c_neclis            = 0
    integer c_neclis_done       = 0
    integer c_necro             = 0
    integer c_necro_done        = 0
    integer c_slaughter_done    = 0
    integer c_sphinx_done       = 0
    integer c_spirit            = 0
    integer c_spirit_done       = 0
    integer c_statue            = 0
    integer c_statue_done       = 0
    integer c_temple_done       = 0
    integer c_tomb_done         = 0
    integer c_undead_mines      = 0
    integer c_wagon             = 0
    integer c_wagon_done        = 0
    integer c_web_fiend_done    = 0
    integer c_wood              = 0
    integer c_wyrm_done         = 0
    integer c_zep               = 0
    integer c_zig               = 0
    integer c_zig_done          = 0
    integer c_zif               = 0
    integer c_zif_done          = 0
    integer hero_id4            = 0
    integer array skills4
    boolean HarvestFix          = true
    unit array laboratory
    unit array herounit
    location homeloc = GetStartLocationLoc(GetPlayerStartLocation(Player(GetAiPlayer())))
endglobals

//--------------------------------------------------------------------------------------------------
//  set_skills
//--------------------------------------------------------------------------------------------------
function set_skills takes nothing returns nothing

    set skill[ 1] = FROST_ARMOR
    set skill[ 2] = FROST_NOVA
    set skill[ 3] = FROST_ARMOR
    set skill[ 4] = DARK_RITUAL
    set skill[ 5] = FROST_NOVA
    set skill[ 6] = DEATH_DECAY
    set skill[ 7] = FROST_NOVA
    set skill[ 8] = DARK_RITUAL
    set skill[ 9] = FROST_ARMOR
    set skill[10] = DARK_RITUAL
    call SetSkillArray(1,LICH)

    set skill[ 1] = FROST_NOVA
    set skill[ 2] = FROST_ARMOR
    set skill[ 3] = FROST_NOVA
    set skill[ 4] = DARK_RITUAL
    set skill[ 5] = FROST_NOVA
    set skill[ 6] = DEATH_DECAY
    set skill[ 7] = FROST_ARMOR
    set skill[ 8] = DARK_RITUAL
    set skill[ 9] = FROST_ARMOR
    set skill[10] = DARK_RITUAL
    call SetSkillArray(2,LICH)

    set skill[ 1] = FROST_ARMOR
    set skill[ 2] = FROST_NOVA
    set skill[ 3] = FROST_ARMOR
    set skill[ 4] = DARK_RITUAL
    set skill[ 5] = FROST_ARMOR
    set skill[ 6] = DEATH_DECAY
    set skill[ 7] = FROST_NOVA
    set skill[ 8] = DARK_RITUAL
    set skill[ 9] = FROST_NOVA
    set skill[10] = DARK_RITUAL
    call SetSkillArray(3,LICH)

    set skill[ 1] = CARRION_SWARM
    set skill[ 2] = SLEEP
    set skill[ 3] = CARRION_SWARM
    set skill[ 4] = VAMP_AURA
    set skill[ 5] = CARRION_SWARM
    set skill[ 6] = INFERNO
    set skill[ 7] = VAMP_AURA
    set skill[ 8] = SLEEP
    set skill[ 9] = VAMP_AURA
    set skill[10] = SLEEP
    call SetSkillArray(1,DREAD_LORD)

    set skill[ 1] = SLEEP
    set skill[ 2] = VAMP_AURA
    set skill[ 3] = SLEEP
    set skill[ 4] = CARRION_SWARM
    set skill[ 5] = SLEEP
    set skill[ 6] = INFERNO
    set skill[ 7] = CARRION_SWARM
    set skill[ 8] = VAMP_AURA
    set skill[ 9] = CARRION_SWARM
    set skill[10] = VAMP_AURA
    call SetSkillArray(2,DREAD_LORD)

    set skill[ 1] = CARRION_SWARM
    set skill[ 2] = VAMP_AURA
    set skill[ 3] = SLEEP
    set skill[ 4] = VAMP_AURA
    set skill[ 5] = CARRION_SWARM
    set skill[ 6] = INFERNO
    set skill[ 7] = CARRION_SWARM
    set skill[ 8] = SLEEP
    set skill[ 9] = VAMP_AURA
    set skill[10] = SLEEP
    call SetSkillArray(3,DREAD_LORD)

    set skill[ 1] = DEATH_COIL
    set skill[ 2] = UNHOLY_AURA
    set skill[ 3] = DEATH_COIL
    set skill[ 4] = UNHOLY_AURA
    set skill[ 5] = DEATH_COIL
    set skill[ 6] = ANIM_DEAD
    set skill[ 7] = UNHOLY_AURA
    set skill[ 8] = DEATH_PACT
    set skill[ 9] = DEATH_PACT
    set skill[10] = DEATH_PACT
    call SetSkillArray(1,DEATH_KNIGHT)
    call SetSkillArray(2,DEATH_KNIGHT)

    set skill[ 1] = UNHOLY_AURA
    set skill[ 2] = DEATH_COIL
    set skill[ 3] = UNHOLY_AURA
    set skill[ 4] = DEATH_COIL
    set skill[ 5] = UNHOLY_AURA
    set skill[ 6] = ANIM_DEAD
    set skill[ 7] = DEATH_COIL
    set skill[ 8] = DEATH_PACT
    set skill[ 9] = DEATH_PACT
    set skill[10] = DEATH_PACT
    call SetSkillArray(3,DEATH_KNIGHT)

    set skill[ 1] = CARRION_SCARAB
    set skill[ 2] = IMPALE
    set skill[ 3] = CARRION_SCARAB
    set skill[ 4] = THORNY_SHIELD
    set skill[ 5] = CARRION_SCARAB
    set skill[ 6] = LOCUST_SWARM
    set skill[ 7] = IMPALE
    set skill[ 8] = THORNY_SHIELD
    set skill[ 9] = IMPALE
    set skill[10] = THORNY_SHIELD
    call SetSkillArray(1,CRYPT_LORD)

    set skill[ 1] = IMPALE
    set skill[ 2] = THORNY_SHIELD
    set skill[ 3] = IMPALE
    set skill[ 4] = THORNY_SHIELD
    set skill[ 5] = IMPALE
    set skill[ 6] = LOCUST_SWARM
    set skill[ 7] = THORNY_SHIELD
    set skill[ 8] = CARRION_SCARAB
    set skill[ 9] = CARRION_SCARAB
    set skill[10] = CARRION_SCARAB
    call SetSkillArray(2,CRYPT_LORD)

    set skill[ 1] = IMPALE
    set skill[ 2] = THORNY_SHIELD
    set skill[ 3] = IMPALE
    set skill[ 4] = CARRION_SCARAB
    set skill[ 5] = THORNY_SHIELD
    set skill[ 6] = LOCUST_SWARM
    set skill[ 7] = THORNY_SHIELD
    set skill[ 8] = CARRION_SCARAB
    set skill[ 9] = IMPALE
    set skill[10] = CARRION_SCARAB
    call SetSkillArray(3,CRYPT_LORD)

    if hero_id != DEATH_KNIGHT and hero_id2 != DEATH_KNIGHT and hero_id3 != DEATH_KNIGHT then
        set hero_id4 = DEATH_KNIGHT
    elseif hero_id != DREAD_LORD and hero_id2 != DREAD_LORD and hero_id3 != DREAD_LORD then
        set hero_id4 = DREAD_LORD
    elseif hero_id != LICH and hero_id2 != LICH and hero_id3 != LICH then
        set hero_id4 = LICH
    elseif hero_id != CRYPT_LORD and hero_id2 != CRYPT_LORD and hero_id3 != CRYPT_LORD then
        set hero_id4 = CRYPT_LORD
    endif
    if hero_id4 == LICH then
        set skills4[ 1] = FROST_NOVA
        set skills4[ 2] = FROST_ARMOR
        set skills4[ 3] = FROST_NOVA
        set skills4[ 4] = FROST_ARMOR
        set skills4[ 5] = FROST_NOVA
        set skills4[ 6] = DEATH_DECAY
        set skills4[ 7] = FROST_ARMOR
        set skills4[ 8] = DARK_RITUAL
        set skills4[ 9] = DARK_RITUAL
        set skills4[10] = DARK_RITUAL
    elseif hero_id4 == DREAD_LORD then
        set skills4[ 1] = CARRION_SWARM
        set skills4[ 2] = VAMP_AURA
        set skills4[ 3] = CARRION_SWARM
        set skills4[ 4] = SLEEP
        set skills4[ 5] = CARRION_SWARM
        set skills4[ 6] = INFERNO
        set skills4[ 7] = SLEEP
        set skills4[ 8] = VAMP_AURA
        set skills4[ 9] = SLEEP
        set skills4[10] = VAMP_AURA
    elseif hero_id4 == DEATH_KNIGHT then
        set skills4[ 1] = DEATH_COIL
        set skills4[ 2] = UNHOLY_AURA
        set skills4[ 3] = DEATH_COIL
        set skills4[ 4] = UNHOLY_AURA
        set skills4[ 5] = DEATH_COIL
        set skills4[ 6] = ANIM_DEAD
        set skills4[ 7] = UNHOLY_AURA
        set skills4[ 8] = DEATH_PACT
        set skills4[ 9] = DEATH_PACT
        set skills4[10] = DEATH_PACT
    elseif hero_id4 == CRYPT_LORD then
        set skills4[ 1] = IMPALE
        set skills4[ 2] = CARRION_SCARAB
        set skills4[ 3] = IMPALE
        set skills4[ 4] = CARRION_SCARAB
        set skills4[ 5] = IMPALE
        set skills4[ 6] = LOCUST_SWARM
        set skills4[ 7] = THORNY_SHIELD
        set skills4[ 8] = CARRION_SCARAB
        set skills4[ 9] = THORNY_SHIELD
        set skills4[10] = THORNY_SHIELD
    endif
endfunction

// fix 1.31 hero cannot Learning Skills
function SetHeroUint takes unit u, integer id returns unit
    local group g = CreateGroup()
    call GroupEnumUnitsOfPlayer(g, ai_player, null)
    loop
        set u = FirstOfGroup(g)
        exitwhen u == null
        if GetUnitTypeId(u) == id and UnitAlive(u) and not IsUnitHidden(u) then
            call DestroyGroup(g)
            set g = null
            return u
        endif
        call GroupRemoveUnit(g, u )
    endloop
    call DestroyGroup(g)
    set g = null
    return u
endfunction

function SkillArraysfix takes nothing returns integer
    local integer level = GetHeroLevelAI()
    if level > max_hero_level then
        set max_hero_level = level
    endif

    if herounit[1] == null then
        set herounit[1] = SetHeroUint(herounit[1], hero_id)
    endif
    if herounit[2] == null then
        set herounit[2] = SetHeroUint(herounit[2], hero_id2)
    endif
    if herounit[3] == null then
        set herounit[3] = SetHeroUint(herounit[3], hero_id3)
    endif
    if herounit[4] == null then
        set herounit[4] = SetHeroUint(herounit[4], hero_id4)
    endif
    if herounit[1] != null and UnitAlive(herounit[1]) then
        call SelectHeroSkill(herounit[1], skills1[level])
    endif
    if herounit[2] != null and UnitAlive(herounit[2]) then
        call SelectHeroSkill(herounit[2], skills2[level])
    endif
    if herounit[3] != null and UnitAlive(herounit[3]) then
        call SelectHeroSkill(herounit[3], skills3[level])
    endif
    if herounit[4] != null and UnitAlive(herounit[4]) then
        call SelectHeroSkill(herounit[4], skills4[level])
    endif
    if GetHeroId() == hero_id then
        return skills1[level]
    elseif GetHeroId() == hero_id2 then
        return skills2[level]
    elseif GetHeroId() == hero_id3 then
        return skills3[level]
    elseif GetHeroId() == hero_id4 then
        return skills4[level]
    endif
    return 0
endfunction

//--------------------------------------------------------------------------------------------------
//  setup_force
//--------------------------------------------------------------------------------------------------
function setup_force takes nothing returns nothing
    call AwaitMeleeHeroes()
    call InitMeleeGroup()

    call SetAssaultGroup( AG,AG, GHOUL )

    call SetMeleeGroup( hero_id     )
    call SetMeleeGroup( hero_id2    )
    call SetMeleeGroup( hero_id3    )
    call SetMeleeGroup( CRYPT_FIEND )
    call SetMeleeGroup( ABOMINATION )
    call SetMeleeGroup( NECRO       )
    call SetMeleeGroup( BANSHEE     )
    call SetMeleeGroup( GARGOYLE    )
    call SetMeleeGroup( FROST_WYRM  )
    call SetMeleeGroup( OBS_STATUE  )

    if c_sphinx_done >= 1 then
        call SetMeleeGroup( BLK_SPHINX  )
    endif

    if GetUnitCountDone(hero_id4) > 0 then
        call SetMeleeGroup( hero_id4)
    endif

    //elf
    call SetMeleeGroup( ARCHER      )
    call SetMeleeGroup( HUNTRESS    )
    call SetMeleeGroup( DRUID_TALON )
    call SetMeleeGroup( DRUID_CLAW  )
    call SetMeleeGroup( DRYAD       )
    call SetMeleeGroup( CHIMAERA    )
    call SetMeleeGroup( MOUNTAIN_GIANT)
    call SetMeleeGroup( FAERIE_DRAGON)

    if GetUnitCountDone(HIPPO) > 0 then
        call SetMeleeGroup( HIPPO   )
    endif

    if GetUnitCountDone(HIPPO_RIDER) > 0 then
        call SetMeleeGroup( HIPPO_RIDER)
    endif
    call SetMeleeGroup( DRUID_TALON_M)
    call SetMeleeGroup( DRUID_CLAW_M)

    //orc
    call SetMeleeGroup( GRUNT       )
    call SetMeleeGroup( RAIDER      )
    call SetMeleeGroup( TAUREN      )
    call SetMeleeGroup( HEAD_HUNTER )
    call SetMeleeGroup( BERSERKER   )
    call SetMeleeGroup( WYVERN      )
    call SetMeleeGroup( WITCH_DOCTOR)
    call SetMeleeGroup( SHAMAN      )
    call SetMeleeGroup( KODO_BEAST  )
    call SetMeleeGroup( BATRIDER    )
    call SetMeleeGroup( SPIRIT_WALKER)

    //human
    call SetMeleeGroup( FOOTMEN     )
    call SetMeleeGroup( KNIGHT      )
    call SetMeleeGroup( RIFLEMEN    )
    call SetMeleeGroup( PRIEST      )
    call SetMeleeGroup( SORCERESS   )
    call SetMeleeGroup( GRYPHON     )
    call SetMeleeGroup( COPTER      )
    call SetMeleeGroup( SPELL_BREAKER)
    call SetMeleeGroup( HUMAN_DRAGON_HAWK)
    call SetMeleeGroup( TANK )
    call SetMeleeGroup( ROCKET_TANK )

    call SetInitialWave(10)
endfunction

//--------------------------------------------------------------------------------------------------
//  force_level
//--------------------------------------------------------------------------------------------------
function force_level takes nothing returns integer
    local integer level = 4 // basic hero
    set level = level + 2 * (AG + c_necro_done + c_banshee_done + c_statue_done)
    set level = level + 3 * (c_fiend_done + c_garg_done + c_sphinx_done)
    set level = level + 4 *  c_abom_done
    set level = level + 5 *  c_hero3_done
    set level = level + 6 * (c_hero2_done + c_wyrm_done)
    return level
endfunction

//--------------------------------------------------------------------------------------------------
//  attack_sequence
//--------------------------------------------------------------------------------------------------
function attack_sequence takes nothing returns nothing
    local boolean needs_exp
    local boolean has_siege
    local boolean air_units
    local integer level

    loop
        exitwhen c_hero1_done >= 1
        call Sleep(2)
    endloop

    if MeleeDifficulty() == MELEE_NEWBIE then
        call Sleep(240)
    endif

    call StaggerSleep(0,2)
    loop
        loop
            exitwhen not CaptainRetreating()
            call Sleep(2)
        endloop

        if basic_opening then
            loop
                exitwhen c_ghoul_done >= 6
                call Sleep(1)
            endloop
            set AG = 6
            set WG = c_ghoul_done - AG
        else
            loop
                set WG = Max(0,Min(10 - c_wood / 120,c_ghoul_done))
                set AG = c_ghoul_done - WG
                exitwhen (AG + 2*c_abom_done) >= 4
                call Sleep(1)
            endloop
        endif

        call setup_force()

        set level = force_level()
        set max_creeps = level * 4 / 5
        set min_creeps = max_creeps - 10
        if min_creeps < 0 then
            set min_creeps = 0
        endif

        set needs_exp        = take_exp and (level >= 9 or c_gold_owned < 2000)
        set has_siege        = level >= 40 or c_wagon_done > 0 or c_wyrm_done > 0
        set air_units        = c_garg_done > 0 or c_sphinx_done > 0 or c_wyrm_done > 0
        set allow_air_creeps = (3*c_garg_done + 6*c_wyrm_done + 2*c_web_fiend_done) >= 6

        call SingleMeleeAttack(needs_exp,has_siege,false,air_units)

        set AG = 0
        set WG = c_ghoul_done

        if MeleeDifficulty() == MELEE_NEWBIE then
            call Sleep(60)
        endif
    endloop
endfunction

//--------------------------------------------------------------------------------------------------
//  init_vars
//--------------------------------------------------------------------------------------------------
function init_vars takes nothing returns nothing

    set c_abom              = GetUnitCount(ABOMINATION)
    set c_abom_done         = GetUnitCountDone(ABOMINATION)
    set c_acolyte           = GetUnitCount(ACOLYTE)
    set c_altar_done        = GetUnitCountDone(UNDEAD_ALTAR)
    set c_banshee           = GetUnitCount(BANSHEE)
    set c_banshee_done      = GetUnitCountDone(BANSHEE)
    set c_boneyard_done     = GetUnitCountDone(BONEYARD)
    set c_citadel_done      = GetUnitCountDone(NECROPOLIS_3)
    set c_fiend             = GetUnitCount(CRYPT_FIEND)
    set c_fiend_done        = GetUnitCountDone(CRYPT_FIEND) + GetUnitCountDone('ucrm')
    set c_garg              = TownCount(GARGOYLE)
    set c_garg_done         = TownCountDone(GARGOYLE)
    set c_ghoul_done        = GetUnitCountDone(GHOUL)
    set c_gold              = GetGold()
    set c_gold_owned        = GetGoldOwned()
    set c_grave_done        = GetUnitCountDone(GRAVEYARD)
    set c_halls_done        = TownCountDone(NECROPOLIS_2)
    set c_hero1_done        = GetUnitCountDone(hero_id)
    set c_hero2_done        = GetUnitCountDone(hero_id2)
    set c_hero3_done        = GetUnitCountDone(hero_id3)
    if HarvestFix then
        set c_mines         = GetUnitCountDone(UNDEAD_MINE)
    else
        set c_mines         = GetMinesOwned()
    endif
    set c_neclis            = TownCount(NECROPOLIS_1)
    set c_neclis_done       = TownCountDone(NECROPOLIS_1)
    set c_necro             = GetUnitCount(NECRO)
    set c_necro_done        = GetUnitCountDone(NECRO)
    set c_slaughter_done    = GetUnitCountDone(SLAUGHTERHOUSE)
    set c_sphinx_done       = GetUnitCountDone(BLK_SPHINX)
    set c_spirit            = GetUnitCount(ZIGGURAT_2)
    set c_spirit_done       = GetUnitCountDone(ZIGGURAT_2)
    set c_statue            = GetUnitCount(OBS_STATUE)
    set c_statue_done       = GetUnitCountDone(OBS_STATUE)
    set c_temple_done       = GetUnitCountDone(DAMNED_TEMPLE)
    set c_tomb_done         = GetUnitCountDone(TOMB_OF_RELICS)
    set c_undead_mines      = GetUnitCount(UNDEAD_MINE)
    set c_wagon             = GetUnitCount(MEAT_WAGON)
    set c_wagon_done        = GetUnitCountDone(MEAT_WAGON)
    set c_wood              = GetWood()
    set c_wyrm_done         = GetUnitCountDone(FROST_WYRM)
    set c_zep               = GetUnitCount(ZEPPELIN)
    set c_zig               = TownCount(ZIGGURAT_1)
    set c_zig_done          = TownCountDone(ZIGGURAT_1)
    set c_zif               = GetUnitCount(ZIGGURAT_FROST)
    set c_zif_done          = GetUnitCountDone(ZIGGURAT_FROST)
    set c_food_made         = GetUnitCountDone(NECROPOLIS_1) * GetFoodMade(NECROPOLIS_1) + GetUnitCountDone(NECROPOLIS_2) * GetFoodMade(NECROPOLIS_2) + GetUnitCountDone(NECROPOLIS_3) * GetFoodMade(NECROPOLIS_3) + GetUnitCountDone(ZIGGURAT_1) * GetFoodMade(ZIGGURAT_1) + c_spirit_done * GetFoodMade(ZIGGURAT_2) + c_zif_done * GetFoodMade(ZIGGURAT_FROST)
    set c_food_used         = FoodUsed()

    set b_hero1_done        = GetUnitCountDone(hero_id)  >= 1
    set b_hero2_done        = GetUnitCountDone(hero_id2) >= 1
    set b_hero3_done        = GetUnitCountDone(hero_id3) >= 1
    set b_hero4_done        = GetUnitCountDone(hero_id4) >= 1
    set b_sphinx_ok         = GetUpgradeLevel(UPG_BLK_SPHINX) > 0 

    set WG                  = Max(0,c_ghoul_done - AG)

    if GetUpgradeLevel(UPG_FIEND_WEB) > 0 then
        set c_web_fiend_done = c_fiend_done
    else
        set c_web_fiend_done = 0
    endif

    if basic_opening and (b_hero2_done or (MeleeDifficulty() == MELEE_NEWBIE and c_tomb_done >= 1)) then
        set basic_opening = false
    endif
endfunction

//--------------------------------------------------------------------------------------------------
//  set_vars
//--------------------------------------------------------------------------------------------------
function set_vars takes nothing returns nothing
    loop
        call init_vars()
        call Sleep(1)
    endloop
endfunction

//--------------------------------------------------------------------------------------------------
//  undead_mine
//--------------------------------------------------------------------------------------------------
function undead_mine takes integer townid returns nothing
    if c_gold < 1000 and TownHasMine(townid) then
        call SecondaryTown( townid, 1, UNDEAD_MINE )
    endif
endfunction

//--------------------------------------------------------------------------------------------------
//  do_upgrades
//--------------------------------------------------------------------------------------------------
function do_upgrades takes nothing returns nothing

    if c_fiend >= 1 and c_halls_done > 0 then
        call SetBuildUpgr( 1, UPG_BURROWING )
        call SetBuildUpgr(  1, UPG_FIEND_WEB    )
    endif

    if c_grave_done >= 1 and c_citadel_done >= 1 then
        if c_garg >= 1 then
            call SetBuildUpgr( 1, UPG_STONE_FORM  )
        endif

        call SetBuildUpgr( 1, UPG_GHOUL_FRENZY  )
    endif

    if c_boneyard_done >= 1 then
        call SetBuildUpgr( 1, UPG_WYRM_BREATH )
    endif

    if c_temple_done >= 1 then
        if c_necro >= 1 then
            call SetBuildUpgr( 1, UPG_NECROS )
            if c_citadel_done >= 1 then
                call SetBuildUpgr( 2, UPG_NECROS        )
                call SetBuildUpgr( 2, UPG_SKEL_MASTERY  )
            endif
        endif

        if c_banshee >= 1 then
            call SetBuildUpgr( 1, UPG_BANSHEE )
            if c_citadel_done >= 1 then
                call SetBuildUpgr( 2, UPG_BANSHEE )
            endif
        endif

        if c_necro >= 1 then
            call SetBuildUpgr( 1, UPG_SKEL_LIFE )
        endif
        if c_necro > 5 then
            call SetBuildUpgr( 1, UPG_EXHUME )
        endif
    endif

    if c_grave_done >= 1 then
        call SetBuildUpgr( 1, UPG_CR_ATTACK     )
        call SetBuildUpgr( 1, UPG_CR_ARMOR      )
        call SetBuildUpgr( 1, UPG_UNHOLY_STR    )
        call SetBuildUpgr( 1, UPG_UNHOLY_ARMOR  )

        if c_halls_done >= 1 then
            call SetBuildUpgr( 2, UPG_CR_ATTACK     )
            call SetBuildUpgr( 2, UPG_CR_ARMOR      )
            call SetBuildUpgr( 2, UPG_UNHOLY_STR    )
            call SetBuildUpgr( 2, UPG_UNHOLY_ARMOR  )

            if c_citadel_done >= 1 then
                call SetBuildUpgr( 3, UPG_CR_ATTACK     )
                call SetBuildUpgr( 3, UPG_CR_ARMOR      )
                call SetBuildUpgr( 3, UPG_UNHOLY_STR    )
                call SetBuildUpgr( 3, UPG_UNHOLY_ARMOR  )
            endif
        endif
    endif

    if c_slaughter_done >= 1 and c_citadel_done >= 1 then
        if c_abom >= 1 then
            call SetBuildUpgr( 1, UPG_PLAGUE )
        endif
        if c_statue >= 1 and c_tomb_done >= 1 then
            call SetBuildUpgr( 1, UPG_BLK_SPHINX )
        endif
    endif

//    if c_slaughter_done >= 1 and c_citadel_done >= 1 and c_wagon >= 1 and c_necro >= 1 then
//        call SetBuildUpgr( 1, UPG_EXHUME )
//    endif
endfunction

//--------------------------------------------------------------------------------------------------
//  build_sequence
//--------------------------------------------------------------------------------------------------
function build_sequence takes nothing returns nothing
    local integer WG2

    call InitBuildArray()

    if basic_opening then
        call MeleeTownHall( 0, NECROPOLIS_1 )

        call SetBuildUnit(  1, ACOLYTE          )
        call undead_mine(0)
        //call SetBuildUnit(  1, UNDEAD_MINE      )
        call SetBuildNext(  5, ACOLYTE          )
        call SetBuildUnit(  1, CRYPT            )
        call SetBuildUnit(  1, GHOUL            )
        call SetBuildUnit(  1, ZIGGURAT_1       )
        call SetBuildUnit(  1, UNDEAD_ALTAR     )
        call SetBuildUnit(  2, GHOUL            )
        call SetBuildUnit(  2, ZIGGURAT_1       )
        call SetBuildUnit(  3, GHOUL            )
        call SetBuildUnit(  1, hero_id          )
        call SetBuildUnit(  6, GHOUL            )
        call SetBuildUpgr(  1, UPG_CANNIBALIZE  )
        call SetBuildUnit(  1, GRAVEYARD        )
        call SetBuildUnit(  7, GHOUL            )
        call SetBuildUnit(  1, NECROPOLIS_2     )
        call SetBuildUnit(  3, ZIGGURAT_1       )
        call SetBuildUnit(  8, GHOUL            )
        call SetBuildUnit(  2, CRYPT_FIEND      )
        call SetBuildUnit(  1, TOMB_OF_RELICS   )
        call SetBuildUnit(  3, CRYPT_FIEND      )

        if MeleeDifficulty() != MELEE_NEWBIE then
            call SetBuildUnit(  1, hero_id2     )
        endif

        call undead_mine(1)
        call BasicExpansion( c_mines < 2, UNDEAD_MINE )
        if MeleeDifficulty() != MELEE_NEWBIE then
            call GuardSecondary( 1, 2, ZIGGURAT_1  )
            if c_zif < 2 and c_zig_done - c_spirit - c_zif > 0 then
                call GuardSecondary( 1, 1, ZIGGURAT_FROST )
            elseif c_zig_done - c_spirit - c_zif > 0 and c_grave_done > 0 then
                call GuardSecondary( 1, 1, ZIGGURAT_2  )
            endif
        endif
        if c_zif < 1 and c_zig_done - c_spirit - c_zif > 0 then
            call GuardSecondary( 0, 1, ZIGGURAT_FROST )
        elseif c_zig_done - c_spirit - c_zif > 0 and c_grave_done > 0 then
            call GuardSecondary( 0, 1, ZIGGURAT_2  )
        endif
        return
    endif

    // need an acolyte or nothing will get built
    //
    if c_neclis_done >= 1 then
        call SetBuildUnit( 1, ACOLYTE )
    endif

    // keep producing mines and acolytes to get gold
    //
    call undead_mine(0)
    call undead_mine(1)

    if c_undead_mines >= 2 then
        call SetBuildNext( 10, ACOLYTE )
    elseif c_undead_mines == 1 then
        call SetBuildNext(  5, ACOLYTE )
    endif

    // ghouls collect lumber
    //
    set WG2 = Max(0,10 - c_wood / 120)
    if WG2 > 0 then
        call SetBuildUnit(   1, CRYPT   )
        call SetBuildNext( WG2, GHOUL   )
    endif

    // if we have low gold in our mines then we need to expand
    //
    if c_gold_owned < 2000 or (c_mines < 2 and c_acolyte > 5) then
        call BasicExpansion( c_mines < 2, UNDEAD_MINE )

        call GuardSecondary( 1, 2, ZIGGURAT_1 )
        if c_zif < 3 and c_zig_done - c_spirit - c_zif > 0 then
            call GuardSecondary( 1, 1, ZIGGURAT_FROST )
        elseif c_grave_done > 0 and c_zig_done - c_spirit - c_zif > 0 then
            call GuardSecondary( 1, 2, ZIGGURAT_2 )
        endif
    endif

    // get enough burrows to handle current food demand
    //
    if c_food_used + 7 >= c_food_made then
        call SetBuildUnit(  c_zig_done + 1, ZIGGURAT_1 )
    endif

    // always rebuild heroes for defense
    //
    if c_altar_done >= 1 then
        if b_hero1_done then
            if b_hero2_done then
                if b_hero3_done or c_citadel_done >= 1 then
                    call SetBuildUnit( 1, hero_id3 )
                    if b_hero4_done and GetUnitCount(hero_id4) == 0 then
                        call SetBuildUnit( 1, hero_id4 )
                    endif
                endif
            else
                call SetBuildUnit( 1, hero_id2 )
            endif
        else
            call SetBuildUnit( 1, hero_id )
        endif
    else
        call SetBuildUnit( 1, UNDEAD_ALTAR )
    endif

    // minimum melee defense
    //
    if c_slaughter_done >= 1 and c_citadel_done >= 1 then
        call SetBuildNext( 2, ABOMINATION )
    else
        call SetBuildUnit(     1, CRYPT )
        call SetBuildNext( WG2+6, GHOUL )
    endif

    // minimum ranged/air defense
    //
    call SetBuildUnit( 1, GRAVEYARD )
    if c_citadel_done >= 1 then
        call SetBuildNext( 4, GARGOYLE )
    else
        call SetBuildUnit( 1, CRYPT         )
        call SetBuildNext( 3, CRYPT_FIEND   )
    endif

    // siege attackers
    //
    if c_boneyard_done >= 1 then
        call SetBuildNext( 2, FROST_WYRM )

    elseif c_slaughter_done >= 1 then
        call SetBuildNext( 2, MEAT_WAGON )
    else
        call MeleeTownHall( 0, NECROPOLIS_1 )
        call SetBuildUnit ( 1, NECROPOLIS_1 )

        call SetBuildUnit( 1, NECROPOLIS_2      )
        call SetBuildUnit( 1, SLAUGHTERHOUSE    )
        call SetBuildNext( 2, MEAT_WAGON        )
    endif

    // if we have a lot of gold then advance the tech tree
    //
    if c_gold > 1000 then

        call MeleeTownHall( 0, NECROPOLIS_1 )

        call SetBuildUnit( 1, NECROPOLIS_1      )
        call SetBuildUnit( 1, CRYPT             )
        call SetBuildUnit( 1, GRAVEYARD         )
        call SetBuildUnit( 1, TOMB_OF_RELICS    )
        call SetBuildUnit( 1, NECROPOLIS_2      )

        call SetBuildNext( Min(c_neclis_done,c_halls_done+1), NECROPOLIS_2 )
        call SetBuildNext( Min(c_zig_done,c_spirit_done+1),   ZIGGURAT_2   )

        call SetBuildUnit( 1, SLAUGHTERHOUSE    )
        call SetBuildUnit( 1, DAMNED_TEMPLE     )
        call SetBuildUnit( 1, NECROPOLIS_3      )
        call SetBuildUnit( 1, SAC_PIT           )
        call SetBuildUnit( 1, BONEYARD          )

        call do_upgrades()

        if c_gold > 2000 then
            call BuildFactory( CRYPT            )
            call BuildFactory( DAMNED_TEMPLE    )
            call BuildFactory( SLAUGHTERHOUSE   )
            call BuildFactory( BONEYARD         )
        endif

    elseif c_food_used >= UPKEEP_TIER1 then
        call do_upgrades()
    endif

    call undead_mine(1)
    call BasicExpansion( c_mines < 2, UNDEAD_MINE )
    call MeleeTownHall( 1, NECROPOLIS_1 )

    if c_food_used >= UPKEEP_TIER2-10 and c_gold < 2000 then
        return
    endif

    // extra troops
    //
    if c_citadel_done >= 1 and c_tomb_done >= 1 then
        call SetBuildUnit( 2, OBS_STATUE )
        if b_sphinx_ok then
            call Conversions( 1, BLK_SPHINX )
        endif
    endif

    if c_temple_done >= 1 then
        call SetBuildUnit( 4, NECRO     )
        call SetBuildUnit( 2, BANSHEE   )
    endif

    if c_citadel_done >= 1 and c_tomb_done >= 1 and b_sphinx_ok then
        call Conversions( 1, BLK_SPHINX )
    endif

    if c_gold_owned < 10000 then
        call undead_mine(2)
        call BasicExpansion( c_mines < 3, UNDEAD_MINE )
        call GuardSecondary( 2, 3, ZIGGURAT_1 )
        call MeleeTownHall( 2, NECROPOLIS_1     )
        if c_zif < 4 and c_zig_done - c_spirit - c_zif > 0 then
            call GuardSecondary( 2, 2, ZIGGURAT_2 )
        elseif c_grave_done > 1 and c_zig_done - c_spirit - c_zif > 0 then
            call GuardSecondary( 2, 1, ZIGGURAT_FROST )
        endif
    endif

    if c_food_used >= 60 and c_zep < 3 then
        call GetZeppelin()
    endif
    if c_food_made > 100 and c_food_made - c_food_used < 4 then  // can build more food
        call SetBuildUnit( c_zig + 1, ZIGGURAT_1 )
    endif
    if c_zig_done - c_spirit - c_zif > 0 and c_gold > 800 then
        call SetBuildUnit( 1, ZIGGURAT_FROST )
    endif
endfunction

//--------------------------------------------------------------------------------------------------
//  harvest_gold
//--------------------------------------------------------------------------------------------------
function harvest_gold takes integer townid returns nothing
    if TownHasMine(townid) then
        call HarvestGold(townid,5)
    endif
endfunction

//--------------------------------------------------------------------------------------------------
//  peon_assignment
//--------------------------------------------------------------------------------------------------
function DistanceBetweenLoc_dk takes location locA, location locB returns real
  local real x = GetLocationX(locB) - GetLocationX(locA)
  local real y = GetLocationY(locB) - GetLocationY(locA)
  call RemoveLocation(locA)
  return SquareRoot(x * x + y * y)
endfunction

function InitMineCheck takes nothing returns nothing
  call HarvestGold(0,3)
  call HarvestWood(0,2)  // Early triggering Harvest
endfunction

function HarvestMineFix takes unit mine returns nothing
  local group g = CreateGroup()
  local group tempg = CreateGroup()
  local location l = GetUnitLoc(mine)
  local unit u = null
  local integer i = 0
  local integer delaypeon = 4
  if c_acolyte >= 5 then
    set delaypeon = 5
  endif
  call GroupEnumUnitsOfPlayer(g, ai_player, null)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null or i >= delaypeon
    if UnitAlive(u) and IsUnitType(u, UNIT_TYPE_PEON) and not IsUnitHidden(u) then
      if GetUnitCurrentOrder(u) == OrderId("harvest") and DistanceBetweenLoc_dk(GetUnitLoc(u), l) < 225 then  // UD harvest gold max Distance is 221
        set i = i + 1
      elseif GetUnitCurrentOrder(u) == 0 then
        call GroupAddUnit(tempg,u)  // prevent the mine harvest peon more than 5
      endif
    endif
    call GroupRemoveUnit(g, u)
  endloop
  if i < delaypeon then
    loop
      set u = FirstOfGroup(tempg)
      exitwhen u == null or i >= delaypeon
      call IssueTargetOrder(u, "harvest", mine)
      set i = i + 1
      call GroupRemoveUnit(tempg, u)
    endloop
  endif
  call RemoveLocation(l)
  set l = null
  call DestroyGroup(tempg)
  set tempg = null
  call DestroyGroup(g)
  set g = null
  set u = null
endfunction

function MineCheck takes nothing returns nothing
    local group g = CreateGroup()
    local unit u = null
    local unit m = null
    local unit um = null
    local unit w = null
    local integer i = 0
    local integer c = 0
    local integer x = 0
    call GroupEnumUnitsInRangeOfLoc(g, homeloc, 1800, null)
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null
      if UnitAlive(u) and not IsUnitHidden(u) then
        if GetUnitTypeId(u) == 'ugol' and GetOwningPlayer(u) == ai_player then
          call HarvestMineFix(u)
          if um == null then
            set um = u
          endif
          set c = c + 1
        elseif GetUnitTypeId(u) == 'ngol' and GetResourceAmount(u) > 0 then
          set i = i + 1
          if m == null then
            set m = u
          endif
        elseif GetOwningPlayer(u) == ai_player and IsUnitType(u, UNIT_TYPE_PEON) then
          if w == null and (GetUnitCurrentOrder(u) == OrderId("harvest") or GetUnitCurrentOrder(u) == 0) then
            set w = u
          endif
          if GetUnitCurrentOrder(u) == 'ugol' then
            set c = c + 1
          endif
        endif
      endif
      call GroupRemoveUnit(g, u)
    endloop
    set HarvestFix = i + c > 0  // home_location no mine
    if (c == 0 or (GetResourceAmount(um) < 2000 and c < 2)) and i > 0 and w != null and m != null and GetUnitCurrentOrder(w) != 'ugol' and not TownThreatened() then
       call IssueTargetOrderById(w, 'ugol', m)
    endif
    call DestroyGroup(g)
    set g = null
    set m = null
    set um = null
    set w = null
endfunction

function InitLaboratory takes nothing returns nothing
    local group g = CreateGroup()
    local unit u = null
    local integer i = 0
    if GetPlayerController(Player(12)) == MAP_CONTROL_CREEP then
      call GroupEnumUnitsOfPlayer(g, Player(15), null)
    else
      call GroupEnumUnitsOfPlayer(g, Player(27), null)
    endif
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null
      if GetUnitTypeId(u) == 'ngad' and UnitAlive(u) and not IsUnitHidden(u) then
        set laboratory[i] = u
        set i = i + 1
      endif
      call GroupRemoveUnit(g, u)
    endloop
    set laboratory[i] = null
    call DestroyGroup(g)
    set g = null
endfunction

function BuyShredder takes nothing returns nothing
    local integer i = 0
    if GetWood() > 200 and GetGold() > 800 and FoodSpace() > 5 and GetUnitCountDone('ngir') < 1 and 3 > GetRandomInt(0, 4) then
      loop
        exitwhen laboratory[i] == null or GetUnitCountDone('ngir') > 0
        if IsVisibleToPlayer(GetUnitX(laboratory[i]), GetUnitY(laboratory[i]), ai_player) then
            call IssueNeutralImmediateOrderById(ai_player, laboratory[i], 'ngir')
        endif
        set i = i + 1
      endloop
    endif
endfunction

function peon_assignment takes nothing returns nothing
    loop
        call ClearHarvestAI()
        if HarvestFix then
            call MineCheck()
        else
            call harvest_gold(0)
        endif
        call harvest_gold(1)
        call harvest_gold(2)
        call harvest_gold(3)
        call HarvestWood(0,WG)

        call build_sequence()
        call BuyShredder()
        call Sleep(GetRandomInt(1 ,3))
    endloop
endfunction

//--------------------------------------------------------------------------------------------------
//	main
//--------------------------------------------------------------------------------------------------
function main takes nothing returns nothing
    call PickMeleeHero(RACE_UNDEAD)
    call set_skills()
    call InitMineCheck()  // if home_location distance 1500 have more mine , ELF and UD cannot harvest (old war3 version distance need 2200+ ), this can fix
    call InitLaboratory()
    call StandardAI(function SkillArraysfix, function peon_assignment, function attack_sequence)
    call StartThread(function set_vars)
    call PlayGame()
endfunction