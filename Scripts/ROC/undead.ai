





globals

    constant integer STRAT_ROCNormalUndead = 0
    constant integer STRAT_ROCAboms = 1
    constant integer STRAT_ROCNecro = 2
    constant integer STRAT_ROCBanshee = 3
    constant integer STRAT_ROCMeatFiends = 4
    constant integer STRAT_ROCFiends = 5
    constant integer STRAT_ROCGhouls = 6
    constant integer STRAT_ROCGargWyrm = 7
    constant integer STRAT_ROCWyrms = 8

    boolean startup     = true


    boolean keep_res    = true

    integer wave        = 1
    boolean peons_assigned = false


endglobals

function InitStratData takes nothing returns nothing
set strategy_name[STRAT_ROCNormalUndead] = "ROCNormalUndead"
set strategy_default_name[STRAT_ROCNormalUndead] = "Normal"
set strategy_default_report[STRAT_ROCNormalUndead] = "I play normal and build something of everything"
set key_building1[STRAT_ROCNormalUndead] = CRYPT
set key_building2[STRAT_ROCNormalUndead] = GRAVEYARD
set key_upgrade1[STRAT_ROCNormalUndead] = UPG_UNHOLY_ARMOR
set key_upgrade2[STRAT_ROCNormalUndead] = UPG_UNHOLY_STR
set key_unit[STRAT_ROCNormalUndead] = 0
set beginning_strat[STRAT_ROCNormalUndead] = true
set strat_minimum_time[STRAT_ROCNormalUndead] = 30
set strategy_type[STRAT_ROCNormalUndead] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_ROCNormalUndead] = 2
set strategy_first_exp_time[STRAT_ROCNormalUndead] = 40
set strategy_second_exp_time[STRAT_ROCNormalUndead] = 140
set strategy_first_hero[STRAT_ROCNormalUndead] = 0
set strategy_first_hero_bonus[STRAT_ROCNormalUndead] = 0
set strategy_second_hero[STRAT_ROCNormalUndead] = 0
set strategy_second_hero_bonus[STRAT_ROCNormalUndead] = 0
set strategy_third_hero[STRAT_ROCNormalUndead] = 0
set strategy_third_hero_bonus[STRAT_ROCNormalUndead] = 0
set strategy_race_aggression[STRAT_ROCNormalUndead * 12 + 0] = 0
set strategy_race_aggression[STRAT_ROCNormalUndead * 12 + 1] = 0
set strategy_race_aggression[STRAT_ROCNormalUndead * 12 + 2] = 0
set strategy_race_aggression[STRAT_ROCNormalUndead * 12 + 3] = 0
set strategy_race_aggression[STRAT_ROCNormalUndead * 12 + 4] = 0
set strategy_race_aggression[STRAT_ROCNormalUndead * 12 + 5] = 0
set strategy_race_aggression[STRAT_ROCNormalUndead * 12 + 6] = 0
set strategy_race_aggression[STRAT_ROCNormalUndead * 12 + 7] = 0
set strategy_race_aggression[STRAT_ROCNormalUndead * 12 + 8] = 0
set strategy_race_aggression[STRAT_ROCNormalUndead * 12 + 9] = 0
set strategy_race_aggression[STRAT_ROCNormalUndead * 12 + 10] = 0
set strategy_race_aggression[STRAT_ROCNormalUndead * 12 + 11] = 0
set strategy_name[STRAT_ROCWyrms] = "ROCWyrms"
set strategy_default_name[STRAT_ROCWyrms] = "Wyrms"
set strategy_default_report[STRAT_ROCWyrms] = "I'm going wyrm rush with some crypt fiends"
set key_building1[STRAT_ROCWyrms] = BONEYARD
set key_building2[STRAT_ROCWyrms] = GRAVEYARD
set key_upgrade1[STRAT_ROCWyrms] = UPG_CR_ARMOR
set key_upgrade2[STRAT_ROCWyrms] = UPG_CR_ATTACK
set key_unit[STRAT_ROCWyrms] = FROST_WYRM
set beginning_strat[STRAT_ROCWyrms] = true
set strat_minimum_time[STRAT_ROCWyrms] = 40
set strategy_type[STRAT_ROCWyrms] = STRATEGY_TYPE_AIR
set strategy_tier[STRAT_ROCWyrms] = 3
set strategy_first_exp_time[STRAT_ROCWyrms] = 40
set strategy_second_exp_time[STRAT_ROCWyrms] = 140
set strategy_first_hero[STRAT_ROCWyrms] = 0
set strategy_first_hero_bonus[STRAT_ROCWyrms] = 0
set strategy_second_hero[STRAT_ROCWyrms] = 0
set strategy_second_hero_bonus[STRAT_ROCWyrms] = 0
set strategy_third_hero[STRAT_ROCWyrms] = 0
set strategy_third_hero_bonus[STRAT_ROCWyrms] = 0
set strategy_race_aggression[STRAT_ROCWyrms * 12 + 0] = 0
set strategy_race_aggression[STRAT_ROCWyrms * 12 + 1] = 0
set strategy_race_aggression[STRAT_ROCWyrms * 12 + 2] = 0
set strategy_race_aggression[STRAT_ROCWyrms * 12 + 3] = 0
set strategy_race_aggression[STRAT_ROCWyrms * 12 + 4] = 0
set strategy_race_aggression[STRAT_ROCWyrms * 12 + 5] = 0
set strategy_race_aggression[STRAT_ROCWyrms * 12 + 6] = 0
set strategy_race_aggression[STRAT_ROCWyrms * 12 + 7] = 0
set strategy_race_aggression[STRAT_ROCWyrms * 12 + 8] = 0
set strategy_race_aggression[STRAT_ROCWyrms * 12 + 9] = 0
set strategy_race_aggression[STRAT_ROCWyrms * 12 + 10] = 0
set strategy_race_aggression[STRAT_ROCWyrms * 12 + 11] = 0
set strategy_name[STRAT_ROCBanshee] = "ROCBanshee"
set strategy_default_name[STRAT_ROCBanshee] = "Banshees"
set strategy_default_report[STRAT_ROCBanshee] = "I'm going mostly banshees"
set key_building1[STRAT_ROCBanshee] = DAMNED_TEMPLE
set key_building2[STRAT_ROCBanshee] = CRYPT
set key_upgrade1[STRAT_ROCBanshee] = UPG_UNHOLY_ARMOR
set key_upgrade2[STRAT_ROCBanshee] = UPG_UNHOLY_STR
set key_unit[STRAT_ROCBanshee] = BANSHEE
set beginning_strat[STRAT_ROCBanshee] = true
set strat_minimum_time[STRAT_ROCBanshee] = 30
set strategy_type[STRAT_ROCBanshee] = STRATEGY_TYPE_CASTER
set strategy_tier[STRAT_ROCBanshee] = 2
set strategy_first_exp_time[STRAT_ROCBanshee] = 40
set strategy_second_exp_time[STRAT_ROCBanshee] = 140
set strategy_first_hero[STRAT_ROCBanshee] = 0
set strategy_first_hero_bonus[STRAT_ROCBanshee] = 0
set strategy_second_hero[STRAT_ROCBanshee] = 0
set strategy_second_hero_bonus[STRAT_ROCBanshee] = 0
set strategy_third_hero[STRAT_ROCBanshee] = 0
set strategy_third_hero_bonus[STRAT_ROCBanshee] = 0
set strategy_race_aggression[STRAT_ROCBanshee * 12 + 0] = 0
set strategy_race_aggression[STRAT_ROCBanshee * 12 + 1] = 0
set strategy_race_aggression[STRAT_ROCBanshee * 12 + 2] = 0
set strategy_race_aggression[STRAT_ROCBanshee * 12 + 3] = 0
set strategy_race_aggression[STRAT_ROCBanshee * 12 + 4] = 0
set strategy_race_aggression[STRAT_ROCBanshee * 12 + 5] = 0
set strategy_race_aggression[STRAT_ROCBanshee * 12 + 6] = 0
set strategy_race_aggression[STRAT_ROCBanshee * 12 + 7] = 0
set strategy_race_aggression[STRAT_ROCBanshee * 12 + 8] = 0
set strategy_race_aggression[STRAT_ROCBanshee * 12 + 9] = 0
set strategy_race_aggression[STRAT_ROCBanshee * 12 + 10] = 0
set strategy_race_aggression[STRAT_ROCBanshee * 12 + 11] = 0
set strategy_name[STRAT_ROCNecro] = "ROCNecro"
set strategy_default_name[STRAT_ROCNecro] = "Necros"
set strategy_default_report[STRAT_ROCNecro] = "I'm going necromancers"
set key_building1[STRAT_ROCNecro] = DAMNED_TEMPLE
set key_building2[STRAT_ROCNecro] = CRYPT
set key_upgrade1[STRAT_ROCNecro] = UPG_UNHOLY_ARMOR
set key_upgrade2[STRAT_ROCNecro] = UPG_UNHOLY_STR
set key_unit[STRAT_ROCNecro] = NECRO
set beginning_strat[STRAT_ROCNecro] = true
set strat_minimum_time[STRAT_ROCNecro] = 30
set strategy_type[STRAT_ROCNecro] = STRATEGY_TYPE_CASTER
set strategy_tier[STRAT_ROCNecro] = 2
set strategy_first_exp_time[STRAT_ROCNecro] = 40
set strategy_second_exp_time[STRAT_ROCNecro] = 140
set strategy_first_hero[STRAT_ROCNecro] = 0
set strategy_first_hero_bonus[STRAT_ROCNecro] = 0
set strategy_second_hero[STRAT_ROCNecro] = 0
set strategy_second_hero_bonus[STRAT_ROCNecro] = 0
set strategy_third_hero[STRAT_ROCNecro] = 0
set strategy_third_hero_bonus[STRAT_ROCNecro] = 0
set strategy_race_aggression[STRAT_ROCNecro * 12 + 0] = 0
set strategy_race_aggression[STRAT_ROCNecro * 12 + 1] = 0
set strategy_race_aggression[STRAT_ROCNecro * 12 + 2] = 0
set strategy_race_aggression[STRAT_ROCNecro * 12 + 3] = 0
set strategy_race_aggression[STRAT_ROCNecro * 12 + 4] = 0
set strategy_race_aggression[STRAT_ROCNecro * 12 + 5] = 0
set strategy_race_aggression[STRAT_ROCNecro * 12 + 6] = 0
set strategy_race_aggression[STRAT_ROCNecro * 12 + 7] = 0
set strategy_race_aggression[STRAT_ROCNecro * 12 + 8] = 0
set strategy_race_aggression[STRAT_ROCNecro * 12 + 9] = 0
set strategy_race_aggression[STRAT_ROCNecro * 12 + 10] = 0
set strategy_race_aggression[STRAT_ROCNecro * 12 + 11] = 0
set strategy_name[STRAT_ROCGhouls] = "ROCGhouls"
set strategy_default_name[STRAT_ROCGhouls] = "Ghouls"
set strategy_default_report[STRAT_ROCGhouls] = "I'm going mass ghouls"
set key_building1[STRAT_ROCGhouls] = CRYPT
set key_building2[STRAT_ROCGhouls] = GRAVEYARD
set key_upgrade1[STRAT_ROCGhouls] = UPG_UNHOLY_ARMOR
set key_upgrade2[STRAT_ROCGhouls] = UPG_UNHOLY_STR
set key_unit[STRAT_ROCGhouls] = GHOUL
set beginning_strat[STRAT_ROCGhouls] = true
set strat_minimum_time[STRAT_ROCGhouls] = 20
set strategy_type[STRAT_ROCGhouls] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_ROCGhouls] = 1
set strategy_first_exp_time[STRAT_ROCGhouls] = 40
set strategy_second_exp_time[STRAT_ROCGhouls] = 140
set strategy_first_hero[STRAT_ROCGhouls] = 0
set strategy_first_hero_bonus[STRAT_ROCGhouls] = 0
set strategy_second_hero[STRAT_ROCGhouls] = 0
set strategy_second_hero_bonus[STRAT_ROCGhouls] = 0
set strategy_third_hero[STRAT_ROCGhouls] = 0
set strategy_third_hero_bonus[STRAT_ROCGhouls] = 0
set strategy_race_aggression[STRAT_ROCGhouls * 12 + 0] = 0
set strategy_race_aggression[STRAT_ROCGhouls * 12 + 1] = 0
set strategy_race_aggression[STRAT_ROCGhouls * 12 + 2] = 0
set strategy_race_aggression[STRAT_ROCGhouls * 12 + 3] = 0
set strategy_race_aggression[STRAT_ROCGhouls * 12 + 4] = 0
set strategy_race_aggression[STRAT_ROCGhouls * 12 + 5] = 0
set strategy_race_aggression[STRAT_ROCGhouls * 12 + 6] = 0
set strategy_race_aggression[STRAT_ROCGhouls * 12 + 7] = 0
set strategy_race_aggression[STRAT_ROCGhouls * 12 + 8] = 0
set strategy_race_aggression[STRAT_ROCGhouls * 12 + 9] = 0
set strategy_race_aggression[STRAT_ROCGhouls * 12 + 10] = 0
set strategy_race_aggression[STRAT_ROCGhouls * 12 + 11] = 0
set strategy_name[STRAT_ROCFiends] = "ROCFiends"
set strategy_default_name[STRAT_ROCFiends] = "Fiends"
set strategy_default_report[STRAT_ROCFiends] = "I'm going mass crypt fiends"
set key_building1[STRAT_ROCFiends] = CRYPT
set key_building2[STRAT_ROCFiends] = GRAVEYARD
set key_upgrade1[STRAT_ROCFiends] = UPG_CR_ARMOR
set key_upgrade2[STRAT_ROCFiends] = UPG_CR_ATTACK
set key_unit[STRAT_ROCFiends] = CRYPT_FIEND
set beginning_strat[STRAT_ROCFiends] = true
set strat_minimum_time[STRAT_ROCFiends] = 30
set strategy_type[STRAT_ROCFiends] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_ROCFiends] = 2
set strategy_first_exp_time[STRAT_ROCFiends] = 40
set strategy_second_exp_time[STRAT_ROCFiends] = 140
set strategy_first_hero[STRAT_ROCFiends] = 0
set strategy_first_hero_bonus[STRAT_ROCFiends] = 0
set strategy_second_hero[STRAT_ROCFiends] = 0
set strategy_second_hero_bonus[STRAT_ROCFiends] = 0
set strategy_third_hero[STRAT_ROCFiends] = 0
set strategy_third_hero_bonus[STRAT_ROCFiends] = 0
set strategy_race_aggression[STRAT_ROCFiends * 12 + 0] = 0
set strategy_race_aggression[STRAT_ROCFiends * 12 + 1] = 0
set strategy_race_aggression[STRAT_ROCFiends * 12 + 2] = 0
set strategy_race_aggression[STRAT_ROCFiends * 12 + 3] = 0
set strategy_race_aggression[STRAT_ROCFiends * 12 + 4] = 0
set strategy_race_aggression[STRAT_ROCFiends * 12 + 5] = 0
set strategy_race_aggression[STRAT_ROCFiends * 12 + 6] = 0
set strategy_race_aggression[STRAT_ROCFiends * 12 + 7] = 0
set strategy_race_aggression[STRAT_ROCFiends * 12 + 8] = 0
set strategy_race_aggression[STRAT_ROCFiends * 12 + 9] = 0
set strategy_race_aggression[STRAT_ROCFiends * 12 + 10] = 0
set strategy_race_aggression[STRAT_ROCFiends * 12 + 11] = 0
set strategy_name[STRAT_ROCGargWyrm] = "ROCGargWyrm"
set strategy_default_name[STRAT_ROCGargWyrm] = "Gargoyles and Wyrms"
set strategy_default_report[STRAT_ROCGargWyrm] = "I'm going gargs and wyrms"
set key_building1[STRAT_ROCGargWyrm] = CRYPT
set key_building2[STRAT_ROCGargWyrm] = NECROPOLIS_3
set key_upgrade1[STRAT_ROCGargWyrm] = UPG_CR_ARMOR
set key_upgrade2[STRAT_ROCGargWyrm] = UPG_CR_ATTACK
set key_unit[STRAT_ROCGargWyrm] = FROST_WYRM
set beginning_strat[STRAT_ROCGargWyrm] = false
set strat_minimum_time[STRAT_ROCGargWyrm] = 40
set strategy_type[STRAT_ROCGargWyrm] = STRATEGY_TYPE_AIR
set strategy_tier[STRAT_ROCGargWyrm] = 3
set strategy_first_exp_time[STRAT_ROCGargWyrm] = 40
set strategy_second_exp_time[STRAT_ROCGargWyrm] = 140
set strategy_first_hero[STRAT_ROCGargWyrm] = 0
set strategy_first_hero_bonus[STRAT_ROCGargWyrm] = 0
set strategy_second_hero[STRAT_ROCGargWyrm] = 0
set strategy_second_hero_bonus[STRAT_ROCGargWyrm] = 0
set strategy_third_hero[STRAT_ROCGargWyrm] = 0
set strategy_third_hero_bonus[STRAT_ROCGargWyrm] = 0
set strategy_race_aggression[STRAT_ROCGargWyrm * 12 + 0] = 0
set strategy_race_aggression[STRAT_ROCGargWyrm * 12 + 1] = 0
set strategy_race_aggression[STRAT_ROCGargWyrm * 12 + 2] = 0
set strategy_race_aggression[STRAT_ROCGargWyrm * 12 + 3] = 0
set strategy_race_aggression[STRAT_ROCGargWyrm * 12 + 4] = 0
set strategy_race_aggression[STRAT_ROCGargWyrm * 12 + 5] = 0
set strategy_race_aggression[STRAT_ROCGargWyrm * 12 + 6] = 0
set strategy_race_aggression[STRAT_ROCGargWyrm * 12 + 7] = 0
set strategy_race_aggression[STRAT_ROCGargWyrm * 12 + 8] = 0
set strategy_race_aggression[STRAT_ROCGargWyrm * 12 + 9] = 0
set strategy_race_aggression[STRAT_ROCGargWyrm * 12 + 10] = 0
set strategy_race_aggression[STRAT_ROCGargWyrm * 12 + 11] = 0
set strategy_name[STRAT_ROCAboms] = "ROCAboms"
set strategy_default_name[STRAT_ROCAboms] = "Aboms"
set strategy_default_report[STRAT_ROCAboms] = "I'm going mass abominations"
set key_building1[STRAT_ROCAboms] = SLAUGHTERHOUSE
set key_building2[STRAT_ROCAboms] = NECROPOLIS_3
set key_upgrade1[STRAT_ROCAboms] = UPG_UNHOLY_ARMOR
set key_upgrade2[STRAT_ROCAboms] = UPG_UNHOLY_STR
set key_unit[STRAT_ROCAboms] = ABOMINATION
set beginning_strat[STRAT_ROCAboms] = false
set strat_minimum_time[STRAT_ROCAboms] = 40
set strategy_type[STRAT_ROCAboms] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_ROCAboms] = 3
set strategy_first_exp_time[STRAT_ROCAboms] = 40
set strategy_second_exp_time[STRAT_ROCAboms] = 140
set strategy_first_hero[STRAT_ROCAboms] = 0
set strategy_first_hero_bonus[STRAT_ROCAboms] = 0
set strategy_second_hero[STRAT_ROCAboms] = 0
set strategy_second_hero_bonus[STRAT_ROCAboms] = 0
set strategy_third_hero[STRAT_ROCAboms] = 0
set strategy_third_hero_bonus[STRAT_ROCAboms] = 0
set strategy_race_aggression[STRAT_ROCAboms * 12 + 0] = 0
set strategy_race_aggression[STRAT_ROCAboms * 12 + 1] = 0
set strategy_race_aggression[STRAT_ROCAboms * 12 + 2] = 0
set strategy_race_aggression[STRAT_ROCAboms * 12 + 3] = 0
set strategy_race_aggression[STRAT_ROCAboms * 12 + 4] = 0
set strategy_race_aggression[STRAT_ROCAboms * 12 + 5] = 0
set strategy_race_aggression[STRAT_ROCAboms * 12 + 6] = 0
set strategy_race_aggression[STRAT_ROCAboms * 12 + 7] = 0
set strategy_race_aggression[STRAT_ROCAboms * 12 + 8] = 0
set strategy_race_aggression[STRAT_ROCAboms * 12 + 9] = 0
set strategy_race_aggression[STRAT_ROCAboms * 12 + 10] = 0
set strategy_race_aggression[STRAT_ROCAboms * 12 + 11] = 0
set strategy_name[STRAT_ROCMeatFiends] = "ROCMeatFiends"
set strategy_default_name[STRAT_ROCMeatFiends] = "Meat wagons and Fiends"
set strategy_default_report[STRAT_ROCMeatFiends] = "I'm going fiends and meat wagons"
set key_building1[STRAT_ROCMeatFiends] = SLAUGHTERHOUSE
set key_building2[STRAT_ROCMeatFiends] = NECROPOLIS_2
set key_upgrade1[STRAT_ROCMeatFiends] = UPG_UNHOLY_STR
set key_upgrade2[STRAT_ROCMeatFiends] = UPG_CR_ARMOR
set key_unit[STRAT_ROCMeatFiends] = MEAT_WAGON
set beginning_strat[STRAT_ROCMeatFiends] = true
set strat_minimum_time[STRAT_ROCMeatFiends] = 40
set strategy_type[STRAT_ROCMeatFiends] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_ROCMeatFiends] = 2
set strategy_first_exp_time[STRAT_ROCMeatFiends] = 40
set strategy_second_exp_time[STRAT_ROCMeatFiends] = 140
set strategy_first_hero[STRAT_ROCMeatFiends] = 0
set strategy_first_hero_bonus[STRAT_ROCMeatFiends] = 0
set strategy_second_hero[STRAT_ROCMeatFiends] = 0
set strategy_second_hero_bonus[STRAT_ROCMeatFiends] = 0
set strategy_third_hero[STRAT_ROCMeatFiends] = 0
set strategy_third_hero_bonus[STRAT_ROCMeatFiends] = 0
set strategy_race_aggression[STRAT_ROCMeatFiends * 12 + 0] = 0
set strategy_race_aggression[STRAT_ROCMeatFiends * 12 + 1] = 0
set strategy_race_aggression[STRAT_ROCMeatFiends * 12 + 2] = 0
set strategy_race_aggression[STRAT_ROCMeatFiends * 12 + 3] = 0
set strategy_race_aggression[STRAT_ROCMeatFiends * 12 + 4] = 0
set strategy_race_aggression[STRAT_ROCMeatFiends * 12 + 5] = 0
set strategy_race_aggression[STRAT_ROCMeatFiends * 12 + 6] = 0
set strategy_race_aggression[STRAT_ROCMeatFiends * 12 + 7] = 0
set strategy_race_aggression[STRAT_ROCMeatFiends * 12 + 8] = 0
set strategy_race_aggression[STRAT_ROCMeatFiends * 12 + 9] = 0
set strategy_race_aggression[STRAT_ROCMeatFiends * 12 + 10] = 0
set strategy_race_aggression[STRAT_ROCMeatFiends * 12 + 11] = 0
set rp_strat_length = 9
endfunction

function InitStrats takes nothing returns nothing
  call InitStratData()
  call CommonStratsDefault()
endfunction

function InitAllSkills takes nothing returns nothing
  set allskills[1] = DEATH_COIL
  set allskills[2] = UNHOLY_AURA
  set allskills[3] = DEATH_COIL
  set allskills[4] = UNHOLY_AURA
  set allskills[5] = DEATH_COIL
  set allskills[6] = ANIM_DEAD
  set allskills[7] = UNHOLY_AURA
  set allskills[8] = DEATH_PACT
  set allskills[9] = DEATH_PACT
  set allskills[10] = DEATH_PACT

  set allskills[11] = DEATH_COIL
  set allskills[12] = UNHOLY_AURA
  set allskills[13] = DEATH_COIL
  set allskills[14] = UNHOLY_AURA
  set allskills[15] = DEATH_COIL
  set allskills[16] = UNHOLY_AURA
  set allskills[17] = ANIM_DEAD
  set allskills[18] = DEATH_PACT
  set allskills[19] = DEATH_PACT
  set allskills[20] = DEATH_PACT

  set allskills[21] = DEATH_COIL
  set allskills[22] = UNHOLY_AURA
  set allskills[23] = DEATH_COIL
  set allskills[24] = UNHOLY_AURA
  set allskills[25] = UNHOLY_AURA
  set allskills[26] = DEATH_COIL
  set allskills[27] = ANIM_DEAD
  set allskills[28] = DEATH_PACT
  set allskills[29] = DEATH_PACT
  set allskills[30] = DEATH_PACT

  set allskills[31] = DEATH_COIL
  set allskills[32] = DEATH_PACT
  set allskills[33] = UNHOLY_AURA
  set allskills[34] = DEATH_COIL
  set allskills[35] = DEATH_PACT
  set allskills[36] = ANIM_DEAD
  set allskills[37] = DEATH_COIL
  set allskills[38] = UNHOLY_AURA
  set allskills[39] = UNHOLY_AURA
  set allskills[40] = DEATH_PACT

  set allskills[41] = DEATH_COIL
  set allskills[42] = UNHOLY_AURA
  set allskills[43] = DEATH_COIL
  set allskills[44] = UNHOLY_AURA
  set allskills[45] = DEATH_COIL
  set allskills[46] = UNHOLY_AURA
  set allskills[47] = ANIM_DEAD
  set allskills[48] = DEATH_PACT
  set allskills[49] = DEATH_PACT
  set allskills[50] = DEATH_PACT

  set allskills[51] = DEATH_COIL
  set allskills[52] = UNHOLY_AURA
  set allskills[53] = DEATH_COIL
  set allskills[54] = UNHOLY_AURA
  set allskills[55] = UNHOLY_AURA
  set allskills[56] = DEATH_COIL
  set allskills[57] = ANIM_DEAD
  set allskills[58] = DEATH_PACT
  set allskills[59] = DEATH_PACT
  set allskills[60] = DEATH_PACT

  set allskills[61] = UNHOLY_AURA
  set allskills[62] = DEATH_COIL
  set allskills[63] = UNHOLY_AURA
  set allskills[64] = DEATH_COIL
  set allskills[65] = UNHOLY_AURA
  set allskills[66] = ANIM_DEAD
  set allskills[67] = DEATH_COIL
  set allskills[68] = DEATH_PACT
  set allskills[69] = DEATH_PACT
  set allskills[70] = DEATH_PACT

  set allskills[71] = DEATH_COIL
  set allskills[72] = UNHOLY_AURA
  set allskills[73] = DEATH_COIL
  set allskills[74] = UNHOLY_AURA
  set allskills[75] = DEATH_COIL
  set allskills[76] = ANIM_DEAD
  set allskills[77] = UNHOLY_AURA
  set allskills[78] = DEATH_PACT
  set allskills[79] = DEATH_PACT
  set allskills[80] = DEATH_PACT

  set allskills[81] = UNHOLY_AURA
  set allskills[82] = DEATH_PACT
  set allskills[83] = UNHOLY_AURA
  set allskills[84] = DEATH_COIL
  set allskills[85] = UNHOLY_AURA
  set allskills[86] = DEATH_COIL
  set allskills[87] = ANIM_DEAD
  set allskills[88] = DEATH_COIL
  set allskills[89] = DEATH_PACT
  set allskills[90] = DEATH_PACT

  set allskills[91] = SLEEP
  set allskills[92] = VAMP_AURA
  set allskills[93] = VAMP_AURA
  set allskills[94] = CARRION_SWARM
  set allskills[95] = VAMP_AURA
  set allskills[96] = INFERNO
  set allskills[97] = CARRION_SWARM
  set allskills[98] = CARRION_SWARM
  set allskills[99] = SLEEP
  set allskills[100] = SLEEP

  set allskills[101] = CARRION_SWARM
  set allskills[102] = SLEEP
  set allskills[103] = VAMP_AURA
  set allskills[104] = VAMP_AURA
  set allskills[105] = CARRION_SWARM
  set allskills[106] = INFERNO
  set allskills[107] = VAMP_AURA
  set allskills[108] = CARRION_SWARM
  set allskills[109] = SLEEP
  set allskills[110] = SLEEP

  set allskills[111] = CARRION_SWARM
  set allskills[112] = VAMP_AURA
  set allskills[113] = CARRION_SWARM
  set allskills[114] = VAMP_AURA
  set allskills[115] = CARRION_SWARM
  set allskills[116] = INFERNO
  set allskills[117] = VAMP_AURA
  set allskills[118] = SLEEP
  set allskills[119] = SLEEP
  set allskills[120] = SLEEP

  set allskills[121] = CARRION_SWARM
  set allskills[122] = VAMP_AURA
  set allskills[123] = CARRION_SWARM
  set allskills[124] = VAMP_AURA
  set allskills[125] = CARRION_SWARM
  set allskills[126] = INFERNO
  set allskills[127] = VAMP_AURA
  set allskills[128] = SLEEP
  set allskills[129] = SLEEP
  set allskills[130] = SLEEP

  set allskills[131] = VAMP_AURA
  set allskills[132] = SLEEP
  set allskills[133] = VAMP_AURA
  set allskills[134] = CARRION_SWARM
  set allskills[135] = VAMP_AURA
  set allskills[136] = INFERNO
  set allskills[137] = CARRION_SWARM
  set allskills[138] = CARRION_SWARM
  set allskills[139] = SLEEP
  set allskills[140] = SLEEP

  set allskills[141] = SLEEP
  set allskills[142] = VAMP_AURA
  set allskills[143] = VAMP_AURA
  set allskills[144] = CARRION_SWARM
  set allskills[145] = VAMP_AURA
  set allskills[146] = INFERNO
  set allskills[147] = CARRION_SWARM
  set allskills[148] = CARRION_SWARM
  set allskills[149] = SLEEP
  set allskills[150] = SLEEP

  set allskills[151] = SLEEP
  set allskills[152] = CARRION_SWARM
  set allskills[153] = CARRION_SWARM
  set allskills[154] = VAMP_AURA
  set allskills[155] = CARRION_SWARM
  set allskills[156] = INFERNO
  set allskills[157] = SLEEP
  set allskills[158] = VAMP_AURA
  set allskills[159] = VAMP_AURA
  set allskills[160] = SLEEP

  set allskills[161] = VAMP_AURA
  set allskills[162] = SLEEP
  set allskills[163] = VAMP_AURA
  set allskills[164] = CARRION_SWARM
  set allskills[165] = VAMP_AURA
  set allskills[166] = INFERNO
  set allskills[167] = CARRION_SWARM
  set allskills[168] = CARRION_SWARM
  set allskills[169] = SLEEP
  set allskills[170] = SLEEP

  set allskills[171] = VAMP_AURA
  set allskills[172] = CARRION_SWARM
  set allskills[173] = VAMP_AURA
  set allskills[174] = CARRION_SWARM
  set allskills[175] = VAMP_AURA
  set allskills[176] = INFERNO
  set allskills[177] = CARRION_SWARM
  set allskills[178] = SLEEP
  set allskills[179] = SLEEP
  set allskills[180] = SLEEP

  set allskills[181] = FROST_NOVA
  set allskills[182] = DARK_RITUAL
  set allskills[183] = FROST_NOVA
  set allskills[184] = DARK_RITUAL
  set allskills[185] = FROST_NOVA
  set allskills[186] = DEATH_DECAY
  set allskills[187] = DARK_RITUAL
  set allskills[188] = FROST_ARMOR
  set allskills[189] = FROST_ARMOR
  set allskills[190] = FROST_ARMOR

  set allskills[191] = FROST_NOVA
  set allskills[192] = FROST_ARMOR
  set allskills[193] = FROST_NOVA
  set allskills[194] = DARK_RITUAL
  set allskills[195] = FROST_NOVA
  set allskills[196] = DEATH_DECAY
  set allskills[197] = DARK_RITUAL
  set allskills[198] = FROST_ARMOR
  set allskills[199] = DARK_RITUAL
  set allskills[200] = FROST_ARMOR

  set allskills[201] = FROST_ARMOR
  set allskills[202] = FROST_NOVA
  set allskills[203] = FROST_NOVA
  set allskills[204] = FROST_ARMOR
  set allskills[205] = FROST_NOVA
  set allskills[206] = FROST_ARMOR
  set allskills[207] = DEATH_DECAY
  set allskills[208] = DARK_RITUAL
  set allskills[209] = DARK_RITUAL
  set allskills[210] = DARK_RITUAL

  set allskills[211] = FROST_NOVA
  set allskills[212] = DARK_RITUAL
  set allskills[213] = FROST_NOVA
  set allskills[214] = DARK_RITUAL
  set allskills[215] = FROST_NOVA
  set allskills[216] = DEATH_DECAY
  set allskills[217] = DARK_RITUAL
  set allskills[218] = FROST_ARMOR
  set allskills[219] = FROST_ARMOR
  set allskills[220] = FROST_ARMOR

  set allskills[221] = FROST_NOVA
  set allskills[222] = FROST_ARMOR
  set allskills[223] = FROST_NOVA
  set allskills[224] = DARK_RITUAL
  set allskills[225] = FROST_NOVA
  set allskills[226] = DEATH_DECAY
  set allskills[227] = DARK_RITUAL
  set allskills[228] = FROST_ARMOR
  set allskills[229] = DARK_RITUAL
  set allskills[230] = FROST_ARMOR

  set allskills[231] = FROST_ARMOR
  set allskills[232] = FROST_NOVA
  set allskills[233] = FROST_ARMOR
  set allskills[234] = FROST_NOVA
  set allskills[235] = FROST_NOVA
  set allskills[236] = FROST_ARMOR
  set allskills[237] = DEATH_DECAY
  set allskills[238] = DARK_RITUAL
  set allskills[239] = DARK_RITUAL
  set allskills[240] = DARK_RITUAL

  set allskills[241] = FROST_NOVA
  set allskills[242] = DARK_RITUAL
  set allskills[243] = FROST_NOVA
  set allskills[244] = DARK_RITUAL
  set allskills[245] = FROST_NOVA
  set allskills[246] = DEATH_DECAY
  set allskills[247] = DARK_RITUAL
  set allskills[248] = FROST_ARMOR
  set allskills[249] = FROST_ARMOR
  set allskills[250] = FROST_ARMOR

  set allskills[251] = FROST_NOVA
  set allskills[252] = FROST_ARMOR
  set allskills[253] = FROST_NOVA
  set allskills[254] = FROST_ARMOR
  set allskills[255] = FROST_NOVA
  set allskills[256] = FROST_ARMOR
  set allskills[257] = DEATH_DECAY
  set allskills[258] = DARK_RITUAL
  set allskills[259] = DARK_RITUAL
  set allskills[260] = DARK_RITUAL

  set allskills[261] = FROST_ARMOR
  set allskills[262] = FROST_NOVA
  set allskills[263] = FROST_ARMOR
  set allskills[264] = FROST_NOVA
  set allskills[265] = FROST_NOVA
  set allskills[266] = FROST_ARMOR
  set allskills[267] = DEATH_DECAY
  set allskills[268] = DARK_RITUAL
  set allskills[269] = DARK_RITUAL
  set allskills[270] = DARK_RITUAL

endfunction

function InitBuildings takes nothing returns nothing
  set building[0] = UNDEAD_MINE
  set building[1] = UNDEAD_ALTAR
  set building[2] = BONEYARD
  set building[3] = NECROPOLIS_1
  set building[4] = NECROPOLIS_2
  set building[5] = NECROPOLIS_3
  set building[6] = SAC_PIT
  set building[7] = CRYPT
  set building[8] = SLAUGHTERHOUSE
  set building[9] = DAMNED_TEMPLE
  set building[10] = ZIGGURAT_1
  set building[11] = ZIGGURAT_2
  set building[12] = GRAVEYARD
  set building_length = 13
endfunction

function initRacialUnits takes nothing returns nothing

    set racial_peon = ACOLYTE
    set racial_ghoul = GHOUL
    set racial_expansion = UNDEAD_MINE
    if race_uses_mine_expansion then	// To get undead type mine systems
      set racial_goldmine[minearray] = old_id[racial_expansion]
      set minearray = minearray + 1
    endif
    set racial_altar = UNDEAD_ALTAR
    set racial_lumber = GRAVEYARD

    set racial_hall[1] = NECROPOLIS_1
    set racial_hall[2] = NECROPOLIS_2
    set racial_hall[3] = NECROPOLIS_3
    // Basically if its not a undead type expansion method just make variable the first hall
    if racial_expansion == 0 then
      set racial_expansion = racial_hall[1]
    endif

    set racial_goldmine[minearray] = 'ngol'
    set minearray = minearray + 1

    set racial_zigg[ziggarray] = 'uzg1'
    set ziggarray = ziggarray + 1
    set racial_farm = ZIGGURAT_1
    if race_sell_ziggurats then
      set racial_zigg[ziggarray] = old_id[racial_farm]
      set ziggarray = ziggarray + 1
    endif


endfunction

function initRacialTraits takes nothing returns nothing
  local integer i = 0

  set i = GetRandomInt(1,100)
  set militia = race_militia_expansion_available and i <= 60
  if militia then
    call Trace("Militia expansion is true")
  endif
  set i = GetRandomInt(1, 100)
  set race_ancient_expansion_available = (race_ancient_expansion_available and i <= race_ancient_expansion_probability)
  if race_ancient_expansion_available then
    call Trace("Ancient Expansion is true")
  endif
  set i = GetRandomInt(1, 100)
  set race_item_expansion_available = (race_item_expansion_available and i <= race_item_expansion_probability)
  if race_item_expansion_available then
    call Trace("Ancient Expansion is true")
  endif
  set i = GetRandomInt(1, 100)
  set race_towerrush_available = (race_towerrush_available and i <= race_towerrush_probability)
  if race_towerrush_available then
    call Trace("Towerrush variable is true")
  endif

endfunction

function CanTowerRush takes nothing returns nothing
	local real distance = GetNearestEnemyDistance()
	local integer i = GetRandomInt(1,100)

	if game_is_ffa then
		set i = i + 40       // in ffa reduce likly hood of tower rush extremly
	endif

	 if hero_rush_bonus[hero[1]] >= race_towerrush_hero_rush_level then
		if distance < 8000 then   // Total percentage to be choosen is 33%
			call StartTowerRush(180)
		elseif i <= 75 and distance < 11000 then // Total percentage to be choosen is 25%
			call StartTowerRush(160)
		elseif i <= 50 and distance < 14000 then // Total percentage to be choosen is 16%
			call StartTowerRush(140)
		elseif i <= 20 and distance < 16000 then // Total percentage to be choosen is 7%
		endif
	  endif
endfunction

function chooseStrategyRP takes nothing returns nothing
  set rp_strat[0] = 23
  set rp_strat[1] = 22
  set rp_strat[2] = 25
  set rp_strat[3] = 24
  set rp_strat[4] = 27
  set rp_strat[5] = 26
  set rp_strat[6] = 18
  set rp_strat[7] = 23
  set rp_strat[8] = 25

  call AddFavoriteUnitRP()
  if ai_time > 2 then
    call mult_rp_strat(3)
  endif

  if c_ally_total > 0 then
      set rp_strat[STRAT_ROCNormalUndead] = rp_strat[STRAT_ROCNormalUndead] + 0
      set rp_strat[STRAT_ROCWyrms] = rp_strat[STRAT_ROCWyrms] + 18
      set rp_strat[STRAT_ROCBanshee] = rp_strat[STRAT_ROCBanshee] + 9
      set rp_strat[STRAT_ROCNecro] = rp_strat[STRAT_ROCNecro] + 9
      set rp_strat[STRAT_ROCGhouls] = rp_strat[STRAT_ROCGhouls] + 0
      set rp_strat[STRAT_ROCFiends] = rp_strat[STRAT_ROCFiends] + 0
      set rp_strat[STRAT_ROCGargWyrm] = rp_strat[STRAT_ROCGargWyrm] + 18
      set rp_strat[STRAT_ROCAboms] = rp_strat[STRAT_ROCAboms] + 18
      set rp_strat[STRAT_ROCMeatFiends] = rp_strat[STRAT_ROCMeatFiends] + 18
  endif

  if game_is_1on1 then
      set rp_strat[STRAT_ROCNormalUndead] = rp_strat[STRAT_ROCNormalUndead] + 0
      set rp_strat[STRAT_ROCWyrms] = rp_strat[STRAT_ROCWyrms] + 0
      set rp_strat[STRAT_ROCBanshee] = rp_strat[STRAT_ROCBanshee] + 0
      set rp_strat[STRAT_ROCNecro] = rp_strat[STRAT_ROCNecro] + 0
      set rp_strat[STRAT_ROCGhouls] = rp_strat[STRAT_ROCGhouls] + 0
      set rp_strat[STRAT_ROCFiends] = rp_strat[STRAT_ROCFiends] + 0
      set rp_strat[STRAT_ROCGargWyrm] = rp_strat[STRAT_ROCGargWyrm] + 0
      set rp_strat[STRAT_ROCAboms] = rp_strat[STRAT_ROCAboms] + 0
      set rp_strat[STRAT_ROCMeatFiends] = rp_strat[STRAT_ROCMeatFiends] + 0
  endif

  if game_is_ffa then
      set rp_strat[STRAT_ROCNormalUndead] = rp_strat[STRAT_ROCNormalUndead] + 0
      set rp_strat[STRAT_ROCWyrms] = rp_strat[STRAT_ROCWyrms] + 0
      set rp_strat[STRAT_ROCBanshee] = rp_strat[STRAT_ROCBanshee] + 0
      set rp_strat[STRAT_ROCNecro] = rp_strat[STRAT_ROCNecro] + 0
      set rp_strat[STRAT_ROCGhouls] = rp_strat[STRAT_ROCGhouls] + 0
      set rp_strat[STRAT_ROCFiends] = rp_strat[STRAT_ROCFiends] + 0
      set rp_strat[STRAT_ROCGargWyrm] = rp_strat[STRAT_ROCGargWyrm] + 0
      set rp_strat[STRAT_ROCAboms] = rp_strat[STRAT_ROCAboms] + 0
      set rp_strat[STRAT_ROCMeatFiends] = rp_strat[STRAT_ROCMeatFiends] + 0
  endif

  if c_enemy[R_RANDOM] > 0 then
      set rp_strat[STRAT_ROCNormalUndead] = rp_strat[STRAT_ROCNormalUndead] + 0
      set rp_strat[STRAT_ROCWyrms] = rp_strat[STRAT_ROCWyrms] + 0
      set rp_strat[STRAT_ROCBanshee] = rp_strat[STRAT_ROCBanshee] + 0
      set rp_strat[STRAT_ROCNecro] = rp_strat[STRAT_ROCNecro] + 0
      set rp_strat[STRAT_ROCGhouls] = rp_strat[STRAT_ROCGhouls] + 0
      set rp_strat[STRAT_ROCFiends] = rp_strat[STRAT_ROCFiends] + 0
      set rp_strat[STRAT_ROCGargWyrm] = rp_strat[STRAT_ROCGargWyrm] + 0
      set rp_strat[STRAT_ROCAboms] = rp_strat[STRAT_ROCAboms] + 0
      set rp_strat[STRAT_ROCMeatFiends] = rp_strat[STRAT_ROCMeatFiends] + 0
  endif

  if c_enemy[R_ELF] > 0 then
      set rp_strat[STRAT_ROCNormalUndead] = rp_strat[STRAT_ROCNormalUndead] + 9
      set rp_strat[STRAT_ROCWyrms] = rp_strat[STRAT_ROCWyrms] + -9
      set rp_strat[STRAT_ROCBanshee] = rp_strat[STRAT_ROCBanshee] + 0
      set rp_strat[STRAT_ROCNecro] = rp_strat[STRAT_ROCNecro] + 9
      set rp_strat[STRAT_ROCGhouls] = rp_strat[STRAT_ROCGhouls] + 18
      set rp_strat[STRAT_ROCFiends] = rp_strat[STRAT_ROCFiends] + 0
      set rp_strat[STRAT_ROCGargWyrm] = rp_strat[STRAT_ROCGargWyrm] + -9
      set rp_strat[STRAT_ROCAboms] = rp_strat[STRAT_ROCAboms] + -9
      set rp_strat[STRAT_ROCMeatFiends] = rp_strat[STRAT_ROCMeatFiends] + -9
  endif

  if c_enemy[R_HUMAN] > 0 then
      set rp_strat[STRAT_ROCNormalUndead] = rp_strat[STRAT_ROCNormalUndead] + 9
      set rp_strat[STRAT_ROCWyrms] = rp_strat[STRAT_ROCWyrms] + -18
      set rp_strat[STRAT_ROCBanshee] = rp_strat[STRAT_ROCBanshee] + 9
      set rp_strat[STRAT_ROCNecro] = rp_strat[STRAT_ROCNecro] + 9
      set rp_strat[STRAT_ROCGhouls] = rp_strat[STRAT_ROCGhouls] + 18
      set rp_strat[STRAT_ROCFiends] = rp_strat[STRAT_ROCFiends] + 18
      set rp_strat[STRAT_ROCGargWyrm] = rp_strat[STRAT_ROCGargWyrm] + -18
      set rp_strat[STRAT_ROCAboms] = rp_strat[STRAT_ROCAboms] + -9
      set rp_strat[STRAT_ROCMeatFiends] = rp_strat[STRAT_ROCMeatFiends] + 9
  endif

  if c_enemy[R_ORC] > 0 then
      set rp_strat[STRAT_ROCNormalUndead] = rp_strat[STRAT_ROCNormalUndead] + 0
      set rp_strat[STRAT_ROCWyrms] = rp_strat[STRAT_ROCWyrms] + 0
      set rp_strat[STRAT_ROCBanshee] = rp_strat[STRAT_ROCBanshee] + 0
      set rp_strat[STRAT_ROCNecro] = rp_strat[STRAT_ROCNecro] + 0
      set rp_strat[STRAT_ROCGhouls] = rp_strat[STRAT_ROCGhouls] + 0
      set rp_strat[STRAT_ROCFiends] = rp_strat[STRAT_ROCFiends] + 18
      set rp_strat[STRAT_ROCGargWyrm] = rp_strat[STRAT_ROCGargWyrm] + 9
      set rp_strat[STRAT_ROCAboms] = rp_strat[STRAT_ROCAboms] + 0
      set rp_strat[STRAT_ROCMeatFiends] = rp_strat[STRAT_ROCMeatFiends] + 0
  endif

  if c_enemy[R_UNDEAD] > 0 then
      set rp_strat[STRAT_ROCNormalUndead] = rp_strat[STRAT_ROCNormalUndead] + 18
      set rp_strat[STRAT_ROCWyrms] = rp_strat[STRAT_ROCWyrms] + 9
      set rp_strat[STRAT_ROCBanshee] = rp_strat[STRAT_ROCBanshee] + -9
      set rp_strat[STRAT_ROCNecro] = rp_strat[STRAT_ROCNecro] + 18
      set rp_strat[STRAT_ROCGhouls] = rp_strat[STRAT_ROCGhouls] + 18
      set rp_strat[STRAT_ROCFiends] = rp_strat[STRAT_ROCFiends] + 0
      set rp_strat[STRAT_ROCGargWyrm] = rp_strat[STRAT_ROCGargWyrm] + 9
      set rp_strat[STRAT_ROCAboms] = rp_strat[STRAT_ROCAboms] + 0
      set rp_strat[STRAT_ROCMeatFiends] = rp_strat[STRAT_ROCMeatFiends] + 9
  endif


  if c_ally[R_ELF] > 0 then
      set rp_strat[STRAT_ROCNormalUndead] = rp_strat[STRAT_ROCNormalUndead] + 0
      set rp_strat[STRAT_ROCWyrms] = rp_strat[STRAT_ROCWyrms] + 0
      set rp_strat[STRAT_ROCBanshee] = rp_strat[STRAT_ROCBanshee] + 0
      set rp_strat[STRAT_ROCNecro] = rp_strat[STRAT_ROCNecro] + 0
      set rp_strat[STRAT_ROCGhouls] = rp_strat[STRAT_ROCGhouls] + 0
      set rp_strat[STRAT_ROCFiends] = rp_strat[STRAT_ROCFiends] + 0
      set rp_strat[STRAT_ROCGargWyrm] = rp_strat[STRAT_ROCGargWyrm] + 0
      set rp_strat[STRAT_ROCAboms] = rp_strat[STRAT_ROCAboms] + 0
      set rp_strat[STRAT_ROCMeatFiends] = rp_strat[STRAT_ROCMeatFiends] + 0
  endif

  if c_ally[R_HUMAN] > 0 then
      set rp_strat[STRAT_ROCNormalUndead] = rp_strat[STRAT_ROCNormalUndead] + 0
      set rp_strat[STRAT_ROCWyrms] = rp_strat[STRAT_ROCWyrms] + 0
      set rp_strat[STRAT_ROCBanshee] = rp_strat[STRAT_ROCBanshee] + 0
      set rp_strat[STRAT_ROCNecro] = rp_strat[STRAT_ROCNecro] + 0
      set rp_strat[STRAT_ROCGhouls] = rp_strat[STRAT_ROCGhouls] + 0
      set rp_strat[STRAT_ROCFiends] = rp_strat[STRAT_ROCFiends] + 0
      set rp_strat[STRAT_ROCGargWyrm] = rp_strat[STRAT_ROCGargWyrm] + 0
      set rp_strat[STRAT_ROCAboms] = rp_strat[STRAT_ROCAboms] + 0
      set rp_strat[STRAT_ROCMeatFiends] = rp_strat[STRAT_ROCMeatFiends] + 0
  endif

  if c_ally[R_ORC] > 0 then
      set rp_strat[STRAT_ROCNormalUndead] = rp_strat[STRAT_ROCNormalUndead] + 0
      set rp_strat[STRAT_ROCWyrms] = rp_strat[STRAT_ROCWyrms] + 0
      set rp_strat[STRAT_ROCBanshee] = rp_strat[STRAT_ROCBanshee] + 0
      set rp_strat[STRAT_ROCNecro] = rp_strat[STRAT_ROCNecro] + 0
      set rp_strat[STRAT_ROCGhouls] = rp_strat[STRAT_ROCGhouls] + 0
      set rp_strat[STRAT_ROCFiends] = rp_strat[STRAT_ROCFiends] + 0
      set rp_strat[STRAT_ROCGargWyrm] = rp_strat[STRAT_ROCGargWyrm] + 0
      set rp_strat[STRAT_ROCAboms] = rp_strat[STRAT_ROCAboms] + 0
      set rp_strat[STRAT_ROCMeatFiends] = rp_strat[STRAT_ROCMeatFiends] + 0
  endif

  if c_ally[R_UNDEAD] > 0 then
      set rp_strat[STRAT_ROCNormalUndead] = rp_strat[STRAT_ROCNormalUndead] + 0
      set rp_strat[STRAT_ROCWyrms] = rp_strat[STRAT_ROCWyrms] + 0
      set rp_strat[STRAT_ROCBanshee] = rp_strat[STRAT_ROCBanshee] + 0
      set rp_strat[STRAT_ROCNecro] = rp_strat[STRAT_ROCNecro] + 0
      set rp_strat[STRAT_ROCGhouls] = rp_strat[STRAT_ROCGhouls] + 0
      set rp_strat[STRAT_ROCFiends] = rp_strat[STRAT_ROCFiends] + 0
      set rp_strat[STRAT_ROCGargWyrm] = rp_strat[STRAT_ROCGargWyrm] + 0
      set rp_strat[STRAT_ROCAboms] = rp_strat[STRAT_ROCAboms] + 0
      set rp_strat[STRAT_ROCMeatFiends] = rp_strat[STRAT_ROCMeatFiends] + 0
  endif


  if ai_time > 2 then
    call div_rp_strat(3)
  endif
  call make_rp_strat_positive()

endfunction

function StrategyChanger takes nothing returns nothing
  local real array rp

  if not strat_change_allowed or strategy != chosen_strategy or debug_strategy > -1 or FoodUsed() >= 85 or GetMaximumEnemyStrength() < ver_strat_change_enemy_strength_min then
    return
  endif
  call chooseStrategyRP()
  call normalize_rp_strat()  // Makes priority much larger so the extra bonuses do not make as much of a difference


  set rp[STRAT_ROCNormalUndead] = rp[STRAT_ROCNormalUndead] + 0 * enemy_air
  set rp[STRAT_ROCWyrms] = rp[STRAT_ROCWyrms] + 0 * enemy_air
  set rp[STRAT_ROCBanshee] = rp[STRAT_ROCBanshee] + -2 * enemy_air
  set rp[STRAT_ROCNecro] = rp[STRAT_ROCNecro] + -2 * enemy_air
  set rp[STRAT_ROCGhouls] = rp[STRAT_ROCGhouls] + -10 * enemy_air
  set rp[STRAT_ROCFiends] = rp[STRAT_ROCFiends] + 1 * enemy_air
  set rp[STRAT_ROCGargWyrm] = rp[STRAT_ROCGargWyrm] + 1 * enemy_air
  set rp[STRAT_ROCAboms] = rp[STRAT_ROCAboms] + -10 * enemy_air
  set rp[STRAT_ROCMeatFiends] = rp[STRAT_ROCMeatFiends] + -1 * enemy_air
  set rp[STRAT_ROCNormalUndead] = rp[STRAT_ROCNormalUndead] + 0 * enemy_casters
  set rp[STRAT_ROCWyrms] = rp[STRAT_ROCWyrms] + -1 * enemy_casters
  set rp[STRAT_ROCBanshee] = rp[STRAT_ROCBanshee] + 1 * enemy_casters
  set rp[STRAT_ROCNecro] = rp[STRAT_ROCNecro] + -1 * enemy_casters
  set rp[STRAT_ROCGhouls] = rp[STRAT_ROCGhouls] + 1 * enemy_casters
  set rp[STRAT_ROCFiends] = rp[STRAT_ROCFiends] + 1 * enemy_casters
  set rp[STRAT_ROCGargWyrm] = rp[STRAT_ROCGargWyrm] + -1 * enemy_casters
  set rp[STRAT_ROCAboms] = rp[STRAT_ROCAboms] + 0 * enemy_casters
  set rp[STRAT_ROCMeatFiends] = rp[STRAT_ROCMeatFiends] + 1 * enemy_casters
  set rp[STRAT_ROCNormalUndead] = rp[STRAT_ROCNormalUndead] + 0 * enemy_towers
  set rp[STRAT_ROCWyrms] = rp[STRAT_ROCWyrms] + 1 * enemy_towers
  set rp[STRAT_ROCBanshee] = rp[STRAT_ROCBanshee] + 0 * enemy_towers
  set rp[STRAT_ROCNecro] = rp[STRAT_ROCNecro] + 0 * enemy_towers
  set rp[STRAT_ROCGhouls] = rp[STRAT_ROCGhouls] + 0 * enemy_towers
  set rp[STRAT_ROCFiends] = rp[STRAT_ROCFiends] + 0 * enemy_towers
  set rp[STRAT_ROCGargWyrm] = rp[STRAT_ROCGargWyrm] + 1 * enemy_towers
  set rp[STRAT_ROCAboms] = rp[STRAT_ROCAboms] + 0 * enemy_towers
  set rp[STRAT_ROCMeatFiends] = rp[STRAT_ROCMeatFiends] + 1 * enemy_towers
  set rp[STRAT_ROCNormalUndead] = rp[STRAT_ROCNormalUndead] + 0 * enemy_piercing
  set rp[STRAT_ROCWyrms] = rp[STRAT_ROCWyrms] + -1 * enemy_piercing
  set rp[STRAT_ROCBanshee] = rp[STRAT_ROCBanshee] + 1 * enemy_piercing
  set rp[STRAT_ROCNecro] = rp[STRAT_ROCNecro] + 1 * enemy_piercing
  set rp[STRAT_ROCGhouls] = rp[STRAT_ROCGhouls] + 1 * enemy_piercing
  set rp[STRAT_ROCFiends] = rp[STRAT_ROCFiends] + 0 * enemy_piercing
  set rp[STRAT_ROCGargWyrm] = rp[STRAT_ROCGargWyrm] + 0 * enemy_piercing
  set rp[STRAT_ROCAboms] = rp[STRAT_ROCAboms] + -1 * enemy_piercing
  set rp[STRAT_ROCMeatFiends] = rp[STRAT_ROCMeatFiends] + 0 * enemy_piercing
  set rp[STRAT_ROCNormalUndead] = rp[STRAT_ROCNormalUndead] + 0 * enemy_normal
  set rp[STRAT_ROCWyrms] = rp[STRAT_ROCWyrms] + 0 * enemy_normal
  set rp[STRAT_ROCBanshee] = rp[STRAT_ROCBanshee] + 0 * enemy_normal
  set rp[STRAT_ROCNecro] = rp[STRAT_ROCNecro] + 0 * enemy_normal
  set rp[STRAT_ROCGhouls] = rp[STRAT_ROCGhouls] + 0 * enemy_normal
  set rp[STRAT_ROCFiends] = rp[STRAT_ROCFiends] + 0 * enemy_normal
  set rp[STRAT_ROCGargWyrm] = rp[STRAT_ROCGargWyrm] + 0 * enemy_normal
  set rp[STRAT_ROCAboms] = rp[STRAT_ROCAboms] + 0 * enemy_normal
  set rp[STRAT_ROCMeatFiends] = rp[STRAT_ROCMeatFiends] + 0 * enemy_normal
  set rp[STRAT_ROCNormalUndead] = rp[STRAT_ROCNormalUndead] + 0 * enemy_siege
  set rp[STRAT_ROCWyrms] = rp[STRAT_ROCWyrms] + 0 * enemy_siege
  set rp[STRAT_ROCBanshee] = rp[STRAT_ROCBanshee] + 0 * enemy_siege
  set rp[STRAT_ROCNecro] = rp[STRAT_ROCNecro] + 0 * enemy_siege
  set rp[STRAT_ROCGhouls] = rp[STRAT_ROCGhouls] + 0 * enemy_siege
  set rp[STRAT_ROCFiends] = rp[STRAT_ROCFiends] + 0 * enemy_siege
  set rp[STRAT_ROCGargWyrm] = rp[STRAT_ROCGargWyrm] + 0 * enemy_siege
  set rp[STRAT_ROCAboms] = rp[STRAT_ROCAboms] + 0 * enemy_siege
  set rp[STRAT_ROCMeatFiends] = rp[STRAT_ROCMeatFiends] + 0 * enemy_siege
  set rp[STRAT_ROCNormalUndead] = rp[STRAT_ROCNormalUndead] + 0 * enemy_magic
  set rp[STRAT_ROCWyrms] = rp[STRAT_ROCWyrms] + 0 * enemy_magic
  set rp[STRAT_ROCBanshee] = rp[STRAT_ROCBanshee] + 0 * enemy_magic
  set rp[STRAT_ROCNecro] = rp[STRAT_ROCNecro] + 0 * enemy_magic
  set rp[STRAT_ROCGhouls] = rp[STRAT_ROCGhouls] + 0 * enemy_magic
  set rp[STRAT_ROCFiends] = rp[STRAT_ROCFiends] + 0 * enemy_magic
  set rp[STRAT_ROCGargWyrm] = rp[STRAT_ROCGargWyrm] + 0 * enemy_magic
  set rp[STRAT_ROCAboms] = rp[STRAT_ROCAboms] + 0 * enemy_magic
  set rp[STRAT_ROCMeatFiends] = rp[STRAT_ROCMeatFiends] + 0 * enemy_magic
  set rp[STRAT_ROCNormalUndead] = rp[STRAT_ROCNormalUndead] + 0 * enemy_unarmored
  set rp[STRAT_ROCWyrms] = rp[STRAT_ROCWyrms] + 1 * enemy_unarmored
  set rp[STRAT_ROCBanshee] = rp[STRAT_ROCBanshee] + 0 * enemy_unarmored
  set rp[STRAT_ROCNecro] = rp[STRAT_ROCNecro] + 0 * enemy_unarmored
  set rp[STRAT_ROCGhouls] = rp[STRAT_ROCGhouls] + 0 * enemy_unarmored
  set rp[STRAT_ROCFiends] = rp[STRAT_ROCFiends] + 1 * enemy_unarmored
  set rp[STRAT_ROCGargWyrm] = rp[STRAT_ROCGargWyrm] + 1 * enemy_unarmored
  set rp[STRAT_ROCAboms] = rp[STRAT_ROCAboms] + 0 * enemy_unarmored
  set rp[STRAT_ROCMeatFiends] = rp[STRAT_ROCMeatFiends] + 1 * enemy_unarmored
  set rp[STRAT_ROCNormalUndead] = rp[STRAT_ROCNormalUndead] + 0 * enemy_lightarmor
  set rp[STRAT_ROCWyrms] = rp[STRAT_ROCWyrms] + -1 * enemy_lightarmor
  set rp[STRAT_ROCBanshee] = rp[STRAT_ROCBanshee] + -1 * enemy_lightarmor
  set rp[STRAT_ROCNecro] = rp[STRAT_ROCNecro] + 0 * enemy_lightarmor
  set rp[STRAT_ROCGhouls] = rp[STRAT_ROCGhouls] + 1 * enemy_lightarmor
  set rp[STRAT_ROCFiends] = rp[STRAT_ROCFiends] + -1 * enemy_lightarmor
  set rp[STRAT_ROCGargWyrm] = rp[STRAT_ROCGargWyrm] + -1 * enemy_lightarmor
  set rp[STRAT_ROCAboms] = rp[STRAT_ROCAboms] + 1 * enemy_lightarmor
  set rp[STRAT_ROCMeatFiends] = rp[STRAT_ROCMeatFiends] + 0 * enemy_lightarmor
  set rp[STRAT_ROCNormalUndead] = rp[STRAT_ROCNormalUndead] + 0 * enemy_mediumarmor
  set rp[STRAT_ROCWyrms] = rp[STRAT_ROCWyrms] + 0 * enemy_mediumarmor
  set rp[STRAT_ROCBanshee] = rp[STRAT_ROCBanshee] + 0 * enemy_mediumarmor
  set rp[STRAT_ROCNecro] = rp[STRAT_ROCNecro] + 0 * enemy_mediumarmor
  set rp[STRAT_ROCGhouls] = rp[STRAT_ROCGhouls] + 0 * enemy_mediumarmor
  set rp[STRAT_ROCFiends] = rp[STRAT_ROCFiends] + 0 * enemy_mediumarmor
  set rp[STRAT_ROCGargWyrm] = rp[STRAT_ROCGargWyrm] + 0 * enemy_mediumarmor
  set rp[STRAT_ROCAboms] = rp[STRAT_ROCAboms] + 0 * enemy_mediumarmor
  set rp[STRAT_ROCMeatFiends] = rp[STRAT_ROCMeatFiends] + 0 * enemy_mediumarmor
  set rp[STRAT_ROCNormalUndead] = rp[STRAT_ROCNormalUndead] + 0 * enemy_heavyarmor
  set rp[STRAT_ROCWyrms] = rp[STRAT_ROCWyrms] + 1 * enemy_heavyarmor
  set rp[STRAT_ROCBanshee] = rp[STRAT_ROCBanshee] + 1 * enemy_heavyarmor
  set rp[STRAT_ROCNecro] = rp[STRAT_ROCNecro] + 1 * enemy_heavyarmor
  set rp[STRAT_ROCGhouls] = rp[STRAT_ROCGhouls] + -1 * enemy_heavyarmor
  set rp[STRAT_ROCFiends] = rp[STRAT_ROCFiends] + 1 * enemy_heavyarmor
  set rp[STRAT_ROCGargWyrm] = rp[STRAT_ROCGargWyrm] + 1 * enemy_heavyarmor
  set rp[STRAT_ROCAboms] = rp[STRAT_ROCAboms] + 0 * enemy_heavyarmor
  set rp[STRAT_ROCMeatFiends] = rp[STRAT_ROCMeatFiends] + 1 * enemy_heavyarmor

  set rp_strat[STRAT_ROCNormalUndead] = rp_strat[STRAT_ROCNormalUndead] + R2I(rp[STRAT_ROCNormalUndead])
  set rp_strat[STRAT_ROCWyrms] = rp_strat[STRAT_ROCWyrms] + R2I(rp[STRAT_ROCWyrms])
  set rp_strat[STRAT_ROCBanshee] = rp_strat[STRAT_ROCBanshee] + R2I(rp[STRAT_ROCBanshee])
  set rp_strat[STRAT_ROCNecro] = rp_strat[STRAT_ROCNecro] + R2I(rp[STRAT_ROCNecro])
  set rp_strat[STRAT_ROCGhouls] = rp_strat[STRAT_ROCGhouls] + R2I(rp[STRAT_ROCGhouls])
  set rp_strat[STRAT_ROCFiends] = rp_strat[STRAT_ROCFiends] + R2I(rp[STRAT_ROCFiends])
  set rp_strat[STRAT_ROCGargWyrm] = rp_strat[STRAT_ROCGargWyrm] + R2I(rp[STRAT_ROCGargWyrm])
  set rp_strat[STRAT_ROCAboms] = rp_strat[STRAT_ROCAboms] + R2I(rp[STRAT_ROCAboms])
  set rp_strat[STRAT_ROCMeatFiends] = rp_strat[STRAT_ROCMeatFiends] + R2I(rp[STRAT_ROCMeatFiends])

  call finish_strategy_change()
endfunction

function SetRaceAggression takes nothing returns nothing
  set b_race_aggression[0] = 2
  set b_race_aggression[1] = 2
  set b_race_aggression[2] = 1
  set b_race_aggression[3] = 2
  set b_race_aggression[4] = 2
  set b_race_aggression[5] = 3
  set b_race_aggression[6] = -1
  set b_race_aggression[7] = 1
  set b_race_aggression[8] = 2
  set b_race_aggression[9] = 1
  set b_race_aggression[10] = 1
  set b_race_aggression[11] = 2
endfunction

function AMAI_PickMeleeHero takes nothing returns nothing
  local integer i = 0
  //local location l = GetUnitLoc(nearest_neutral[NEUTRAL_TAVERN])

  set hero_number = race_hero_number + ver_neutral_hero_number
  // recalculate_heros occurs only if hero is a tavern hero but tavern is not pathable
  if not recalculate_heros and ver_neutral_heroes_available and neutral_available[NEUTRAL_TAVERN] then //and CanPathToLoc(home_location, l, PATHING_TYPE_WALKABILITY) > 0 then
    call InitNeutralSkills()
    //call Trace("PickMeleeHero: Neutral Hero possible")
  else
    set first_choosable_hero = ver_neutral_hero_number
  endif
  //call RemoveLocation(l)
  //set l = null

  set all_heroes[0] = DEATH_KNIGHT
  set hero_rp[0] = 45
  set all_heroes[1] = DREAD_LORD
  set hero_rp[1] = 13
  set all_heroes[2] = LICH
  set hero_rp[2] = 28


  loop
  exitwhen i > hero_number
    set all_heroes_copy[i] = all_heroes[i]
    set i = i + 1
  endloop

  call AddFavoriteHeroRP()
  call AddStrategyHeroRP(strategy_first_hero[strategy], strategy_first_hero_bonus[strategy])

  // increase the rp for those that are good for certain matchups

  if c_ally_total > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
  endif

  if c_enemy[R_RANDOM] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
  endif

  if c_enemy[R_ELF] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
  endif

  if c_ally[R_ELF] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
  endif

  if c_enemy[R_HUMAN] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
  endif

  if c_ally[R_HUMAN] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
  endif

  if c_enemy[R_ORC] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
  endif

  if c_ally[R_ORC] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
  endif

  if c_enemy[R_UNDEAD] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
  endif

  if c_ally[R_UNDEAD] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
  endif


  set hero_rp[0] = hero_rp[0] + 11
  set hero_rp[1] = hero_rp[1] + -5
  set hero_rp[2] = hero_rp[2] + 0

  set picked_hero = ChooseFirstHero()

  set hero_rp[0] = hero_rp[0] - 11
  set hero_rp[1] = hero_rp[1] - -5
  set hero_rp[2] = hero_rp[2] - 0


  // increase the rp for those that are better as second or third hero
  set hero_rp[0] = hero_rp[0] + 0
  set hero_rp[1] = hero_rp[1] + 0
  set hero_rp[2] = hero_rp[2] + 7

  call AddStrategyHeroRP(strategy_second_hero[strategy], strategy_second_hero_bonus[strategy])
  call ChooseSecondHero()
  set hero_rp[0] = hero_rp[0] - 0
  set hero_rp[1] = hero_rp[1] - 0
  set hero_rp[2] = hero_rp[2] - 7
  // ------------------------------------------------------------------------------

  set hero_rp[0] = hero_rp[0] + 0
  set hero_rp[1] = hero_rp[1] + 3
  set hero_rp[2] = hero_rp[2] + 0

  call AddStrategyHeroRP(strategy_third_hero[strategy], strategy_third_hero_bonus[strategy])
  call ChooseRestHeroes()
endfunction






function airairBuild takes nothing returns nothing
  local integer cc_airair = 0

  set cc_airair = TownCount(GARGOYLE)
  if cc_airair >= bn_airair then
    set strategy = chosen_strategy
  else
    call BuildUnit( bn_airair, GARGOYLE, 90  )
  endif
endfunction
function airgroundBuild takes nothing returns nothing
  local integer cc_airground = 0

  set cc_airground = TownCount(FROST_WYRM)
  if cc_airground >= bn_airground then
    set strategy = chosen_strategy
  else
    call BuildUnit( bn_airground, FROST_WYRM, 90  )
  endif
endfunction
function groundairBuild takes nothing returns nothing
  local integer cc_groundair = 0

  set cc_groundair = TownCount(CRYPT_FIEND)
  if cc_groundair >= bn_groundair then
    set strategy = chosen_strategy
  else
    call BuildUnit( bn_groundair, CRYPT_FIEND, 90  )
  endif
endfunction
function groundgroundBuild takes nothing returns nothing
  local integer cc_groundground = 0

  set cc_groundground = TownCount(GHOUL)
  if cc_groundground >= bn_groundground then
    set strategy = chosen_strategy
  else
    call BuildUnit( bn_groundground, GHOUL, 90  )
  endif
endfunction
function farmBuild takes nothing returns nothing
  local integer cc_farm = 0

  set cc_farm = TownCount(ZIGGURAT_1)
  if cc_farm >= bn_farm then
    set strategy = chosen_strategy
  else
    call BuildUnit( bn_farm, ZIGGURAT_1, 90  )
  endif
endfunction
function guardBuild takes nothing returns nothing
  local integer cc_guard = 0

  set cc_guard = TownCount(ZIGGURAT_2)
  if cc_guard >= bn_guard then
    set strategy = chosen_strategy
  else
    call BuildUnit( bn_guard, ZIGGURAT_2, 90  )
  endif
endfunction

function cmdBuild takes nothing returns nothing
  if false then
  elseif strategy == 50 then
    call airairBuild()
  elseif strategy == 51 then
    call airgroundBuild()
  elseif strategy == 52 then
    call groundairBuild()
  elseif strategy == 53 then
    call groundgroundBuild()
  elseif strategy == 54 then
    call farmBuild()
  elseif strategy == 55 then
    call guardBuild()
  endif
endfunction

function set_skills takes nothing returns nothing
    if hero[1]== DEATH_KNIGHT then
        call LoadSkills(1,1,1)
    elseif hero[2]== DEATH_KNIGHT then
        call LoadSkills(2,1,2)
    elseif hero[3]== DEATH_KNIGHT then
        call LoadSkills(3,1,3)
    endif
    if hero[1]== DREAD_LORD then
        call LoadSkills(1,2,1)
    elseif hero[2]== DREAD_LORD then
        call LoadSkills(2,2,2)
    elseif hero[3]== DREAD_LORD then
        call LoadSkills(3,2,3)
    endif
    if hero[1]== LICH then
        call LoadSkills(1,3,1)
    elseif hero[2]== LICH then
        call LoadSkills(2,3,2)
    elseif hero[3]== LICH then
        call LoadSkills(3,3,3)
    endif
endfunction

function setup_force takes boolean inj returns nothing

    set wave = wave + 1

    call InitAssaultGroup()

    if inj then
      call RemoveInjuries()
    endif

    call SetMeleeGroupAM( hero[1] )
    call SetMeleeGroupAM( hero[2] )
    call SetMeleeGroupAM( hero[3] )
    call SetMeleeGroupAM( ABOMINATION )
    call SetMeleeGroupAM( BANSHEE )
    call SetMeleeGroupAM( CRYPT_FIEND )
    call SetMeleeGroupAM( FROST_WYRM )
    call SetMeleeGroupAM( GARGOYLE )
    call SetMeleeGroupAM( GHOUL )
    call SetMeleeGroupAM( MEAT_WAGON )
    call SetMeleeGroupAM( NECRO )
    call SetMeleeGroupAM( SHADE )
    call AttackGroupAddNeutrals()
    call AttackGroupAddUnknown()

endfunction



function basic_melee takes integer food, integer prio returns nothing
    call FoodPoolAM(food, true, race_simple_melee, GetFoodUsed(old_id[race_simple_melee]), CanBuildUnit(race_advanced_melee), race_advanced_melee, GetFoodUsed(old_id[race_advanced_melee]), prio)
endfunction

function setup_ghouls takes nothing returns nothing
  local integer gn = TownCountDone(racial_ghoul)
  local integer wood = GetWood()

  if wood > minimum_peon_wood then
    set take_all_ghouls_along = true
  elseif wood < minimum_peon_wood then
    set take_all_ghouls_along = false
  endif
  if take_all_ghouls_along then
    set attacking_ghouls = gn - Max(1 - (R2I(shredder_peon_count/2) * TownCountDone(neutral_shredder)), 0)
    set harvesting_ghouls = 0
  elseif wave <= 4 then
    set attacking_ghouls = Max(6, gn - 2)
    set harvesting_ghouls = 1
  //elseif wave==2 then
    //set attacking_ghouls = Max(6, gn - 2)
  //elseif wood < maximum_peon_wood then
    //set attacking_ghouls = gn - Max((gn - 4) - (4 * TownCountDone(neutral_shredder)), 0)
    //set harvesting_ghouls = Max(0,Min(10 - wood / minimum_peon_wood,c_ghoul_done))
    //set attacking_ghouls = gn - (havesting_ghouls - (4 * TownCountDone(neutral_shredder))
  //elseif wood > maximum_peon_wood and wood < minimum_peon_wood / 2 then
    //set attacking_ghouls = gn - Max(2 - (4 * TownCountDone(neutral_shredder)), 0)
  else
    //set harvesting_ghouls = Max(0,Min(5 - wood / R2I(maximum_peon_wood*1),gn) - (R2I(shredder_peon_count/2) * TownCountDone(neutral_shredder)))
    set harvesting_ghouls = Max(1,Min(5 - wood / R2I(maximum_peon_wood*1),gn) - (R2I(shredder_peon_count/2) * TownCountDone(neutral_shredder)))
    set attacking_ghouls = gn - harvesting_ghouls 
  endif
  set attacking_ghouls = Min(Max(attacking_ghouls, 0), gn)
endfunction

//============================================================================
//  global builds
//============================================================================
function global_init_strategy takes nothing returns nothing
    call AddBlock(8, ORC_ALTAR, true, 0, ZIGGURAT_1, 2)
    call AddHarass(1, 1, GHOUL)
    call AddHarass(2, 2, GHOUL)
    call AddHarass(3, 4, GHOUL)
    call AddHarass(3, 2, CRYPT_FIEND)
    set distraction_group = 3


endfunction
function global_build_sequence takes nothing returns nothing

    call DefendTownsDone(2, ZIGGURAT_2, 65)
    call DefendTownsDone(1, NECROPOLIS_2, 70)

    call BuildUnit(3, ZIGGURAT_2, 30)

    if TownCount(GHOUL) == 0 and GetWood() < 500 then
      call BuildUnit(1, GHOUL, 260)
    endif
    // Global Mercenaries
    call BuildUnit(2, merc_caster, 50)

    // Harassing
    if GetPlayerRace(nearest_enemy) != RACE_UNDEAD and TownCountDone(GHOUL) > 10 then
      call Harass(2, HARASS_TARGET_PEONS, true, 5, 0.75, 0, true, 50, 120)
   endif
    if GetPlayerRace(nearest_enemy) == RACE_NIGHTELF and TownCountDone(GHOUL) > 1 then
      call Harass(1, HARASS_TARGET_PEONS, true, 3, 0.75, 0, true, 10, 80)
    endif


endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_ROCNormalUndead takes nothing returns nothing




endfunction
function build_sequence_ROCNormalUndead takes nothing returns nothing
if tier == 3 then

      call BuildUnit(3, NECRO, 55)
      call BuildUnit(2, BANSHEE, 40)
      call BuildUnit(4, ABOMINATION, 50)
      call BuildUnit(10, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(4, GARGOYLE, 50)
      call BuildUnit(2, FROST_WYRM, 20)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, hero[3], 40)
      call BuildUpgr(2, UPG_NECROS, 40)
      call BuildUpgr(2, UPG_BANSHEE, 25)
      call BuildUpgr(1, UPG_GHOUL_FRENZY, 45)
      call BuildUpgr(1, UPG_WYRM_BREATH, 15)
      call BuildUpgr(1, UPG_CANNIBALIZE, 45)
      call BuildUpgr(1, UPG_SKEL_LIFE, 40)
      call BuildUpgr(3, UPG_UNHOLY_ARMOR, 40)
      call BuildUpgr(3, UPG_UNHOLY_STR, 41)
      call BuildUpgr(3, UPG_CR_ARMOR, 35)
      call BuildUpgr(3, UPG_CR_ATTACK, 36)




elseif tier == 2 then

      call BuildUnit(3, NECRO, 55)
      call BuildUnit(2, BANSHEE, 40)
      call BuildUnit(10, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, NECROPOLIS_3, 10)
      call BuildUpgr(1, UPG_NECROS, 40)
      call BuildUpgr(1, UPG_BANSHEE, 25)
      call BuildUpgr(1, UPG_CANNIBALIZE, 45)
      call BuildUpgr(1, UPG_SKEL_LIFE, 40)
      call BuildUpgr(2, UPG_UNHOLY_ARMOR, 30)
      call BuildUpgr(2, UPG_UNHOLY_STR, 31)
      call BuildUpgr(2, UPG_CR_ARMOR, 5)
      call BuildUpgr(2, UPG_CR_ATTACK, 6)




else

      call BuildUnit(10, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, NECROPOLIS_2, 20)
      call BuildUpgr(1, UPG_CANNIBALIZE, 45)




endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_ROCWyrms takes nothing returns nothing




endfunction
function build_sequence_ROCWyrms takes nothing returns nothing
if tier == 3 then

      call BuildUnit(6, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(8, CRYPT_FIEND, 50)
      call BuildUnit(6, FROST_WYRM, 50)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, hero[3], 40)
      call BuildUpgr(1, UPG_WYRM_BREATH, 55)
      call BuildUpgr(1, UPG_FIEND_WEB, 65)
      call BuildUpgr(3, UPG_CR_ARMOR, 45)
      call BuildUpgr(3, UPG_CR_ATTACK, 46)




elseif tier == 2 then

      call BuildUnit(6, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(6, CRYPT_FIEND, 50)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, NECROPOLIS_3, 50)
      call BuildUnit(1, SAC_PIT, 45)
      call BuildUpgr(1, UPG_FIEND_WEB, 60)
      call BuildUpgr(2, UPG_CR_ARMOR, 35)
      call BuildUpgr(2, UPG_CR_ATTACK, 36)




else

      call BuildUnit(10, GHOUL, 35)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(3, CRYPT_FIEND, 30)
      call BuildUnit(1, hero[1], 60)
      call BuildUnit(1, NECROPOLIS_2, 88)
      call BuildUpgr(1, UPG_FIEND_WEB, 25)




endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_ROCNecro takes nothing returns nothing




endfunction
function build_sequence_ROCNecro takes nothing returns nothing
if tier == 3 then

      call BuildUnit(6, NECRO, 55)
      call BuildUnit(5, ABOMINATION, 50)
      call BuildUnit(10, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUpgr(2, UPG_NECROS, 40)
      call BuildUpgr(1, UPG_GHOUL_FRENZY, 45)
      call BuildUpgr(1, UPG_CANNIBALIZE, 45)
      call BuildUpgr(1, UPG_SKEL_LIFE, 40)
      call BuildUpgr(3, UPG_UNHOLY_ARMOR, 40)
      call BuildUpgr(3, UPG_UNHOLY_STR, 41)




elseif tier == 2 then

      call BuildUnit(4, NECRO, 55)
      call BuildUnit(10, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, NECROPOLIS_3, 10)
      call BuildUpgr(1, UPG_NECROS, 40)
      call BuildUpgr(1, UPG_CANNIBALIZE, 45)
      call BuildUpgr(1, UPG_SKEL_LIFE, 40)
      call BuildUpgr(2, UPG_UNHOLY_ARMOR, 30)
      call BuildUpgr(2, UPG_UNHOLY_STR, 31)




else

      call BuildUnit(10, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, NECROPOLIS_2, 10)
      call BuildUpgr(1, UPG_CANNIBALIZE, 45)




endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_ROCBanshee takes nothing returns nothing




endfunction
function build_sequence_ROCBanshee takes nothing returns nothing
if tier == 3 then
      call BuildUnit(8, BANSHEE, 50)
      call BuildUnit(5, ABOMINATION, 50)
      call BuildUnit(10, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUpgr(2, UPG_BANSHEE, 45)
      call BuildUpgr(1, UPG_GHOUL_FRENZY, 45)
      call BuildUpgr(1, UPG_CANNIBALIZE, 45)
      call BuildUpgr(3, UPG_UNHOLY_ARMOR, 40)
      call BuildUpgr(3, UPG_UNHOLY_STR, 41)




elseif tier == 2 then

      call BuildUnit(6, BANSHEE, 50)
      call BuildUnit(10, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, NECROPOLIS_3, 10)
      call BuildUpgr(1, UPG_BANSHEE, 45)
      call BuildUpgr(1, UPG_CANNIBALIZE, 45)
      call BuildUpgr(2, UPG_UNHOLY_ARMOR, 30)
      call BuildUpgr(2, UPG_UNHOLY_STR, 31)




else

      call BuildUnit(10, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, NECROPOLIS_2, 10)
      call BuildUpgr(1, UPG_CANNIBALIZE, 25)



endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_ROCGhouls takes nothing returns nothing



endfunction
function build_sequence_ROCGhouls takes nothing returns nothing
if tier == 3 then

      call BuildUnit(35, GHOUL, 45)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 70)
      call BuildUnit(1, hero[3], 60)
      call BuildUpgr(1, UPG_GHOUL_FRENZY, 45)
      call BuildUpgr(1, UPG_CANNIBALIZE, 45)
      call BuildUpgr(3, UPG_UNHOLY_ARMOR, 40)
      call BuildUpgr(3, UPG_UNHOLY_STR, 41)



elseif tier == 2 then

      call BuildUnit(14, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, NECROPOLIS_3, 10)
      call BuildUpgr(1, UPG_CANNIBALIZE, 45)
      call BuildUpgr(2, UPG_UNHOLY_ARMOR, 30)
      call BuildUpgr(2, UPG_UNHOLY_STR, 31)



else

      call BuildUnit(10, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, NECROPOLIS_2, 10)
      call BuildUpgr(1, UPG_CANNIBALIZE, 45)



endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_ROCFiends takes nothing returns nothing



endfunction
function build_sequence_ROCFiends takes nothing returns nothing
if tier == 3 then

      call BuildUnit(20, CRYPT_FIEND, 55)
      call BuildUnit(6, GHOUL, 45)
      call BuildUnit(4, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 70)
      call BuildUnit(1, hero[3], 60)
      call BuildUpgr(1, UPG_FIEND_WEB, 93)
      call BuildUpgr(3, UPG_CR_ARMOR, 40)
      call BuildUpgr(3, UPG_CR_ATTACK, 41)



elseif tier == 2 then

      call BuildUnit(8, CRYPT_FIEND, 55)
      call BuildUnit(6, GHOUL, 55)
      call BuildUnit(4, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUpgr(1, UPG_FIEND_WEB, 69)
      call BuildUpgr(2, UPG_CR_ARMOR, 30)
      call BuildUpgr(2, UPG_CR_ATTACK, 31)



else

      call BuildUnit(4, CRYPT_FIEND, 58)
      call BuildUnit(10, GHOUL, 55)
      call BuildUnit(4, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, NECROPOLIS_2, 10)



endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_ROCGargWyrm takes nothing returns nothing



endfunction
function build_sequence_ROCGargWyrm takes nothing returns nothing
if tier == 3 then

      call BuildUnit(6, GHOUL, 45)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(14, GARGOYLE, 40)
      call BuildUnit(5, FROST_WYRM, 40)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 70)
      call BuildUnit(1, hero[3], 60)
      call BuildUpgr(3, UPG_CR_ARMOR, 40)
      call BuildUpgr(3, UPG_CR_ATTACK, 41)



elseif tier == 2 then

      call BuildUnit(6, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(2, GARGOYLE, 30)
      call BuildUnit(1, FROST_WYRM, 30)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, NECROPOLIS_3, 50)
      call BuildUnit(1, SAC_PIT, 45)
      call BuildUpgr(2, UPG_CR_ARMOR, 30)
      call BuildUpgr(2, UPG_CR_ATTACK, 31)



else

      call BuildUnit(8, GHOUL, 30)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 49)
      call BuildUnit(1, NECROPOLIS_2, 50)



endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_ROCAboms takes nothing returns nothing




endfunction
function build_sequence_ROCAboms takes nothing returns nothing
if tier == 3 then

      call BuildUnit(6, GHOUL, 45)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(15, ABOMINATION, 35)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 70)
      call BuildUnit(1, hero[3], 60)
      call BuildUpgr(1, UPG_PLAGUE, 45)
      call BuildUpgr(3, UPG_UNHOLY_ARMOR, 40)
      call BuildUpgr(3, UPG_UNHOLY_STR, 41)




elseif tier == 2 then

      call BuildUnit(12, GHOUL, 40)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, ABOMINATION, 20)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, NECROPOLIS_3, 10)
      call BuildUpgr(1, UPG_PLAGUE, 45)
      call BuildUpgr(2, UPG_UNHOLY_ARMOR, 30)
      call BuildUpgr(2, UPG_UNHOLY_STR, 31)




else

      call BuildUnit(12, GHOUL, 40)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 59)
      call BuildUnit(1, NECROPOLIS_2, 60)




endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_ROCMeatFiends takes nothing returns nothing




endfunction
function build_sequence_ROCMeatFiends takes nothing returns nothing
if tier == 3 then

      call BuildUnit(14, CRYPT_FIEND, 45)
      call BuildUnit(6, MEAT_WAGON, 60)
      call BuildUnit(6, GHOUL, 45)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 70)
      call BuildUnit(1, hero[3], 60)
      call BuildUpgr(1, UPG_FIEND_WEB, 93)
      call BuildUpgr(3, UPG_CR_ARMOR, 40)
      call BuildUpgr(3, UPG_CR_ATTACK, 41)




elseif tier == 2 then

      call BuildUnit(6, CRYPT_FIEND, 55)
      call BuildUnit(4, MEAT_WAGON, 50)
      call BuildUnit(6, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUpgr(1, UPG_FIEND_WEB, 69)
      call BuildUpgr(2, UPG_CR_ARMOR, 30)
      call BuildUpgr(2, UPG_CR_ATTACK, 31)




else

      call BuildUnit(4, CRYPT_FIEND, 58)
      call BuildUnit(8, GHOUL, 55)
      call BuildUnit(2, GHOUL, 90)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, NECROPOLIS_2, 10)




endif
endfunction

function init_strategy takes nothing returns nothing
  call InitBlockList()
  call InitRBlockList()
  call InitHarass()
  call global_init_strategy()
  set exp_first_time = p_exp_first_time[profile] + strategy_first_exp_time[strategy]
  set exp_second_time = p_exp_second_time[profile] + strategy_second_exp_time[strategy]
  call ApplyStrategyRaceAggression()

if strategy < 4 then
if strategy < 2 then
if strategy < 1 then
call init_strategy_ROCNormalUndead()
 else
call init_strategy_ROCAboms()
 endif
 else
if strategy < 3 then
call init_strategy_ROCNecro()
 else
call init_strategy_ROCBanshee()
 endif
 endif
 else
if strategy < 6 then
if strategy < 5 then
call init_strategy_ROCMeatFiends()
 else
call init_strategy_ROCFiends()
 endif
 else
if strategy < 7 then
call init_strategy_ROCGhouls()
 else
if strategy < 8 then
call init_strategy_ROCGargWyrm()
 else
call init_strategy_ROCWyrms()
 endif
 endif
 endif
 endif

endfunction

function build_sequence takes nothing returns nothing
  call global_build_sequence()
  if towerrush then
    call AddBlock(2, GRUNT, true, 0, STRONGHOLD, 1000)
    call BuildUnit(1, hero[1], 100)
    call BuildUnit(1, race_towerrush_requirement, 98)
  endif
  if strategy >= rp_strat_length then
    call cmdBuild()
  else
if strategy < 4 then
if strategy < 2 then
if strategy < 1 then
call build_sequence_ROCNormalUndead()
 else
call build_sequence_ROCAboms()
 endif
 else
if strategy < 3 then
call build_sequence_ROCNecro()
 else
call build_sequence_ROCBanshee()
 endif
 endif
 else
if strategy < 6 then
if strategy < 5 then
call build_sequence_ROCMeatFiends()
 else
call build_sequence_ROCFiends()
 endif
 else
if strategy < 7 then
call build_sequence_ROCGhouls()
 else
if strategy < 8 then
call build_sequence_ROCGargWyrm()
 else
call build_sequence_ROCWyrms()
 endif
 endif
 endif
 endif
  endif
endfunction

function attack_sequence_all takes nothing returns nothing

  call Trace("Starting Attack Thread Loop") 

  if ver_heroes then
  loop
      exitwhen TownCountDone(hero[1]) > 0 or desperation_assault
      call Sleep(2 * sleep_multiplier)
  //    call Trace("Attack Loop1")
  endloop
  endif

  call StaggerSleep(0,2)
  loop

    call Trace("RACIAL ATTACK: Retreating")
    loop
      exitwhen not (CaptainRetreating() and isfleeing) or desperation_assault
      exitwhen player_defeated
      call CaptainGoHome()  // Seems to prevent the fight and flee behaviour. Still occasions where captain seems to be home instantanously when it retreated
      call Sleep(2 * sleep_multiplier)

    //if break_attack then
    //call DisplayToAll("break_attack is true")
    //endif
    endloop
    call Trace("RACIAL ATTACK: exit Retreating")

    call HealArmy()
    //call Trace("RACIAL ATTACK: Army Healed") 

    //call HeroHealingBugFix()     // To hopefully fix bugs with attack system as will keep them running

    if ver_heroes then
      set creeping_only = AwaitMeleeHeroesAM()
    endif

    exitwhen player_defeated

    if no_attack_allowed then
      call Trace("RACIAL ATTACK: NO ATTACK SETTING IS ON")
    else

      if race_has_ghouls and race_ghouls_attack then
        call setup_ghouls()

        set peons_assigned = false
        call Trace("RACIAL ATTACK: Assigning Peons")
        loop
          exitwhen peons_assigned or desperation_assault
          call Sleep(sleep_multiplier)
        endloop
        call Trace("RACIAL ATTACK: exit Assigning Peons")
        call Sleep(2) // Seems this helps make sure we do get the ghouls instead of them going back to wood
        //call FormGroupAM(2)
      endif

      call Trace("RACIAL ATTACK: waiting for troops")
      loop
        exitwhen GetOwnStrength() >= minimum_attack_strength or desperation_assault
        call Sleep(5 * sleep_multiplier)
      endloop
      call Trace("RACIAL ATTACK: exit waiting troops")

      call setup_force(false)
      call universal_attack_sequence()

      set attacking_ghouls = 0
    endif

    call Sleep(sleep_multiplier)
  endloop
endfunction

function harvest_gold takes integer townid returns nothing
  if TownHasMine(townid) or GetResourceAmount(own_town_mine[townid]) > 0 then
    call HarvestGold(townid,ver_optimal_gold)
  endif
endfunction

function peon_assignment takes nothing returns nothing
  call ClearHarvestAI()

  if desperation_assault then
    return
  endif

  if race_manual_loading then
    if TownHasMine(0) and first_town_mine == 0 then
      if FoodSpace() <= 0 and TownCount(racial_peon) == TownCountDone(racial_peon) and TownCount(racial_peon) <= 4 then
        call HarvestGold(0, 2)  // no foodspace , no peon , need one harvest mine peon build Farms
      elseif not hero_built[1] and TownCountDone(racial_peon) < 7 then  // game just started
        call HarvestGold(0, 3)  // need more wisp HarvestWood , avoidance no wood cannot build and AI stop construction
      else
        call HarvestGold(0, ver_optimal_gold)
      endif
    endif
  else
  call harvest_gold(0)
    call harvest_gold(1)
    call harvest_gold(2)
    call harvest_gold(3)
  endif
  if race_has_ghouls then
    call HarvestWood(0,Max(TownCountDone(racial_ghoul) - attacking_ghouls, harvesting_ghouls) - TownCountDone(neutral_shredder))
    set peons_assigned = true
  elseif race_manual_loading then
    call HarvestWood(0, 20)
  endif
endfunction

function peon_assignment_all takes nothing returns nothing

  //if race_has_power_build then
    //call TownHallCheck()
  //endif

  if (race_has_ghouls and race_ghouls_attack) or race_no_wood_harvest or race_manual_loading then
    call peon_assignment()
  else
    call universal_peon_assignment()
  endif
endfunction

function calculate_strat_timer_seconds takes integer seconds returns integer
  local integer x = GetRandomInt(-30, 30) - seconds
  set x = x*R2I(1 + 0.25*I2R(Max((3 - tier), 0))) // tier modifier, earlier tiers keep strategy for longer
  set x = x/R2I(1 + 0.5*I2R(Max(difficulty - 2, 0))) // difficulty modifier, faster change time on insane
  return x
endfunction

function calculate_strat_timer takes nothing returns integer
  return calculate_strat_timer_seconds(strat_minimum_time[strategy]*6)
endfunction

function build_sequence_all takes nothing returns nothing
  local integer x = calculate_strat_timer()
  local integer counter_timer = R2I(RMin(I2R(calculate_strat_timer())/2,-60))
  local integer new_tier = 0
  local integer last_counter = -1
  local boolean set_counter = true
  local boolean reportStrategy = false
  local boolean reset_counter = false

  call Trace("Starting Build Sequence Loop")
    loop
      exitwhen player_defeated

    if recalculate_heros then
        call AMAI_PickMeleeHero()
      call set_skills()
      set recalculate_heros = false
    endif

    //call Trace("BUILD SEQUENCE: Running Loop")
    call peon_assignment_all()
    //call Trace("BUILD SEQUENCE: peon_assignment")
    if x > 12 then
      set x = 0
      //call Trace("BUILD SEQUENCE: StrategyChanger")
      call StrategyChanger()
      if strategy <= 49 then
          set x = Min(Max(calculate_strat_timer() / 2, -120), -60) // If same strategy persists give more time
          set counter_timer = 2
          set reset_counter = true
    endif
    endif

    if last_strategy != strategy then
      set last_strategy = strategy
      set reportStrategy = true
      call SetRaceAggression()
      if strategy <= 49 then
        set x = calculate_strat_timer()
        set counter_timer = R2I(RMin(x/2,-80)) // Don't allow counter to change so soon
        set reset_counter = true
      endif
      //call Trace("BUILD SEQUENCE: InitBuildarray")
      call InitBuildArrayAM()
      //call Trace("BUILD SEQUENCE: init_strategy")
      call init_strategy()
    endif
    if debugging then
      call UpdateDebugTextTag(debugstrattag, "Strat:" + GetCurrentStrategyName(), 18, GetLocationX(home_location) - 300, GetLocationY(home_location) - 300)
      call SetTextTagPermanent(debugstrattag, true)
    endif

    if (x > counter_timer and counter_timer < 0) or reset_counter then
      set chosen_counter = DetermineCounterForce()

      if last_counter != chosen_counter and (debugging or GetRandomInt(1,5) == 1) then // Only randomly report counter changes to allies not every single time unless debug mode is on
        set reportStrategy = true
      endif
      set set_counter = true
      if reset_counter then
        set reset_counter = false
      else
        set counter_timer = 2 // Once fired don't change again until strategy changes
      endif
    endif
   if debugging then
      call UpdateDebugTextTag(debugcountertag, "Counter:" + strengthtext[chosen_counter], 18, GetLocationX(home_location) - 600, GetLocationY(home_location) - 600)
      call SetTextTagPermanent(debugcountertag, true)
   endif

    if reportStrategy then
      set reportStrategy = false
      if (IsPlayerObserver(GetLocalPlayer()) or IsPlayerAlly(GetLocalPlayer(), ai_player)) and chatting then
        call QueueStrategy(GetCurrentStrategyReport() + GetCurrentDynamicReport())
      endif
      //call DisplayToAlliesImportant( GetCurrentStrategyReport() + GetCurrentDynamicReport())
      //call DisplayToObserversImportant( GetCurrentStrategyReport() + GetCurrentDynamicReport())
    endif

    set new_tier = GetTier()
    if tier != new_tier then
      set tier = new_tier
      //call Trace("BUILD SEQUENCE: initbuildarray2")
      call InitBuildArrayAM()
    endif

    //call Trace("BUILD SEQUENCE: build_sequence")
    call Sleep(0.05)
    call build_sequence()
    if set_counter == true then 
      call DynamicStrategySelector()
      set set_counter = false
    endif
    call Sleep(3 * sleep_multiplier)
    //call Trace("BUILD SEQUENCE: peon_assignment 2")	  
    call peon_assignment_all()
    call Sleep(3 * sleep_multiplier)
    set x = x + Max(R2I(6*sleep_multiplier), 1)
  endloop
endfunction



function main takes nothing returns nothing
  call InitAMAIGameCache()
  set IsAMAI = true
  set ai_player = Player(GetAiPlayer())
  set home_location = GetPlayerStartLocationLoc(ai_player) // Moved from initAMAI	
  //call InitAiUnits()   // Not actually needed on amai scripts as of course its going to be AMAI

  // start
  set tiernum = 3

  call Trace("Initing racial units")
  call initRacialUnits()

  set own_race = R_UNDEAD

  call Trace("initing global settings")
  call InitGlobalSettings()

  set hero1_revive_prio = 200
  set hero2_revive_prio = 120
  set hero3_revive_prio = 80
  set prio_n_inc = 2
  set prio_t_inc = 1
  set prio_q_inc = 2
  set farm_food = 8
  set farm_food2 = 1
  set farm_prio = 400
  set peon_prio = 280
  set expa_prio = 200
  set expa_emergency_prio = 300
  set expa_rebuild_prio = 200
  set peon_1_mine_number = 5
  set peon_2_mines_number = 10
  set peon_mines_number = 15
  set min_peon_number_single_mine = 5
  set min_peon_number_multi_mine = 10
  set strat_persistence = 1500
  set strat_food_persistence = 3
  set relevant_strat_change_number = 3
  set kb_add1 = 8
  set kb_add2 = 9
  set kb_add3 = 3
  set kb_add4 = 10
  set ku_add1 = 4
  set ku_add2 = 7
  set ku_add3 = 8
  set fav_unit_add = 20
  set debug_strategy = -1
  set race_use_fountain = true
  set race_manual_loading = false
  set race_manual_loading_wisp = 0
  set race_manual_loading_mine = 0
  set race_towerrush_available = false
  set race_militia_expansion_available = false
  set race_hero_number = 3
  set race_simple_melee = 0
  set race_advanced_melee = 0
  set race_has_ghouls = true
  set race_has_power_build = false
  set race_no_wood_harvest = false
  set race_ignore_injured = false
  set race_uses_mine_expansion = true
  set race_uses_shredder = true
  set race_militia_available = false
  set race_militia_max_distance = 1000
  set race_militia_ability = 'Amil'
  set race_militia_hall_ability = 'Amic'
  set race_militia_unitstring = "militia"
  set race_militiaworker_unitstring = "peasant"
  set use_militia_only_on_bigger_threats = false
  set race_ancient_expansion_available = false
  set race_ancient_expansion_probability = 33
  set race_ancient_expansion_strength = 15
  set race_ancient_expansion_help_id = 'earc'
  set race_towerrush_requirement = 0
  set race_ghouls_attack = true
  set race_sell_ziggurats = true
  set race_ziggurat_keep_distance = 1200
  set race_build_farms_front = false
  set race_farms_front_limit = 4
  set race_farms_at_mine = 0
  set race_max_expa_mine_distance = 850
  set race_tower_id = 0
  set race_tower_upgrade = 0
  set race_towerrush_probability = 50
  set min_peon_number_double_mine = 11
  set race_has_moonwells = false
  set race_towerrush_hero_rush_level = 2
  set race_ancient_expansion_hero_rush_level = 2
  set ghoul_prio = 250
  set race_min_ghouls = 2
  set race_max_ghouls = 5
  set groundid =  'ewsp'
  call Trace("About to init things")
  call initRacialTraits()
  call Trace("racial traits init done")
  call InitStrats()
  call Trace("init strats")
  call InitAllSkills()
  call Trace("init all skills")
  call InitBuildings()
  call Trace("init buildings")
  call InitAMAI()
  call Trace("init AMAI")
  call InitProfile()
  call Trace("About to choose strategy")
  call chooseStrategyRP()
  call SmallMapsAdd()
  call removeNonBeginningStrats()
  call display_rp_strat()
  set chosen_counter = DetermineCounterForce()
   if debugging then
    //set debugcountertag = CreateTextTag()
    call UpdateDebugTextTag(debugcountertag, "Counter:" + strengthtext[chosen_counter], 18, GetLocationX(home_location) - 600, GetLocationY(home_location) - 600)
    call SetTextTagPermanent(debugcountertag, true)
  endif
  set chosen_strategy = choose_strategy()

  set strategy = chosen_strategy
  call SetChatVar("Strategy", GetCurrentStrategyName())
  if debugging then
    //set debugstrattag = CreateTextTag()
    call UpdateDebugTextTag(debugstrattag, "Strat:" + GetCurrentStrategyName(), 18, GetLocationX(home_location) - 300, GetLocationY(home_location) - 300)
    call SetTextTagPermanent(debugstrattag, true)
  endif
  call Trace("Strategy chosen")
  call AMAI_PickMeleeHero()
  if race_towerrush_available then
    call CanTowerRush()
  endif
  call Trace("Hero picked")
  call set_skills()
  call Trace("hero skills set")
  call SetRaceAggression()
  call init_strategy()
  call Trace("Strategy init")
  call AMAI(function SkillArraysAM, function build_sequence_all, function attack_sequence_all)
  call Trace("Playing Game")
  call PlayGameAM()


endfunction
